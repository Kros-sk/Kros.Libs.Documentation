{
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProcedureParametersSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProcedureParametersSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ProcedureParametersSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ProcedureParametersSchemaNames Inheritance System.Object SqlServerSchemaLoader.ProcedureParametersSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ProcedureParametersSchemaNames Fields AsLocator Declaration public const string AsLocator = \"AS_LOCATOR\" Field Value Type Description System.String CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String CollationName Declaration public const string CollationName = \"COLLATION_NAME\" Field Value Type Description System.String CollationSchema Declaration public const string CollationSchema = \"COLLATION_SCHEMA\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCatalog Declaration public const string CharacterSetCatalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IntervalPrecision Declaration public const string IntervalPrecision = \"INTERVAL_PRECISION\" Field Value Type Description System.String IntervalType Declaration public const string IntervalType = \"INTERVAL_TYPE\" Field Value Type Description System.String IsResult Declaration public const string IsResult = \"IS_RESULT\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecisionRadix Declaration public const string NumericPrecisionRadix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String ParameterMode Declaration public const string ParameterMode = \"PARAMETER_MODE\" Field Value Type Description System.String ParameterName Declaration public const string ParameterName = \"PARAMETER_NAME\" Field Value Type Description System.String SpecificCatalog Declaration public const string SpecificCatalog = \"SPECIFIC_CATALOG\" Field Value Type Description System.String SpecificName Declaration public const string SpecificName = \"SPECIFIC_NAME\" Field Value Type Description System.String SpecificSchema Declaration public const string SpecificSchema = \"SPECIFIC_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Net.NetworkChecker.html": {
    "href": "api/Kros.Utils/Kros.Net.NetworkChecker.html",
    "title": "Class NetworkChecker | Kros.Libs",
    "keywords": "Class NetworkChecker Class dedicated for simple testing of internet connectivity. Inheritance System.Object NetworkChecker Namespace : Kros.Net Assembly : Kros.Utils.dll Syntax public class NetworkChecker Remarks It is not sufficient to test connectivity using System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable , because that method just checks, if the computer is in some network. It does not check if internet is really available. Internet availability is not checked using ping ( System.Net.NetworkInformation.Ping ), because this method is often blocked. The availability is tested using a request to specific service. Constructors NetworkChecker(Uri) Declaration public NetworkChecker(Uri serviceAddress) Parameters Type Name Description System.Uri serviceAddress NetworkChecker(Uri, TimeSpan, TimeSpan) Declaration public NetworkChecker(Uri serviceAddress, TimeSpan requestTimeout, TimeSpan responseCacheExpiration) Parameters Type Name Description System.Uri serviceAddress System.TimeSpan requestTimeout System.TimeSpan responseCacheExpiration NetworkChecker(Uri, Uri) Declaration public NetworkChecker(Uri serviceAddress, Uri proxyAddress) Parameters Type Name Description System.Uri serviceAddress System.Uri proxyAddress NetworkChecker(Uri, Uri, TimeSpan, TimeSpan) Initializes a new instance of the NetworkChecker with address serviceAddress and aditional parameters. Declaration public NetworkChecker(Uri serviceAddress, Uri proxyAddress, TimeSpan requestTimeout, TimeSpan responseCacheExpiration) Parameters Type Name Description System.Uri serviceAddress The address for requests checking internet availability. It must be http or https address. System.Uri proxyAddress The address of a proxy server (optional). System.TimeSpan requestTimeout Maximum time for waiting for the response from server. If the response will not came in this time, we consider that the internet is not available. System.TimeSpan responseCacheExpiration Time during which the last response will be remembered and so no requests to serviceAddress will be performed. Properties ProxyAddress Address of a proxy server. Declaration public Uri ProxyAddress { get; } Property Value Type Description System.Uri RequestTimeout Maximum time for waiting for the response from server. If the response will not came in this time, we consider that the internet is not available. Default timeout is 1 second. Declaration public TimeSpan RequestTimeout { get; } Property Value Type Description System.TimeSpan ResponseCacheExpiration Time during which the last response will be remembered and so no other requests to ServiceAddress will be performed. Default value is 3 minutes. Declaration public TimeSpan ResponseCacheExpiration { get; } Property Value Type Description System.TimeSpan ServiceAddress Web address to which requests are made to check internet availability. Declaration public Uri ServiceAddress { get; } Property Value Type Description System.Uri Methods IsNetworkAvailable() Checks if the internet (specifically the service at the address ServiceAddress ) is available. Positive response is cached for the time specified in ResponseCacheExpiration , so another request to the service is made after this time. Declaration public bool IsNetworkAvailable() Returns Type Description System.Boolean true if internet (service) is available false otherwise."
  },
  "api/Kros.Utils/Kros.Data.Schema.ForeignKeyRule.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ForeignKeyRule.html",
    "title": "Enum ForeignKeyRule | Kros.Libs",
    "keywords": "Enum ForeignKeyRule Foreign key rule. Defines what to do with child records when the value of parent record changes or is deleted. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum ForeignKeyRule Fields Name Description Cascade Corresponding rows are updated in the referencing table when that row is updated in the parent table. NoAction No action is taken. . SetDefault All the values that make up the foreign key are set to their default values when the corresponding row in the parent table is updated. For this constraint to execute, all foreign key columns must have default definitions. If a column is nullable, and there is no explicit default value set, NULL becomes the implicit default value of the column. SetNull All the values that make up the foreign key are set to NULL when the corresponding row in the parent table is updated. For this constraint to execute, the foreign key columns must be nullable."
  },
  "api/Kros.Utils/Kros.Data.Schema.ForeignKeySchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ForeignKeySchema.html",
    "title": "Class ForeignKeySchema | Kros.Libs",
    "keywords": "Class ForeignKeySchema The schema of the foreign key of the database table. Inheritance System.Object ForeignKeySchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ForeignKeySchema Constructors ForeignKeySchema(String, String, IEnumerable<String>, String, IEnumerable<String>) Creates a definition of foreign key with the name . Columns primaryKeyTableColumns in parent table primaryKeyTableName are referenced in columns foreignKeyTableColumns of child table foreignKeyTableName . Declaration public ForeignKeySchema(string name, string primaryKeyTableName, IEnumerable<string> primaryKeyTableColumns, string foreignKeyTableName, IEnumerable<string> foreignKeyTableColumns) Parameters Type Name Description System.String name Name of the foreign key. System.String primaryKeyTableName . System.Collections.Generic.IEnumerable < System.String > primaryKeyTableColumns List of columns in parent table. System.String foreignKeyTableName . System.Collections.Generic.IEnumerable < System.String > foreignKeyTableColumns List of columns in child table. Exceptions Type Condition System.ArgumentNullException Value of any argument is null . System.ArgumentException ForeignKeySchema(String, String, String, String, String) Creates a definition of foreign key with the name . Column primaryKeyTableColumn in parent table primaryKeyTableName is referenced in column foreignKeyTableColumn of child table foreignKeyTableName . Declaration public ForeignKeySchema(string name, string primaryKeyTableName, string primaryKeyTableColumn, string foreignKeyTableName, string foreignKeyTableColumn) Parameters Type Name Description System.String name Name of the foreign key. System.String primaryKeyTableName . System.String primaryKeyTableColumn Column name in primary key table. System.String foreignKeyTableName . System.String foreignKeyTableColumn Column name in foreign key table. Exceptions Type Condition System.ArgumentNullException Value of any parameter is null . System.ArgumentException Value of any parameter is empty string, or string containing only whitespace characters. Properties DeleteRule The rule, what to do when record in parent table is deleted. Declaration public ForeignKeyRule DeleteRule { get; set; } Property Value Type Description ForeignKeyRule ForeignKeyTableColumns List of columns in child table. Declaration public ReadOnlyCollection<string> ForeignKeyTableColumns { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.String > ForeignKeyTableName Name of the child table. Declaration public string ForeignKeyTableName { get; } Property Value Type Description System.String Name Name of the foreign key. Declaration public string Name { get; } Property Value Type Description System.String PrimaryKeyTableColumns List of columns in primary key table. Declaration public ReadOnlyCollection<string> PrimaryKeyTableColumns { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.String > PrimaryKeyTableName Name of the table, where the primary key is. Declaration public string PrimaryKeyTableName { get; } Property Value Type Description System.String Table Table to which this foreign key belongs. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema UpdateRule The rule, what to do when record in parent table is updated. Declaration public ForeignKeyRule UpdateRule { get; set; } Property Value Type Description ForeignKeyRule Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnSetColumnsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnSetColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ColumnSetColumnsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ColumnSetColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ColumnSetColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ColumnSetColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCataloG Declaration public const string CharacterSetCataloG = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsColumnSet Declaration public const string IsColumnSet = \"IS_COLUMN_SET\" Field Value Type Description System.String IsFilestream Declaration public const string IsFilestream = \"IS_FILESTREAM\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String IsSparse Declaration public const string IsSparse = \"IS_SPARSE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecisionRadix Declaration public const string NumericPrecisionRadix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ViewsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ViewsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ViewsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ViewsSchemaNames Fields CheckOption Declaration public const string CheckOption = \"CHECK_OPTION\" Field Value Type Description System.String IsUpdatable Declaration public const string IsUpdatable = \"IS_UPDATABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexType.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexType.html",
    "title": "Enum IndexType | Kros.Libs",
    "keywords": "Enum IndexType Table index type. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum IndexType Fields Name Description Index General index. PrimaryKey Primary key. UniqueKey Unique index."
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlServerVersions.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlServerVersions.html",
    "title": "Class SqlServerVersions | Kros.Libs",
    "keywords": "Class SqlServerVersions SQL Server versions. Version numbers are taken from this document: https://support.microsoft.com/en-us/help/321185/how-to-determine-the-version-edition-and-update-level-of-sql-server-an . Inheritance System.Object SqlServerVersions Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public static class SqlServerVersions Fields Server2005 SQL Server 2005, version 9.00.1399.0. Declaration public static readonly Version Server2005 Field Value Type Description System.Version Server2005SP1 SQL Server 2005 SP1, version 9.00.2047.0. Declaration public static readonly Version Server2005SP1 Field Value Type Description System.Version Server2005SP2 SQL Server 2005 SP2, version 9.00.3042.0. Declaration public static readonly Version Server2005SP2 Field Value Type Description System.Version Server2005SP3 SQL Server 2005 SP3, version 9.00.4035.0. Declaration public static readonly Version Server2005SP3 Field Value Type Description System.Version Server2005SP4 SQL Server 2005 SP4, version 9.00.5000.0. Declaration public static readonly Version Server2005SP4 Field Value Type Description System.Version Server2008 SQL Server 2008, version 10.00.1600.22. Declaration public static readonly Version Server2008 Field Value Type Description System.Version Server2008R2 SQL Server 2008 R2, version 10.50.1600.1. Declaration public static readonly Version Server2008R2 Field Value Type Description System.Version Server2008R2SP1 SQL Server 2008 R2 SP1, version 10.50.2500.0. Declaration public static readonly Version Server2008R2SP1 Field Value Type Description System.Version Server2008R2SP2 SQL Server 2008 R2 SP2, version 10.50.4000.0. Declaration public static readonly Version Server2008R2SP2 Field Value Type Description System.Version Server2008R2SP3 SQL Server 2008 R2 SP3, version 10.50.6000.34. Declaration public static readonly Version Server2008R2SP3 Field Value Type Description System.Version Server2008SP1 SQL Server 2008 SP1, version 10.00.2531.00. Declaration public static readonly Version Server2008SP1 Field Value Type Description System.Version Server2008SP2 SQL Server 2008 SP2, version 10.00.4000.00. Declaration public static readonly Version Server2008SP2 Field Value Type Description System.Version Server2008SP3 SQL Server 2008 SP3, version 10.00.5500.00. Declaration public static readonly Version Server2008SP3 Field Value Type Description System.Version Server2012 SQL Server 2012, version 11.0.2100.60. Declaration public static readonly Version Server2012 Field Value Type Description System.Version Server2012SP1 SQL Server 2012 SP1, version 11.0.3000.00. Declaration public static readonly Version Server2012SP1 Field Value Type Description System.Version Server2012SP2 SQL Server 2012 SP2, version 11.0.5058.0. Declaration public static readonly Version Server2012SP2 Field Value Type Description System.Version Server2012SP3 SQL Server 2012 SP3, version 11.0.6020.0. Declaration public static readonly Version Server2012SP3 Field Value Type Description System.Version Server2012SP4 SQL Server 2012 SP4, version 11.0.7001.0. Declaration public static readonly Version Server2012SP4 Field Value Type Description System.Version Server2014 SQL Server 2014, version 12.0.2000.8. Declaration public static readonly Version Server2014 Field Value Type Description System.Version Server2014SP1 SQL Server 2014 SP1, version 12.0.4100.1. Declaration public static readonly Version Server2014SP1 Field Value Type Description System.Version Server2014SP2 SQL Server 2014 SP2, version 12.0.5000.0. Declaration public static readonly Version Server2014SP2 Field Value Type Description System.Version Server2016 SQL Server 2016, version 13.0.2149.0. Declaration public static readonly Version Server2016 Field Value Type Description System.Version Server2016SP1 SQL Server 2016 SP1, version 13.0.4001.0. Declaration public static readonly Version Server2016SP1 Field Value Type Description System.Version Server2016SP2 SQL Server 2016 SP2, version 13.0.5026.0. Declaration public static readonly Version Server2016SP2 Field Value Type Description System.Version Server2017 SQL Server 2017, version 14.0.3006.16. Declaration public static readonly Version Server2017 Field Value Type Description System.Version"
  },
  "api/Kros.Utils/Kros.Data.Schema.DefaultValueParsers.ParseDefaultValueFunction.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DefaultValueParsers.ParseDefaultValueFunction.html",
    "title": "Delegate DefaultValueParsers.ParseDefaultValueFunction | Kros.Libs",
    "keywords": "Delegate DefaultValueParsers.ParseDefaultValueFunction Delegate for function which parses default value. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public delegate object ParseDefaultValueFunction(string defaultValue); Parameters Type Name Description System.String defaultValue Column's default value as string. Returns Type Description System.Object Returns value converted to desired data type, or null if conversion failed."
  },
  "api/Kros.Utils/Kros.Data.Schema.DefaultValueParsers.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DefaultValueParsers.html",
    "title": "Class DefaultValueParsers | Kros.Libs",
    "keywords": "Class DefaultValueParsers Standard parsers for columns' default values. The default values in database are stored as string and it is necessary to convert them to the specific column's type. If conversion to desired type fails, the returned value is always null . Inheritance System.Object DefaultValueParsers Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public static class DefaultValueParsers Methods ParseBool(String) Declaration public static object ParseBool(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseByte(String) Declaration public static object ParseByte(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDate(String) Declaration public static object ParseDate(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDateSql(String) Declaration public static object ParseDateSql(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDecimal(String) Declaration public static object ParseDecimal(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDouble(String) Declaration public static object ParseDouble(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseGuid(String) Declaration public static object ParseGuid(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt16(String) Declaration public static object ParseInt16(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt32(String) Declaration public static object ParseInt32(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt64(String) Declaration public static object ParseInt64(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseSByte(String) Declaration public static object ParseSByte(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseSingle(String) Declaration public static object ParseSingle(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt16(String) Declaration public static object ParseUInt16(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt32(String) Declaration public static object ParseUInt32(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt64(String) Declaration public static object ParseUInt64(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProceduresSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProceduresSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ProceduresSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ProceduresSchemaNames Inheritance System.Object SqlServerSchemaLoader.ProceduresSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ProceduresSchemaNames Fields Created Declaration public const string Created = \"CREATED\" Field Value Type Description System.String LastAltered Declaration public const string LastAltered = \"LAST_ALTERED\" Field Value Type Description System.String RoutineCatalog Declaration public const string RoutineCatalog = \"ROUTINE_CATALOG\" Field Value Type Description System.String RoutineName Declaration public const string RoutineName = \"ROUTINE_NAME\" Field Value Type Description System.String RoutineSchema Declaration public const string RoutineSchema = \"ROUTINE_SCHEMA\" Field Value Type Description System.String RoutineType Declaration public const string RoutineType = \"ROUTINE_TYPE\" Field Value Type Description System.String SpecificCatalog Declaration public const string SpecificCatalog = \"SPECIFIC_CATALOG\" Field Value Type Description System.String SpecificName Declaration public const string SpecificName = \"SPECIFIC_NAME\" Field Value Type Description System.String SpecificSchema Declaration public const string SpecificSchema = \"SPECIFIC_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.IO.PathFormatter.html": {
    "href": "api/Kros.Utils/Kros.IO.PathFormatter.html",
    "title": "Class PathFormatter | Kros.Libs",
    "keywords": "Class PathFormatter Helper for formatting file paths. It takes care of maximum path length and of creating the path, which does not yet exists on disk. Inheritance System.Object PathFormatter Namespace : Kros.IO Assembly : Kros.Utils.dll Syntax public class PathFormatter Remarks The class is useful for example in exports, when there are multiple files generated by export. The user of the application sets just output folder and file names are generated automatically based on exported data. The class ensures, that the generated paths are valid (do not contain invalid characters) and that they are not too long. It also checks the existence of files. If there already exists a file, counter is added to generated path. It is even possible to add own string as an additional information to generated paths. Static property Default is created for simple direct use of PathFormatter . Properties CounterClosingString Closing string for counter, which is inserted into file/folder name. The counter is enclosed between CounterOpeningString and CounterClosingString . Default value is right parenthesis ) . Declaration public string CounterClosingString { get; set; } Property Value Type Description System.String Remarks When set, invalid path characters in the value are replaced using ReplaceInvalidPathChars(String) . CounterOpeningString Opening string for counter, which is inserted into file/folder name. The counter is enclosed between CounterOpeningString and CounterClosingString . Default value is left parenthesis ( . Declaration public string CounterOpeningString { get; set; } Property Value Type Description System.String Remarks When set, invalid path characters in the value are replaced using ReplaceInvalidPathChars(String) . Default Default instance for simpler direct use. Declaration public static PathFormatter Default { get; } Property Value Type Description PathFormatter InfoClosingString Closing string for additional information, which is inserted into file/folder name. Additional information is enclosed between InfoOpeningString and InfoClosingString . Default value is right parenthesis ) . Declaration public string InfoClosingString { get; set; } Property Value Type Description System.String Remarks When set, invalid path characters in the value are replaced using ReplaceInvalidPathChars(String) . InfoOpeningString Opening string for additional information, which is inserted into file/folder name. Additional information is enclosed between InfoOpeningString and InfoClosingString . Default value is left parenthesis ( . Declaration public string InfoOpeningString { get; set; } Property Value Type Description System.String Remarks When set, invalid path characters in the value are replaced using ReplaceInvalidPathChars(String) . MaxPathLength Maximum path length. Intended for internal use. Declaration protected int MaxPathLength { get; set; } Property Value Type Description System.Int32 Methods FileExists(String) Checks if file filePath exists. Method is intended for internal use. Declaration public virtual bool FileExists(string filePath) Parameters Type Name Description System.String filePath Path to file. Returns Type Description System.Boolean true if file exists, false otherwise. FolderExists(String) Checks if folder folderPath exists. Method is intended for internal use. Declaration public virtual bool FolderExists(string folderPath) Parameters Type Name Description System.String folderPath Path to folder. Returns Type Description System.Boolean true if folder exists, false otherwise. FormatDateForPath(DateTime) Formats date for use in file/folder names. Default format is yyyy_MM_dd . Declaration protected virtual string FormatDateForPath(DateTime value) Parameters Type Name Description System.DateTime value Date to format. Returns Type Description System.String Remarks Minimum ( System.DateTime.MinValue ) and maximum ( System.DateTime.MaxValue ) values are not formatted, but empty string is returned. FormatNewPath(String, String) Formats folder folder and file name fileName to the resulting path and ensures, that the file does not exist. The counter is added to file name if the path exists. Declaration public string FormatNewPath(string folder, string fileName) Parameters Type Name Description System.String folder Folder path. System.String fileName File name. Returns Type Description System.String Remarks If file already exists at generated path, such counter is added to the file name ( (1) , (2) ...), to make the path to non-existing file. If resulting path is too long, file name is shortened to make it valid. Shortened is original fileName - if counter was added, it is preserved. FormatNewPath(String, String, String) Formats folder folder and file name fileName to the resulting path. Additional info info is added to the file name and it is ensured, that the file does not exist. The counter is added to file name if the path exists. Declaration public string FormatNewPath(string folder, string fileName, string info) Parameters Type Name Description System.String folder Folder path. System.String fileName File name. System.String info Additional info added to the file name. Returns Type Description System.String Remarks Additional info info is added to the file name enclosed between InfoOpeningString and InfoClosingString . So if fileName is exported.xml and info is Lorem ipsum , resulting file name is exported (Lorem ipsum).xml . If file already exists at generated path, such counter is added to the file name ( (1) , (2) ...), to make the path to non-existing false , so final file name may be exported (Lorem ipsum) (1).xml . If resulting path is too long, the file name is shortened to make the path correct. Shortened is the original fileName , additional info info and possible counter are preserved. FormatPath(String, String) Formats folder folder and file name fileName to the resulting path. It does not check if the file already exist. Declaration public string FormatPath(string folder, string fileName) Parameters Type Name Description System.String folder Folder path. System.String fileName File name. Returns Type Description System.String Remarks If resulting path is too long, the file name is shortened to make the path correct. FormatPath(String, String, String) Formats folder folder and file name fileName to the resulting path. Additional info info is added to the file name. It does not check if the file already exist. Declaration public string FormatPath(string folder, string fileName, string info) Parameters Type Name Description System.String folder Folder path. System.String fileName File name. System.String info Additional info added to the file name. Returns Type Description System.String Remarks Additional info info is added to the file name enclosed between InfoOpeningString and InfoClosingString . So if fileName is exported.xml and info is Lorem ipsum , resulting file name is exported (Lorem ipsum).xml . If resulting path is too long, the file name is shortened to make the path correct. Shortened is the original fileName , additional info info is preserved. FormatPaths<TKey>(String, String, Dictionary<TKey, String>) Creates a list of paths to files. The paths are created with base folder baseFolder , base file name baseFileName and additional information for individual files fileInfos . Declaration public Dictionary<TKey, string> FormatPaths<TKey>(string baseFolder, string baseFileName, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Base folder for generated file paths. System.String baseFileName Base file name. All paths are created with this file name with additional info added. System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Additional informations added to individual file names. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Dictionary with the same keys as int fileInfos , where for each key a file path is generated. Type Parameters Name Description TKey Type of the key in additional info dictionary fileInfos . The same keys are in the returned dictionary with generated file paths. Remarks For every key and value in fileInfos si generated a file path in resultng dictionary. File paths are created using FormatPath(String, String, String) , meaning that file name is created as baseFileName with additional information added from fileInfos and joined with baseFolder . If needed, resulting paths are shortened to be valid. All of the resulting paths are shortened the same way and in such a way that the longest of them must be valid. Base file name baseFileName is shortened, additional informations are preserved. Resulting paths are checked if they already exists, and if so, a counter is added to the filename. So returned generated paths do not exist on file system (at least at the time of their generation). Examples If baseFolder is C:\\lorem\\ipsum , baseFileName is filename.xml and values in fileInfos are: key additional file name info 1 some info 1 2 some info 2 3 some info 3 Created list of paths is: key path 1 C:\\lorem\\ipsum\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename (some info 3).xml FormatPathsInSubfolder<TKey>(String, String, Dictionary<TKey, String>) Creates a list of paths to files. The paths are created with base folder baseFolder , to which a subfolder is added with the same name as value of baseFileName without extension. File names are created as value of baseFileName and additional information from fileInfos . Declaration public Dictionary<TKey, string> FormatPathsInSubfolder<TKey>(string baseFolder, string baseFileName, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Base folder for generated file paths. Another subfolder is added with the same name as the file name baseFileName without theextension. System.String baseFileName Base file name. All paths are created with this file name with additional info added. At the same time this value (without the extension) is used as a subfolder name in baseFolder . System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Additional informations added to individual file names. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Dictionary with the same keys as int fileInfos , where for each key a file path is generated. Type Parameters Name Description TKey Type of the key in additional info dictionary fileInfos . The same keys are in the returned dictionary with generated file paths. Remarks For every key and value in fileInfos si generated a file path in resultng dictionary. At first, base path baseFolder is extended with subfolder with name as file name in baseFileName (without extension). File paths are then created using FormatPath(String, String, String) , meaning that file name is created as baseFileName with additional information added from fileInfos . If needed, resulting paths are shortened to be valid. All of the resulting paths are shortened the same way and in such a way that the longest of them must be valid. The value of base file name baseFileName is shortened before it is added as a subfolder to baseFolder . So when shortening occurs, the subfolder and file names are shortened. Additional informations are preserved. Resulting paths are checked if they already exists, and if so, a counter is added to the filename. So returned generated paths do not exist on file system (at least at the time of their generation). Examples If baseFolder is C:\\lorem\\ipsum , baseFileName is filename.xml and values in fileInfos are: key additional file name info 1 some info 1 2 some info 2 3 some info 3 Created list of paths is: key path 1 C:\\lorem\\ipsum\\filename\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename\\filename (some info 3).xml FormatPathsInSubfolder<TKey>(String, String, String, Dictionary<TKey, String>) Creates a list of paths to files. The paths are created with base folder baseFolder , to which a subfolder is added. Subfolder name is the same name as value of baseFileName without extension and subfolderInfo is added to it. File names are created as value of baseFileName and additional information from fileInfos . Declaration public Dictionary<TKey, string> FormatPathsInSubfolder<TKey>(string baseFolder, string baseFileName, string subfolderInfo, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Base folder for generated file paths. Another subfolder is added with the same name as the file name baseFileName without theextension. System.String baseFileName Base file name. All paths are created with this file name with additional info added. At the same time this value (without the extension) is used as a subfolder name in baseFolder . System.String subfolderInfo Additional info added to subfolder name. System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Additional informations added to individual file names. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Dictionary with the same keys as in fileInfos , where for each key a file path is generated. Type Parameters Name Description TKey Type of the key in additional info dictionary fileInfos . The same keys are in the returned dictionary with generated file paths. Remarks For every key and value in fileInfos si generated a file path in resultng dictionary. At first, base path baseFolder is extended with subfolder with name as file name in baseFileName (without extension) and subfolderInfo . File paths are then created using FormatPath(String, String, String) , meaning that file name is created as baseFileName with additional information added from fileInfos . If needed, resulting paths are shortened to be valid. All of the resulting paths are shortened the same way and in such a way that the longest of them must be valid. The value of base file name baseFileName is shortened before it is added as a subfolder to baseFolder . So when shortening occurs, the subfolder and file names are shortened. Additional informations fileInfos and subfolderInfo are preserved. Resulting paths are checked if they already exists, and if so, a counter is added to the filename. So returned generated paths do not exist on file system (at least at the time of their generation). Examples If baseFolder is C:\\lorem\\ipsum , baseFileName is filename.xml , subfolderInfo is subfolder info and values in fileInfos are: key additional file name info 1 some info 1 2 some info 2 3 some info 3 Created list of paths is: key path 1 C:\\lorem\\ipsum\\filename (subfolder info)\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename (subfolder info)\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename (subfolder info)\\filename (some info 3).xml FormatSeasonForPath(DateTime, DateTime) Formats season from - to for use in file/folder names. Declaration public virtual string FormatSeasonForPath(DateTime from, DateTime to) Parameters Type Name Description System.DateTime from Start of the season. System.DateTime to End of the season. Returns Type Description System.String Remarks If any value is minimum or maximum date ( System.DateTime.MinValue , System.DateTime.MaxValue ), the value is not used. For the formatting itself is used the method FormatDateForPath(DateTime) ."
  },
  "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaLoader.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaLoader.html",
    "title": "Interface IDatabaseSchemaLoader | Kros.Libs",
    "keywords": "Interface IDatabaseSchemaLoader Interface for loading database schema. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaLoader Methods LoadSchema(Object) Loads whole database schema in connection . Declaration DatabaseSchema LoadSchema(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description DatabaseSchema Schema of whole database. LoadTableSchema(Object, String) Loads schema of table tableName from database connection . Declaration TableSchema LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Database connection. System.String tableName Name of the table to load schema. Returns Type Description TableSchema Table schema or null , if specified table does not exist. SupportsConnectionType(Object) Checks, if specific loader can load schema from connection . Declaration bool SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description System.Boolean true if loader can load schema, false otherwise."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ForeignKeysSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ForeignKeysSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ForeignKeysSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ForeignKeysSchemaNames Inheritance System.Object SqlServerSchemaLoader.ForeignKeysSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ForeignKeysSchemaNames Fields ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String ConstraintType Declaration public const string ConstraintType = \"CONSTRAINT_TYPE\" Field Value Type Description System.String InitiallyDeferred Declaration public const string InitiallyDeferred = \"INITIALLY_DEFERRED\" Field Value Type Description System.String IsDeferrable Declaration public const string IsDeferrable = \"IS_DEFERRABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.ColumnSchema.DefaultValues.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ColumnSchema.DefaultValues.html",
    "title": "Class ColumnSchema.DefaultValues | Kros.Libs",
    "keywords": "Class ColumnSchema.DefaultValues Columns' default values for individual data types. Inheritance System.Object ColumnSchema.DefaultValues Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public static class DefaultValues Fields Boolean Declaration public const bool Boolean = false Field Value Type Description System.Boolean Byte Declaration public const byte Byte = 0 Field Value Type Description System.Byte Date Declaration public static readonly DateTime Date Field Value Type Description System.DateTime DateTime Declaration public static readonly DateTime DateTime Field Value Type Description System.DateTime Decimal Declaration public const decimal Decimal = 0M Field Value Type Description System.Decimal Double Declaration public const double Double = 0 Field Value Type Description System.Double Guid Declaration public static readonly Guid Guid Field Value Type Description System.Guid Int16 Declaration public const short Int16 = 0 Field Value Type Description System.Int16 Int32 Declaration public const int Int32 = 0 Field Value Type Description System.Int32 Int64 Declaration public const long Int64 = 0L Field Value Type Description System.Int64 Null Declaration public static readonly DBNull Null Field Value Type Description System.DBNull SByte Declaration public const sbyte SByte = 0 Field Value Type Description System.SByte Single Declaration public const float Single = 0F Field Value Type Description System.Single Text Declaration public const string Text = \"\" Field Value Type Description System.String Time Declaration public static readonly DateTime Time Field Value Type Description System.DateTime UInt16 Declaration public const ushort UInt16 = 0 Field Value Type Description System.UInt16 UInt32 Declaration public const uint UInt32 = 0U Field Value Type Description System.UInt32 UInt64 Declaration public const ulong UInt64 = 0UL Field Value Type Description System.UInt64"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.SchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.SchemaNames.html",
    "title": "Class SqlServerSchemaLoader.SchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.SchemaNames Inheritance System.Object SqlServerSchemaLoader.SchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class SchemaNames Fields AllColumns Declaration public const string AllColumns = \"AllColumns\" Field Value Type Description System.String Columns Declaration public const string Columns = \"Columns\" Field Value Type Description System.String ColumnSetColumns Declaration public const string ColumnSetColumns = \"ColumnSetColumns\" Field Value Type Description System.String Databases Declaration public const string Databases = \"Databases\" Field Value Type Description System.String DataSourceInformation Declaration public const string DataSourceInformation = \"DataSourceInformation\" Field Value Type Description System.String DataTypes Declaration public const string DataTypes = \"DataTypes\" Field Value Type Description System.String ForeignKeys Declaration public const string ForeignKeys = \"ForeignKeys\" Field Value Type Description System.String IndexColumns Declaration public const string IndexColumns = \"IndexColumns\" Field Value Type Description System.String Indexes Declaration public const string Indexes = \"Indexes\" Field Value Type Description System.String MetaDataCollections Declaration public const string MetaDataCollections = \"MetaDataCollections\" Field Value Type Description System.String ProcedureParameters Declaration public const string ProcedureParameters = \"ProcedureParameters\" Field Value Type Description System.String Procedures Declaration public const string Procedures = \"Procedures\" Field Value Type Description System.String ReservedWords Declaration public const string ReservedWords = \"ReservedWords\" Field Value Type Description System.String Restrictions Declaration public const string Restrictions = \"Restrictions\" Field Value Type Description System.String StructuredTypeMembers Declaration public const string StructuredTypeMembers = \"StructuredTypeMembers\" Field Value Type Description System.String Tables Declaration public const string Tables = \"Tables\" Field Value Type Description System.String UserDefinedTypes Declaration public const string UserDefinedTypes = \"UserDefinedTypes\" Field Value Type Description System.String Users Declaration public const string Users = \"Users\" Field Value Type Description System.String ViewColumns Declaration public const string ViewColumns = \"ViewColumns\" Field Value Type Description System.String Views Declaration public const string Views = \"Views\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlServerErrorCode.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlServerErrorCode.html",
    "title": "Enum SqlServerErrorCode | Kros.Libs",
    "keywords": "Enum SqlServerErrorCode Some of the error codes for Microsoft SQL Server. Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public enum SqlServerErrorCode Remarks Error code is in exception System.Data.SqlClient.SqlException , in the System.Data.SqlClient.SqlException.Number property. List of all error codes is at https://msdn.microsoft.com/en-us/library/cc645603.aspx . Fields Name Description CannotInsertDuplicateKeyRow Cannot insert duplicate key row in object 'objectName' with unique index 'indexName'. ConstraintViolation The ... statement conflicted with the ... constraint. The conflict occurred in database ..., table .... DatabaseAlreadyExists Database 'name' already exists. Choose a different database name. DuplicateKeyViolation Violation of ... constraint 'constraintName'. Cannot insert duplicate key in object 'objectName'. InvalidColumnName Invalid column name 'name'. InvalidObjectName Invalid object name 'name'. ServerNotAccessible A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: Named Pipes Provider, error: 40 - Could not open a connection to SQL Server) TheDatabaseCouldNotBeExclusivelyLocked The database could not be exclusively locked to perform the operation. Unknown Unknown error code."
  },
  "api/Kros.Utils.MsAccess/Kros.Utils.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Utils.MsAccess.html",
    "title": "Namespace Kros.Utils.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.Utils.MsAccess Classes LibraryInitializer Initialization of the library."
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexColumnSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexColumnSchema.html",
    "title": "Class IndexColumnSchema | Kros.Libs",
    "keywords": "Class IndexColumnSchema Schema of a column of an index. Inheritance System.Object IndexColumnSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexColumnSchema Constructors IndexColumnSchema(String) Creates an instance of an index column with name . Column sort Order is Ascending . Declaration public IndexColumnSchema(string name) Parameters Type Name Description System.String name Index column name. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. IndexColumnSchema(String, SortOrder) Creates an instance of an index column with name and sort order . Declaration public IndexColumnSchema(string name, SortOrder order) Parameters Type Name Description System.String name Index column name. SortOrder order Index column sort order. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. Properties Index Index, to which column belongs. Declaration public IndexSchema Index { get; } Property Value Type Description IndexSchema Name Column name. Declaration public string Name { get; } Property Value Type Description System.String Order Sort order of the column. Declaration public SortOrder Order { get; set; } Property Value Type Description SortOrder"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexesSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.IndexesSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.IndexesSchemaNames Inheritance System.Object SqlServerSchemaLoader.IndexesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class IndexesSchemaNames Fields ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TypeDesc Declaration public const string TypeDesc = \"TYPE_DESC\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Net.html": {
    "href": "api/Kros.Utils/Kros.Net.html",
    "title": "Namespace Kros.Net | Kros.Libs",
    "keywords": "Namespace Kros.Net Classes NetworkChecker Class dedicated for simple testing of internet connectivity."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.SchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.SchemaNames.html",
    "title": "Class MsAccessSchemaLoader.SchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.SchemaNames Inheritance System.Object MsAccessSchemaLoader.SchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class SchemaNames Fields Columns Declaration public const string Columns = \"Columns\" Field Value Type Description System.String DataSourceInformation Declaration public const string DataSourceInformation = \"DataSourceInformation\" Field Value Type Description System.String DataTypes Declaration public const string DataTypes = \"DataTypes\" Field Value Type Description System.String Indexes Declaration public const string Indexes = \"Indexes\" Field Value Type Description System.String MetaDataCollections Declaration public const string MetaDataCollections = \"MetaDataCollections\" Field Value Type Description System.String Procedures Declaration public const string Procedures = \"Procedures\" Field Value Type Description System.String ReservedWords Declaration public const string ReservedWords = \"ReservedWords\" Field Value Type Description System.String Restrictions Declaration public const string Restrictions = \"Restrictions\" Field Value Type Description System.String Tables Declaration public const string Tables = \"Tables\" Field Value Type Description System.String Views Declaration public const string Views = \"Views\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexColumnsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.IndexColumnsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.IndexColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.IndexColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class IndexColumnsSchemaNames Fields ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String KeyType Declaration public const string KeyType = \"KEYTYPE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Caching.ICache-2.html": {
    "href": "api/Kros.Utils/Kros.Caching.ICache-2.html",
    "title": "Interface ICache<TKey, TValue> | Kros.Libs",
    "keywords": "Interface ICache<TKey, TValue> Interface, which describe class for caching data. Namespace : Kros.Caching Assembly : Kros.Utils.dll Syntax public interface ICache<TKey, TValue> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Properties Count Gets the count of cached data. Declaration int Count { get; } Property Value Type Description System.Int32 Methods Clear() Clears the cache. Declaration void Clear() Get(TKey, Func<TValue>) Gets the cached value by key. Declaration TValue Get(TKey key, Func<TValue> factory) Parameters Type Name Description TKey key The key. System.Func <TValue> factory The factory for creating value, if doesn't exist in cahce. Returns Type Description TValue Value from Cache. Remarks If value key doesn't exist in cache, then factory is use for creating value and value is set to cache."
  },
  "api/Kros.Utils/Kros.IO.PathHelper.html": {
    "href": "api/Kros.Utils/Kros.IO.PathHelper.html",
    "title": "Class PathHelper | Kros.Libs",
    "keywords": "Class PathHelper Helpers for working with file/folder paths. Inheritance System.Object PathHelper Namespace : Kros.IO Assembly : Kros.Utils.dll Syntax public static class PathHelper Methods BuildPath(String[]) Joins parts parts to one string, representing path to a file/folder. Declaration public static string BuildPath(params string[] parts) Parameters Type Name Description System.String [] parts Path parts. Returns Type Description System.String Created path. Remarks The method works similarly as standard .NET method System.IO.Path.Combine(System.String[]) , with some different details: Exceptions Type Condition System.ArgumentNullException The value of parts or any of its item is null . System.ArgumentException Any of the item in parts contains invalid characters defined in System.IO.Path.GetInvalidPathChars . GetTempPath() Returns path to system temporary folder ( System.IO.Path.GetTempPath ) without trailing directory separator. Declaration public static string GetTempPath() Returns Type Description System.String IsNetworkPath(String) Checks, if specified path is network share path. The path is considered network share path, if it begins with \\ . Declaration public static bool IsNetworkPath(string path) Parameters Type Name Description System.String path Checked path. Returns Type Description System.Boolean true if path is network share path, false otherwise. ReplaceInvalidPathChars(String) Replaces invalid characters in pathName with dash ( - ). If there are several succesive invalid characters, they all are replaced only by one dash. Declaration public static string ReplaceInvalidPathChars(string pathName) Parameters Type Name Description System.String pathName Input path. Returns Type Description System.String Remarks ReplaceInvalidPathChars(String, String) Replaces invalid characters in pathName with replacement . If there are several succesive invalid characters, they all are replaced only by one replacement . Declaration public static string ReplaceInvalidPathChars(string pathName, string replacement) Parameters Type Name Description System.String pathName Input path. System.String replacement Value, by which are replaced invalid path charactes. If the value is null , empty stirng is used, so invalid characters are removed. Returns Type Description System.String String with invalid path characters replaced. If input pathName is null , empty string is returned. Remarks Replaced are all characters in System.IO.Path.GetInvalidFileNameChars and System.IO.Path.GetInvalidPathChars ."
  },
  "api/Kros.Utils/Kros.IO.html": {
    "href": "api/Kros.Utils/Kros.IO.html",
    "title": "Namespace Kros.IO | Kros.Libs",
    "keywords": "Namespace Kros.IO Classes PathFormatter Helper for formatting file paths. It takes care of maximum path length and of creating the path, which does not yet exists on disk. PathHelper Helpers for working with file/folder paths."
  },
  "api/Kros.Utils/Kros.Extensions.html": {
    "href": "api/Kros.Utils/Kros.Extensions.html",
    "title": "Namespace Kros.Extensions | Kros.Libs",
    "keywords": "Namespace Kros.Extensions Classes DateTimeExtensions Extension methods for date and time System.DateTime . StringExtensions General extension methods for strings ( System.String )."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.BulkInsertColumnType.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.BulkInsertColumnType.html",
    "title": "Enum BulkInsertColumnType | Kros.Libs",
    "keywords": "Enum BulkInsertColumnType Column type for bulk insert into Microsoft Access database from file. Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum BulkInsertColumnType Fields Name Description Text Text column type. Undefined Undefined (default) column type."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ColumnsSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ColumnsSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ColumnsSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.ColumnsSchemaNames Inheritance System.Object MsAccessSchemaLoader.ColumnsSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String CollationName Declaration public const string CollationName = \"COLLATION_NAME\" Field Value Type Description System.String CollationSchema Declaration public const string CollationSchema = \"COLLATION_SCHEMA\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnFlags Declaration public const string ColumnFlags = \"COLUMN_FLAGS\" Field Value Type Description System.String ColumnGuid Declaration public const string ColumnGuid = \"COLUMN_GUID\" Field Value Type Description System.String ColumnHasdefault Declaration public const string ColumnHasdefault = \"COLUMN_HASDEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ColumnPropid Declaration public const string ColumnPropid = \"COLUMN_PROPID\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String DomainCatalog Declaration public const string DomainCatalog = \"DOMAIN_CATALOG\" Field Value Type Description System.String DomainName Declaration public const string DomainName = \"DOMAIN_NAME\" Field Value Type Description System.String DomainSchema Declaration public const string DomainSchema = \"DOMAIN_SCHEMA\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSet_catalog Declaration public const string CharacterSet_catalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSet_name Declaration public const string CharacterSet_name = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSet_schema Declaration public const string CharacterSet_schema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TypeGuid Declaration public const string TypeGuid = \"TYPE_GUID\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlConnectionExtensions.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlConnectionExtensions.html",
    "title": "Class SqlConnectionExtensions | Kros.Libs",
    "keywords": "Class SqlConnectionExtensions Extension methods for System.Data.SqlClient.SqlConnection class. Inheritance System.Object SqlConnectionExtensions Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public static class SqlConnectionExtensions Methods GetVersion(SqlConnection) Returns System.Data.SqlClient.SqlConnection.ServerVersion string as System.Version object. Declaration public static Version GetVersion(this SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Connection from which SQL Server version is returned. Returns Type Description System.Version SQL Server version as System.Version object."
  },
  "api/Kros.Utils/Kros.Extensions.DateTimeExtensions.html": {
    "href": "api/Kros.Utils/Kros.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | Kros.Libs",
    "keywords": "Class DateTimeExtensions Extension methods for date and time System.DateTime . Inheritance System.Object DateTimeExtensions Namespace : Kros.Extensions Assembly : Kros.Utils.dll Syntax public static class DateTimeExtensions Methods FirstDayOfCurrentMonth() Returns first day of current month. Declaration public static DateTime FirstDayOfCurrentMonth() Returns Type Description System.DateTime Date. FirstDayOfMonth(DateTime) Returns date, which is the first day in month and year in input value . Time component is nulled. Declaration public static DateTime FirstDayOfMonth(this DateTime value) Parameters Type Name Description System.DateTime value Date, to which the first day of month is returned. Returns Type Description System.DateTime Date. LastDayOfCurrentMonth() Returns last day of current month. Declaration public static DateTime LastDayOfCurrentMonth() Returns Type Description System.DateTime Date. LastDayOfMonth(DateTime) Returns date, which is the last day in month and year in input value . Time component is nulled. Declaration public static DateTime LastDayOfMonth(this DateTime value) Parameters Type Name Description System.DateTime value Date, to which the last day of month is returned. Returns Type Description System.DateTime Date."
  },
  "api/Kros.Utils/Kros.Extensions.StringExtensions.html": {
    "href": "api/Kros.Utils/Kros.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Kros.Libs",
    "keywords": "Class StringExtensions General extension methods for strings ( System.String ). Inheritance System.Object StringExtensions Namespace : Kros.Extensions Assembly : Kros.Utils.dll Syntax public static class StringExtensions Methods Format(String, IFormatProvider, Object) Declaration public static string Format(this string format, IFormatProvider provider, object arg0) Parameters Type Name Description System.String format System.IFormatProvider provider System.Object arg0 Returns Type Description System.String Format(String, IFormatProvider, Object, Object) Declaration public static string Format(this string format, IFormatProvider provider, object arg0, object arg1) Parameters Type Name Description System.String format System.IFormatProvider provider System.Object arg0 System.Object arg1 Returns Type Description System.String Format(String, IFormatProvider, Object, Object, Object) Declaration public static string Format(this string format, IFormatProvider provider, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format System.IFormatProvider provider System.Object arg0 System.Object arg1 System.Object arg2 Returns Type Description System.String Format(String, IFormatProvider, Object[]) Declaration public static string Format(this string format, IFormatProvider provider, params object[] args) Parameters Type Name Description System.String format System.IFormatProvider provider System.Object [] args Returns Type Description System.String Format(String, Object) Declaration public static string Format(this string format, object arg0) Parameters Type Name Description System.String format System.Object arg0 Returns Type Description System.String Format(String, Object, Object) Declaration public static string Format(this string format, object arg0, object arg1) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 Returns Type Description System.String Format(String, Object, Object, Object) Declaration public static string Format(this string format, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 System.Object arg2 Returns Type Description System.String Format(String, Object[]) Declaration public static string Format(this string format, params object[] args) Parameters Type Name Description System.String format System.Object [] args Returns Type Description System.String IsNullOrEmpty(String) Checks, if string value is null , or empty string ( string.Empty ). Declaration public static bool IsNullOrEmpty(this string value) Parameters Type Name Description System.String value Checked stirng. Returns Type Description System.Boolean true , if value is null or string.Empty , false otherwise. IsNullOrWhiteSpace(String) Checks, if string value is null , empty string ( string.Empty ), or string containig only whitespace characters. Declaration public static bool IsNullOrWhiteSpace(this string value) Parameters Type Name Description System.String value Checked string. Returns Type Description System.Boolean true , if value is null , empty string, or string containing only white characters, false otherwise. Left(String, Int32) Returns first length of characters form input string value . Declaration public static string Left(this string value, int length) Parameters Type Name Description System.String value Input string. System.Int32 length Number of characters at the begining of value which are returned. Returns Type Description System.String Begining of the input string value of length length . If value is null , empty string is returned. If value of length is greater than length of value , the value itself is returned. Exceptions Type Condition System.ArgumentException Value of length is less than 0. RemoveDiacritics(String) Returns the same string without diacritic marks (for example čšá becomes csa ). Declaration public static string RemoveDiacritics(this string value) Parameters Type Name Description System.String value Returns Type Description System.String RemoveNewLines(String) Removes new line characters from string. Removed characters are line feed ( \\n ) and carriage return ( \\r ). Declaration public static string RemoveNewLines(this string value) Parameters Type Name Description System.String value Input string. Returns Type Description System.String String without new line characters, or null if value is null . Right(String, Int32) Returns last length of characters form input string value . Declaration public static string Right(this string value, int length) Parameters Type Name Description System.String value Input string. System.Int32 length Number of characters at the end of value which are returned. Returns Type Description System.String End of the input string value of length length . If value is null , empty string is returned. If value of length is greater than length of value , the value itself is returned. Exceptions Type Condition System.ArgumentException Value of length is less than 0."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TablesSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TablesSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.TablesSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.TablesSchemaNames Inheritance System.Object MsAccessSchemaLoader.TablesSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class TablesSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableGuid Declaration public const string TableGuid = \"TABLE_GUID\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TablePropid Declaration public const string TablePropid = \"TABLE_PROPID\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TableType Declaration public const string TableType = \"TABLE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TableTypes.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TableTypes.html",
    "title": "Class MsAccessSchemaLoader.TableTypes | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.TableTypes Inheritance System.Object MsAccessSchemaLoader.TableTypes Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class TableTypes Fields AccessTable Declaration public const string AccessTable = \"ACCESS TABLE\" Field Value Type Description System.String SystemTable Declaration public const string SystemTable = \"SYSTEM TABLE\" Field Value Type Description System.String Table Declaration public const string Table = \"TABLE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ViewsSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ViewsSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ViewsSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.ViewsSchemaNames Inheritance System.Object MsAccessSchemaLoader.ViewsSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ViewsSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String CheckOption Declaration public const string CheckOption = \"CHECK_OPTION\" Field Value Type Description System.String IsUpdatable Declaration public const string IsUpdatable = \"IS_UPDATABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String ViewDefinition Declaration public const string ViewDefinition = \"VIEW_DEFINITION\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.ProviderType.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.ProviderType.html",
    "title": "Enum ProviderType | Kros.Libs",
    "keywords": "Enum ProviderType Type of Microsoft Access provider. Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum ProviderType Fields Name Description Ace ACE provider. Jet JET provider."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessErrorCode.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessErrorCode.html",
    "title": "Enum MsAccessErrorCode | Kros.Libs",
    "keywords": "Enum MsAccessErrorCode Error codes for Microsoft Access database provider. Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum MsAccessErrorCode Remarks The error code is in the exception System.Data.OleDb.OleDbException in the System.Data.OleDb.OleDbError.SQLState property. The list of all error codes is at https://msdn.microsoft.com/en-us/library/bb221208(v=office.12).aspx . Fields Name Description CannotFindTableOrQuery The Microsoft Jet database engine cannot find the input table or query 'name'. Make sure it exists and that its name is spelled correctly. CannotOpenDatabaseFileIsInvalid Cannot open database 'name'. It may not be a database that your application recognizes, or the file may be corrupt. CannotOpenDatabaseIsLocked The Microsoft Jet database engine cannot open the file 'name'. It is already opened exclusively by another user, or you need permission to view its data. CouldNotReadRecordIsLocked Could not read the record; currently locked by another user. CouldNotUpdateCurrentlyLocked Could not update; currently locked. CouldNotUseFileAlreadyInUse Could not use <name>; file already in use. DatabaseAlreadyOpenedExclusively You attempted to open a database that is already opened exclusively by user 'userName' on machine 'machineName'. Try again when the database is available. KeyDuplicity The changes you requested to the table were not successful because they would create duplicate values in the index, primary key, or relationship. Change the data in the field or fields that contain duplicate data, remove the index, or redefine the index to permit duplicate entries and try again. RelationshipViolation You cannot add or change a record because a related record is required in table 'name'. Unknown Unknown error."
  },
  "api/Kros.Utils.MsAccess/Kros.Utils.MsAccess.LibraryInitializer.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Utils.MsAccess.LibraryInitializer.html",
    "title": "Class LibraryInitializer | Kros.Libs",
    "keywords": "Class LibraryInitializer Initialization of the library. Inheritance System.Object LibraryInitializer Namespace : Kros.Utils.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class LibraryInitializer Methods InitLibrary() Initializes the library. Method should be called once at a start of a program. Declaration public static void InitLibrary() Remarks The initialization will do:"
  },
  "api/Kros.Utils/Kros.Data.DataExtensions.html": {
    "href": "api/Kros.Utils/Kros.Data.DataExtensions.html",
    "title": "Class DataExtensions | Kros.Libs",
    "keywords": "Class DataExtensions Extensions for various data classes. Inheritance System.Object DataExtensions Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public static class DataExtensions Methods IsOpened(IDbConnection) Checks if database connection is opened. Declaration public static bool IsOpened(this IDbConnection cn) Parameters Type Name Description System.Data.IDbConnection cn Database connection. Returns Type Description System.Boolean true , if database connection is opened, false otherwise. SqlServerErrorCode(SqlException) Returns error code for Microsoft SQL Server. Declaration public static SqlServerErrorCode SqlServerErrorCode(this SqlException ex) Parameters Type Name Description System.Data.SqlClient.SqlException ex Exception of which error code is tested. Returns Type Description SqlServerErrorCode Error code as a value of enumeration SqlServerErrorCode(SqlException) . If error code is not defined in the enum, value Unknown is returned. Remarks Method checks value of System.Data.SqlClient.SqlError.Number property of the first error in the System.Data.SqlClient.SqlException.Errors list."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ColumnsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCatalog Declaration public const string CharacterSetCatalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsColumnSet Declaration public const string IsColumnSet = \"IS_COLUMN_SET\" Field Value Type Description System.String IsFilestream Declaration public const string IsFilestream = \"IS_FILESTREAM\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String IsSparse Declaration public const string IsSparse = \"IS_SPARSE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecision_radix Declaration public const string NumericPrecision_radix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.DatabasesSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.DatabasesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.DatabasesSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.DatabasesSchemaNames Inheritance System.Object SqlServerSchemaLoader.DatabasesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class DatabasesSchemaNames Fields CreateDate Declaration public const string CreateDate = \"CREATE_DATE\" Field Value Type Description System.String DatabaseName Declaration public const string DatabaseName = \"DATABASE_NAME\" Field Value Type Description System.String DbId Declaration public const string DbId = \"DBID\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SortOrder.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SortOrder.html",
    "title": "Enum SortOrder | Kros.Libs",
    "keywords": "Enum SortOrder Sort order of an index column. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum SortOrder Fields Name Description Ascending Ascending order. Descending Descending order."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.TablesSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.TablesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.TablesSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.TablesSchemaNames Inheritance System.Object SqlServerSchemaLoader.TablesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class TablesSchemaNames Fields TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TableType Declaration public const string TableType = \"TABLE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UserDefinedTypesSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UserDefinedTypesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.UserDefinedTypesSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.UserDefinedTypesSchemaNames Inheritance System.Object SqlServerSchemaLoader.UserDefinedTypesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class UserDefinedTypesSchemaNames Fields AssemblyName Declaration public const string AssemblyName = \"ASSEMBLY_NAME\" Field Value Type Description System.String CreateDate Declaration public const string CreateDate = \"CREATE_DATE\" Field Value Type Description System.String CultureInfo Declaration public const string CultureInfo = \"CULTURE_INFO\" Field Value Type Description System.String IsFixedLength Declaration public const string IsFixedLength = \"IS_FIXED_LENGTH\" Field Value Type Description System.String MaxLength Declaration public const string MaxLength = \"MAX_LENGTH\" Field Value Type Description System.String PermissionSetDesc Declaration public const string PermissionSetDesc = \"PERMISSION_SET_DESC\" Field Value Type Description System.String PublicKey Declaration public const string PublicKey = \"PUBLIC_KEY\" Field Value Type Description System.String UdtName Declaration public const string UdtName = \"UDT_NAME\" Field Value Type Description System.String VersionBuild Declaration public const string VersionBuild = \"VERSION_BUILD\" Field Value Type Description System.String VersionMajor Declaration public const string VersionMajor = \"VERSION_MAJOR\" Field Value Type Description System.String VersionMinor Declaration public const string VersionMinor = \"VERSION_MINOR\" Field Value Type Description System.String VersionRevision Declaration public const string VersionRevision = \"VERSION_REVISION\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UsersSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UsersSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.UsersSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.UsersSchemaNames Inheritance System.Object SqlServerSchemaLoader.UsersSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class UsersSchemaNames Fields CreateDate Declaration public const string CreateDate = \"CREATEDATE\" Field Value Type Description System.String Name Declaration public const string Name = \"NAME\" Field Value Type Description System.String Uid Declaration public const string Uid = \"UID\" Field Value Type Description System.String UpdateDate Declaration public const string UpdateDate = \"UPDATEDATE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewColumnsSchemaNames.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ViewColumnsSchemaNames | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader.ViewColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ViewColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ViewColumnsSchemaNames Fields ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String ViewCatalog Declaration public const string ViewCatalog = \"VIEW_CATALOG\" Field Value Type Description System.String ViewName Declaration public const string ViewName = \"VIEW_NAME\" Field Value Type Description System.String ViewSchema Declaration public const string ViewSchema = \"VIEW_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.IndexesSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.IndexesSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.IndexesSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.IndexesSchemaNames Inheritance System.Object MsAccessSchemaLoader.IndexesSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class IndexesSchemaNames Fields AutoUpdate Declaration public const string AutoUpdate = \"AUTO_UPDATE\" Field Value Type Description System.String Cardinality Declaration public const string Cardinality = \"CARDINALITY\" Field Value Type Description System.String Clustered Declaration public const string Clustered = \"CLUSTERED\" Field Value Type Description System.String Collation Declaration public const string Collation = \"COLLATION\" Field Value Type Description System.String ColumnGuid Declaration public const string ColumnGuid = \"COLUMN_GUID\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ColumnPropid Declaration public const string ColumnPropid = \"COLUMN_PROPID\" Field Value Type Description System.String FillFactor Declaration public const string FillFactor = \"FILL_FACTOR\" Field Value Type Description System.String FilterCondition Declaration public const string FilterCondition = \"FILTER_CONDITION\" Field Value Type Description System.String IndexCatalog Declaration public const string IndexCatalog = \"INDEX_CATALOG\" Field Value Type Description System.String IndexName Declaration public const string IndexName = \"INDEX_NAME\" Field Value Type Description System.String IndexSchema Declaration public const string IndexSchema = \"INDEX_SCHEMA\" Field Value Type Description System.String InitialSize Declaration public const string InitialSize = \"INITIAL_SIZE\" Field Value Type Description System.String Integrated Declaration public const string Integrated = \"INTEGRATED\" Field Value Type Description System.String NullCollation Declaration public const string NullCollation = \"NULL_COLLATION\" Field Value Type Description System.String Nulls Declaration public const string Nulls = \"NULLS\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String Pages Declaration public const string Pages = \"PAGES\" Field Value Type Description System.String PrimaryKey Declaration public const string PrimaryKey = \"PRIMARY_KEY\" Field Value Type Description System.String SortBookmarks Declaration public const string SortBookmarks = \"SORT_BOOKMARKS\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String Type Declaration public const string Type = \"TYPE\" Field Value Type Description System.String Unique Declaration public const string Unique = \"UNIQUE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ProceduresSchemaNames.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ProceduresSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ProceduresSchemaNames | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader.ProceduresSchemaNames Inheritance System.Object MsAccessSchemaLoader.ProceduresSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ProceduresSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String ProcedureCatalog Declaration public const string ProcedureCatalog = \"PROCEDURE_CATALOG\" Field Value Type Description System.String ProcedureDefinition Declaration public const string ProcedureDefinition = \"PROCEDURE_DEFINITION\" Field Value Type Description System.String ProcedureName Declaration public const string ProcedureName = \"PROCEDURE_NAME\" Field Value Type Description System.String ProcedureSchema Declaration public const string ProcedureSchema = \"PROCEDURE_SCHEMA\" Field Value Type Description System.String ProcedureType Declaration public const string ProcedureType = \"PROCEDURE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.Extensions.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.Extensions.html",
    "title": "Class Extensions | Kros.Libs",
    "keywords": "Class Extensions General extensions for Microsoft Access. Inheritance System.Object Extensions Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class Extensions Methods MsAccessErrorCode(OleDbException) Returns Microsoft Access error code. Declaration public static MsAccessErrorCode MsAccessErrorCode(this OleDbException ex) Parameters Type Name Description System.Data.OleDb.OleDbException ex Exception, whose error code is checked. Returns Type Description MsAccessErrorCode Returns error code as an enumeration MsAccessErrorCode . If the error code is unknown, or not defined, value MsAccessErrorCode is returned. Remarks Method checks the value of System.Data.OleDb.OleDbError.SQLState of the first error in the list System.Data.OleDb.OleDbException.Errors . MsAccessErrorCode(OleDbException, out String) Returns Microsoft Access error code. Declaration public static MsAccessErrorCode MsAccessErrorCode(this OleDbException ex, out string sqlState) Parameters Type Name Description System.Data.OleDb.OleDbException ex Exception, whose error code is checked. System.String sqlState Real value of System.Data.OleDb.OleDbError.SQLState . Returns Type Description MsAccessErrorCode Returns error code as an enumeration MsAccessErrorCode . If the error code is unknown, or not defined, value MsAccessErrorCode is returned. Remarks Method checks the value of System.Data.OleDb.OleDbError.SQLState of the first error in the list System.Data.OleDb.OleDbException.Errors ."
  },
  "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaCache.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaCache.html",
    "title": "Interface IDatabaseSchemaCache | Kros.Libs",
    "keywords": "Interface IDatabaseSchemaCache Interface for classes which loads and caches database schema. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaCache Remarks Loading of a database schema can take some time, so it is good to cache loaded schemas for later use. Methods ClearAllSchemas() Clears the whole cache (removes all cached schemas). Declaration void ClearAllSchemas() ClearSchema(Object) Removes cached schema loaded for connection . Declaration void ClearSchema(object connection) Parameters Type Name Description System.Object connection Database connection. GetSchema(Object) Returns database schema connection . Declaration DatabaseSchema GetSchema(object connection) Parameters Type Name Description System.Object connection database connection. Returns Type Description DatabaseSchema Loaded database schema. RefreshSchema(Object) Loads database schema for connection . The schema is loaded directly from database even when it is already cached. New loaded schema is cached. Declaration DatabaseSchema RefreshSchema(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description DatabaseSchema Loaded database schema."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Kros.Libs | Kros.Libs",
    "keywords": "Welcome to Kros.Libs This is Kros.Utils, Kros.Utils.MsAccess, Kros.KORM and Kros.KORM.MsAccess libraries documentation. View in GitHub | Download Latest Kros.Utils Universal library of various tools to simplify the work of the programmer. It is platform-independent (also applicable to desktop applications and server services) and is independent of third-party libraries. Kros.Utils.MsAccess Kros.Utils library extension for MS Access support. Only applicable in the full .NET framework. Kros.KORM Simple and fast micro-ORM framework for .NET. Kros.KORM.MsAccess Kros.KORM library extension for MS Access support. Only applicable in the full .NET framework."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to Kros.Libs | Kros.Libs",
    "keywords": "Welcome to Kros.Libs This is Kros.Utils, Kros.Utils.MsAccess, Kros.KORM and Kros.KORM.MsAccess libraries documentation. Kros.Utils Universal library of various tools to simplify the work of the programmer. It is platform-independent (also applicable to desktop applications and server services) and is independent of third-party libraries. Kros.Utils.MsAccess Kros.Utils library extension for MS Access support. Only applicable in the full .NET framework. Kros.KORM Simple and fast micro-ORM framework for .NET. Kros.KORM.MsAccess Kros.KORM library extension for MS Access support. Only applicable in the full .NET framework."
  },
  "api/Kros.KORM/Kros.KORM.Injection.IInjector.html": {
    "href": "api/Kros.KORM/Kros.KORM.Injection.IInjector.html",
    "title": "Interface IInjector | Kros.Libs",
    "keywords": "Interface IInjector Interface, which describe service injector, which know get injected values. Namespace : Kros.KORM.Injection Assembly : Kros.KORM.dll Syntax public interface IInjector Methods GetValue(String) Get injected value for property. Declaration object GetValue(string propertyName) Parameters Type Name Description System.String propertyName Property, which want resolve. Returns Type Description System.Object Value for injection. IsInjectable(String) Can by property injected? Declaration bool IsInjectable(string propertyName) Parameters Type Name Description System.String propertyName Property name. Returns Type Description System.Boolean true if can by injected, otherwise false ."
  },
  "api/Kros.KORM/Kros.KORM.Helper.ILogger.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.ILogger.html",
    "title": "Interface ILogger | Kros.Libs",
    "keywords": "Interface ILogger Interface, which describe logger. Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public interface ILogger Methods LogCommand(IDbCommand) Logs the command. Declaration void LogCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command."
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.Parameters.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.Parameters.html",
    "title": "Class DefaultQuerySqlGenerator.Parameters | Kros.Libs",
    "keywords": "Class DefaultQuerySqlGenerator.Parameters Class which help with Linq query parameters. Inheritance System.Object DefaultQuerySqlGenerator.Parameters Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax protected class Parameters Methods AddParameter(Object) Adds the parameter. Declaration public void AddParameter(object param) Parameters Type Name Description System.Object param The parameter. Clear() Clears this instance. Declaration public void Clear() GetNextParamName() Gets the name of the next parameter. Declaration public string GetNextParamName() Returns Type Description System.String GetParams() Gets the parameters. Declaration public object[] GetParams() Returns Type Description System.Object []"
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderType.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderType.html",
    "title": "Enum DefaultQuerySqlGenerator.OrderType | Kros.Libs",
    "keywords": "Enum DefaultQuerySqlGenerator.OrderType Order type. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax protected enum OrderType Fields Name Description Ascending The ascending. Descending The descending."
  },
  "api/Kros.KORM/Kros.KORM.Injection.html": {
    "href": "api/Kros.KORM/Kros.KORM.Injection.html",
    "title": "Namespace Kros.KORM.Injection | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Injection Interfaces IInjectionConfigurator<TModel> Interface, which describe configurator, for configurate model property injection. IInjector Interface, which describe service injector, which know get injected values."
  },
  "api/Kros.KORM/Kros.KORM.Helper.MethodName-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.MethodName-1.html",
    "title": "Class MethodName<T> | Kros.Libs",
    "keywords": "Class MethodName<T> Helper for getting method name. Inheritance System.Object MethodName<T> Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public static class MethodName<T> Type Parameters Name Description T Type of class or interface, which method we want. Methods GetName(Expression<Action<T>>) Gets the name of method. Declaration public static string GetName(Expression<Action<T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T>> expression The expression. Returns Type Description System.String Method name."
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderBy.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderBy.html",
    "title": "Class DefaultQuerySqlGenerator.OrderBy | Kros.Libs",
    "keywords": "Class DefaultQuerySqlGenerator.OrderBy Class which has information about order statement. Inheritance System.Object DefaultQuerySqlGenerator.OrderBy Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax protected class OrderBy Properties ColumnaName Gets or sets the name of the columna. Declaration public string ColumnaName { get; set; } Property Value Type Description System.String Type Gets or sets the type. Declaration public DefaultQuerySqlGenerator.OrderType Type { get; set; } Property Value Type Description DefaultQuerySqlGenerator.OrderType"
  },
  "api/Kros.KORM/Kros.KORM.Materializer.IModelFactory.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.IModelFactory.html",
    "title": "Interface IModelFactory | Kros.Libs",
    "keywords": "Interface IModelFactory Interface for factory, which know materialize model from database. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IModelFactory Methods GetFactory<T>(IDataReader) Gets the factory for creating and filling model. Declaration Func<IDataReader, T> GetFactory<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader from fill model. Returns Type Description System.Func < System.Data.IDataReader , T> Factory for creating and filling model. Type Parameters Name Description T Type of model class."
  },
  "api/Kros.KORM/Kros.KORM.Injection.IInjectionConfigurator-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Injection.IInjectionConfigurator-1.html",
    "title": "Interface IInjectionConfigurator<TModel> | Kros.Libs",
    "keywords": "Interface IInjectionConfigurator<TModel> Interface, which describe configurator, for configurate model property injection. Namespace : Kros.KORM.Injection Assembly : Kros.KORM.dll Syntax public interface IInjectionConfigurator<TModel> Type Parameters Name Description TModel Model type. Methods FillProperty<TValue>(Expression<Func<TModel, TValue>>, Func<TValue>) Fill model property with injector. Declaration IInjectionConfigurator<TModel> FillProperty<TValue>(Expression<Func<TModel, TValue>> modelProperty, Func<TValue> injector) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property for injection. System.Func <TValue> injector Function which is used for injection value to property. Returns Type Description IInjectionConfigurator <TModel> Configurator, for next configurations. Type Parameters Name Description TValue Property type."
  },
  "api/Kros.KORM/Kros.KORM.Converter.IConverter.html": {
    "href": "api/Kros.KORM/Kros.KORM.Converter.IConverter.html",
    "title": "Interface IConverter | Kros.Libs",
    "keywords": "Interface IConverter Interface, which describe converter, which know convert data from db to object and reverse. Namespace : Kros.KORM.Converter Assembly : Kros.KORM.dll Syntax public interface IConverter Methods Convert(Object) Converts the specified value from Db to Clr. Declaration object Convert(object value) Parameters Type Name Description System.Object value The value. Returns Type Description System.Object ConvertBack(Object) Converts the value from Clr to Db. Declaration object ConvertBack(object value) Parameters Type Name Description System.Object value The value. Returns Type Description System.Object Converted value for Db."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.ColumnInfo.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.ColumnInfo.html",
    "title": "Class ColumnInfo | Kros.Libs",
    "keywords": "Class ColumnInfo Class, which represent information about column from database. Inheritance System.Object ColumnInfo Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class ColumnInfo Properties AutoIncrementMethodType Type of primary key auto increment method. Declaration public AutoIncrementMethodType AutoIncrementMethodType { get; set; } Property Value Type Description AutoIncrementMethodType Converter Gets or sets the data converter. Declaration public IConverter Converter { get; set; } Property Value Type Description IConverter IsPrimaryKey Gets or sets a value indicating whether this column is primary key. Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean Name Column name. Declaration public string Name { get; set; } Property Value Type Description System.String PropertyInfo Gets or sets the property information. Declaration public PropertyInfo PropertyInfo { get; set; } Property Value Type Description System.Reflection.PropertyInfo Methods GetValue(Object) Gets the value. Declaration public object GetValue(object targetObject) Parameters Type Name Description System.Object targetObject The target object. Returns Type Description System.Object Return value from targetObject. SetValue(Object, Object) Sets the value. Declaration public void SetValue(object targetObject, object value) Parameters Type Name Description System.Object targetObject The target object. System.Object value The value."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.IMaterialize.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.IMaterialize.html",
    "title": "Interface IMaterialize | Kros.Libs",
    "keywords": "Interface IMaterialize Specifies that this object supports notification about materializing. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IMaterialize Methods OnAfterMaterialize(IDataRecord) Called when model is materialized. Declaration void OnAfterMaterialize(IDataRecord source) Parameters Type Name Description System.Data.IDataRecord source The source, which from was model materialized."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.TableInfo.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.TableInfo.html",
    "title": "Class TableInfo | Kros.Libs",
    "keywords": "Class TableInfo Class, which represent information about table from database Inheritance System.Object TableInfo Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class TableInfo Constructors TableInfo(IEnumerable<ColumnInfo>, IEnumerable<PropertyInfo>, MethodInfo) Initializes a new instance of the TableInfo class. Declaration public TableInfo(IEnumerable<ColumnInfo> columns, IEnumerable<PropertyInfo> allModelProperties, MethodInfo onAfterMaterialize) Parameters Type Name Description System.Collections.Generic.IEnumerable < ColumnInfo > columns The columns. System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > allModelProperties All model properties System.Reflection.MethodInfo onAfterMaterialize Method info accessor for calling OnAfterMaterialize over IMaterialize IMaterialize If Model doesn't implement IMaterialize then null. Exceptions Type Condition System.ArgumentNullException When columns is null. Properties AllModelProperties All model properties. Declaration public IEnumerable<PropertyInfo> AllModelProperties { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > Columns Gets the columns. Declaration public IEnumerable<ColumnInfo> Columns { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ColumnInfo > The columns. Name Gets or sets the table name. Declaration public string Name { get; set; } Property Value Type Description System.String OnAfterMaterialize Method info accessor for calling OnAfterMaterialize over IMaterialize IMaterialize If Model doesn't implement IMaterialize then null. Declaration public MethodInfo OnAfterMaterialize { get; } Property Value Type Description System.Reflection.MethodInfo PrimaryKey Gets the columns, which are part of primary key. Declaration public IEnumerable<ColumnInfo> PrimaryKey { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ColumnInfo > Methods GetColumnInfo(PropertyInfo) Gets the column information. Declaration public ColumnInfo GetColumnInfo(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property Property Info. Returns Type Description ColumnInfo Column information. Exceptions Type Condition System.ArgumentNullException When property is null. GetColumnInfo(String) Gets the column information. Declaration public ColumnInfo GetColumnInfo(string columnName) Parameters Type Name Description System.String columnName Name of the column. Returns Type Description ColumnInfo Column information. Exceptions Type Condition System.ArgumentNullException When columnName is null. GetColumnInfoByPropertyName(String) Gets the name of the column information by property. Declaration public ColumnInfo GetColumnInfoByPropertyName(string propertyName) Parameters Type Name Description System.String propertyName Name of the property. Returns Type Description ColumnInfo"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.AutoIncrementMethodType.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.AutoIncrementMethodType.html",
    "title": "Enum AutoIncrementMethodType | Kros.Libs",
    "keywords": "Enum AutoIncrementMethodType Type of primary key auto increment method. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public enum AutoIncrementMethodType Fields Name Description Custom KORM generate primary key for entity. None The primary key is not auto incremented."
  },
  "api/Kros.KORM/Kros.KORM.Converter.html": {
    "href": "api/Kros.KORM/Kros.KORM.Converter.html",
    "title": "Namespace Kros.KORM.Converter | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Converter Interfaces IConverter Interface, which describe converter, which know convert data from db to object and reverse."
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.RawSqlString.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.RawSqlString.html",
    "title": "Struct RawSqlString | Kros.Libs",
    "keywords": "Struct RawSqlString A string representing a raw SQL query. This type enables overload resolution between the regular and interpolated SQL string query. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public struct RawSqlString Constructors RawSqlString(String) Constructs a RawSqlString from a see System.String Declaration public RawSqlString(string s) Parameters Type Name Description System.String s The string. Properties Format The string format. Declaration public string Format { get; } Property Value Type Description System.String Operators Implicit(FormattableString to RawSqlString) Implicitly converts a System.FormattableString to a RawSqlString Declaration public static implicit operator RawSqlString(FormattableString fs) Parameters Type Name Description System.FormattableString fs The string format. Returns Type Description RawSqlString Implicit(String to RawSqlString) Implicitly converts a System.String to a RawSqlString Declaration public static implicit operator RawSqlString(string s) Parameters Type Name Description System.String s The string. Returns Type Description RawSqlString"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.IDatabaseMapper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.IDatabaseMapper.html",
    "title": "Interface IDatabaseMapper | Kros.Libs",
    "keywords": "Interface IDatabaseMapper Interface, which describe mapper for database. Map object types to database informations. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public interface IDatabaseMapper Methods GetInjector<T>() Get property service injector. Declaration IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information by model type. Declaration TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Database table info for model. GetTableInfo<T>() Gets the table information by model type. Declaration TableInfo GetTableInfo<T>() Returns Type Description TableInfo Database table info for model. Type Parameters Name Description T Model type."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.IModelBuilder.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.IModelBuilder.html",
    "title": "Interface IModelBuilder | Kros.Libs",
    "keywords": "Interface IModelBuilder Interface for ModelBuilder, which know materialize data from Ado to objects. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IModelBuilder Examples var people = database.ModelBuilder.Materialize<Person>(dataTable); foreach (var person in people) { Console.WriteLine(person.FirstName); } Methods Materialize<T>(DataRow) Materialize data from dataRow to instances of model type T . Declaration T Materialize<T>(DataRow dataRow) Parameters Type Name Description System.Data.DataRow dataRow Data row of the table. Returns Type Description T Model. Type Parameters Name Description T Type of model. Examples var person = database.ModelBuilder.Materialize<Person>(dataRow); Materialize<T>(DataTable) Materialize data from data table to instances of model type . Declaration IEnumerable<T> Materialize<T>(DataTable table) Parameters Type Name Description System.Data.DataTable table The table. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Examples var people = database.ModelBuilder.Materialize<Person>(reader); Materialize<T>(IDataReader) Materialize data from reader to instances of model type. Declaration IEnumerable<T> Materialize<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The reader from which materialize data. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Remarks Doesn' call dispose over reader. Examples var people = database.ModelBuilder.Materialize<Person>(dataTable);"
  },
  "api/Kros.KORM/Kros.KORM.Query.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.html",
    "title": "Namespace Kros.KORM.Query | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query Classes CommandParameter Parameter pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). CommandParameterCollection Zoznam parametrov pre pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). DbSet<T> Represents the collection of all items that can be saved to the database, of a given type. QueryProvider Provider, which know execute query. QueryProviderFactories Represent set of registered Query provider factories. SqlServerQueryProvider Provider, which know execute query for Sql Server. SqlServerQueryProviderFactory Factory which create sql server provider. Interfaces IDbSet<T> An IDbSet represents the collection of all entities in the context, or that can be queried from the database, of a given type. DbSet is a concrete implementation of IDbSet. IFilteredQuery<T> Represent result of filter (where) operation. IGroupedQuery<T> Represents result of grouping operation. IOrderedQuery<T> Represents result of a sorting operation. IProjectionQuery<T> Represent result of projection operation. IQuery<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. IQueryBase<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. IQueryProvider Interface for provider, which know execute query. IQueryProviderFactory Interface, which describe factory for creating provider."
  },
  "api/Kros.Utils/Kros.Data.Schema.ColumnSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ColumnSchema.html",
    "title": "Class ColumnSchema | Kros.Libs",
    "keywords": "Class ColumnSchema Schema of a database table column. Inheritance System.Object ColumnSchema SqlServerColumnSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public abstract class ColumnSchema Constructors ColumnSchema(String, Boolean, Object, Int32) Creates an instance of column schema with name and specified parameters. Declaration public ColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name Column's name System.Boolean allowNull Specifies if column accepts NULL value. System.Object defaultValue Column's default value. System.Int32 size Maximum length of text columns. If value is 0 , maximum length is unlimited. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. Fields DefaultAllowNull Default value for column's AllowNull . The value is false . Declaration public const bool DefaultAllowNull = true Field Value Type Description System.Boolean DefaultDefaultValue Value for the column's DefaultValue , if none is defined. The value is System.DBNull . Declaration public static readonly object DefaultDefaultValue Field Value Type Description System.Object DefaultSize Default value for column's Size . The value is 0 . Declaration public const int DefaultSize = 0 Field Value Type Description System.Int32 Properties AllowNull Specifies if NULL value is allowed. Declaration public bool AllowNull { get; set; } Property Value Type Description System.Boolean DefaultValue Column's default value. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object FullName Full name of the column, together with the table name (if column belongs to table). Declaration public string FullName { get; } Property Value Type Description System.String Name Column name. Declaration public string Name { get; } Property Value Type Description System.String Size Maximum length of text columns. If value is 0 , maximum length is unlimited. Declaration public int Size { get; set; } Property Value Type Description System.Int32 Table The table to which the column belongs. The table is set automatically when the column is added to table's Columns collection. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods SetParameterDbType(IDataParameter) Sets data type to command parameter param . Declaration public abstract void SetParameterDbType(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Parameter for System.Data.IDbCommand commands. ToStringDefaultValue() Returns value for DefaultValue for use in ToString() . Declaration protected object ToStringDefaultValue() Returns Type Description System.Object String \" NULL \" if value of DefaultValue is System.DBNull or null . Otherwise returns DefaultValue ."
  },
  "api/Kros.Utils/Kros.Data.Schema.ISchemaCacheKeyGenerator.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ISchemaCacheKeyGenerator.html",
    "title": "Interface ISchemaCacheKeyGenerator | Kros.Libs",
    "keywords": "Interface ISchemaCacheKeyGenerator Cache key generator for DatabaseSchemaCache . Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface ISchemaCacheKeyGenerator Methods GenerateKey(Object) Generates a cache key for connection . Declaration string GenerateKey(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description System.String String, which identifies connection ."
  },
  "api/Kros.KORM/Kros.KORM.Helper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.html",
    "title": "Namespace Kros.KORM.Helper | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Helper Classes Logger Logger for logging provider activities. MethodName<T> Helper for getting method name. PropertyName<P> Helper for getting property name from class. Interfaces ILogger Interface, which describe logger."
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.ISqlExpressionVisitor.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.ISqlExpressionVisitor.html",
    "title": "Interface ISqlExpressionVisitor | Kros.Libs",
    "keywords": "Interface ISqlExpressionVisitor Interface, which describe visitor for genereting sql select command. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public interface ISqlExpressionVisitor Methods GenerateSql(Expression) Generates the SQL from expression. Declaration string GenerateSql(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression The expression. Returns Type Description System.String SQL select command text. VisitColumns(ColumnsExpression) Visits the columns. Declaration Expression VisitColumns(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitGroupBy(GroupByExpression) Visits the group by. Declaration Expression VisitGroupBy(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitOrderBy(OrderByExpression) Visits the order by. Declaration Expression VisitOrderBy(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSelect(SelectExpression) Visits the select. Declaration Expression VisitSelect(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression The select expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSql(SqlExpression) Visits the SQL. Declaration Expression VisitSql(SqlExpression sqlExpression) Parameters Type Name Description SqlExpression sqlExpression The SQL expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitTable(TableExpression) Visits the table. Declaration Expression VisitTable(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitWhere(WhereExpression) Visits the where. Declaration Expression VisitWhere(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Returns Type Description System.Linq.Expressions.Expression Expression"
  },
  "api/Kros.Utils/Kros.Data.SqlServer.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.html",
    "title": "Namespace Kros.Data.SqlServer | Kros.Libs",
    "keywords": "Namespace Kros.Data.SqlServer Classes SqlConnectionExtensions Extension methods for System.Data.SqlClient.SqlConnection class. SqlServerDataHelper General helpers for Microsoft SQL Server. SqlServerIdGenerator The unique ID generator for Microsoft SQL Server. SqlServerIdGeneratorFactory Creates an instances of SqlServerIdGenerator for specified database. SqlServerVersions SQL Server versions. Version numbers are taken from this document: https://support.microsoft.com/en-us/help/321185/how-to-determine-the-version-edition-and-update-level-of-sql-server-an . Enums SqlServerErrorCode Some of the error codes for Microsoft SQL Server."
  },
  "api/Kros.Utils/Kros.Data.html": {
    "href": "api/Kros.Utils/Kros.Data.html",
    "title": "Namespace Kros.Data | Kros.Libs",
    "keywords": "Namespace Kros.Data Classes ConnectionHelper Helper class for opening database connection. It ensures opening and closing of the connection. DataExtensions Extensions for various data classes. IdGeneratorBase Base class for simple creation of implementations of IIdGenerator . IdGeneratorFactories Helper class for ID generator factories ( IIdGeneratorFactory ) for different databases. Factories are registered in the class using Register<TConnection>(String, Func<DbConnection, IIdGeneratorFactory>, Func<String, IIdGeneratorFactory>) method. Two factory methods are registered for every connection (database) type. One for creating generator with connection instance and one with connection string. Interfaces IIdGenerator Interface for generating IDs for records in database. In general, IDs are just sequential numbers. IIdGeneratorFactory Interface for factory classes, which create instances of IIdGenerator ."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.html",
    "title": "Namespace Kros.Data.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.Data.MsAccess Classes Extensions General extensions for Microsoft Access. MsAccessDataHelper General helpers for work Microsoft Access. MsAccessIdGenerator The unique ID generator for Microsoft Access. MsAccessIdGeneratorFactory Creates an instances of MsAccessIdGenerator for specified database. Enums MsAccessErrorCode Error codes for Microsoft Access database provider. ProviderType Type of Microsoft Access provider."
  },
  "api/Kros.Utils/Kros.Data.Schema.DatabaseSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DatabaseSchema.html",
    "title": "Class DatabaseSchema | Kros.Libs",
    "keywords": "Class DatabaseSchema Database schema. Inheritance System.Object DatabaseSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchema Constructors DatabaseSchema(String) Creates an instance of database schema with specified name . Declaration public DatabaseSchema(string name) Parameters Type Name Description System.String name Name of the database. Properties Name Name of the database. Declaration public string Name { get; } Property Value Type Description System.String Tables List of tables in database. Declaration public TableSchemaCollection Tables { get; } Property Value Type Description TableSchemaCollection Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexSchema.html",
    "title": "Class IndexSchema | Kros.Libs",
    "keywords": "Class IndexSchema Schema of a table's index. Inheritance System.Object IndexSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexSchema Constructors IndexSchema(String) Creates an instance of index with name indexName . Declaration public IndexSchema(string indexName) Parameters Type Name Description System.String indexName Name of the index. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. IndexSchema(String, IndexType) Creates an instance of index of type indexType , with name indexName . Declaration public IndexSchema(string indexName, IndexType indexType) Parameters Type Name Description System.String indexName Name of the index. IndexType indexType Type of the index. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. IndexSchema(String, IndexType, Boolean) Creates an instance of index of type indexType , with name indexName and setting if the index is clustered . Declaration public IndexSchema(string indexName, IndexType indexType, bool clustered) Parameters Type Name Description System.String indexName Name of the index. IndexType indexType Type of the index. System.Boolean clustered Specifies, if the index is CLUSTERED . Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. Properties Columns List of index's columns. Declaration public IndexColumnSchemaCollection Columns { get; } Property Value Type Description IndexColumnSchemaCollection IndexType Index type. Declaration public IndexType IndexType { get; } Property Value Type Description IndexType Name Name of the index. It is not possible to set the name, if the index already belongs to some table (value of Table is not null ) Declaration public string Name { get; set; } Property Value Type Description System.String Exceptions Type Condition System.InvalidOperationException Attempt to change the name, but index already belongs to some table. Table Table, to which index belongs. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils/Kros.Data.Schema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.html",
    "title": "Namespace Kros.Data.Schema | Kros.Libs",
    "keywords": "Namespace Kros.Data.Schema Classes ColumnSchema Schema of a database table column. ColumnSchema.DefaultValues Columns' default values for individual data types. ColumnSchemaCollection List of columns for table TableSchema . DatabaseSchema Database schema. DatabaseSchemaCache Implementation of IDatabaseSchemaCache . It allows to load database schemas after adding appropriate loaders ( AddSchemaLoader(IDatabaseSchemaLoader, ISchemaCacheKeyGenerator) ). Loading of a database schema is quite slow, that's why loaded schemas are cached. On next request for the same schema, it is not loaded from database, but returned from cache. DatabaseSchemaLoader Helper class for simple loading of database schemas. It contains inner list of different loaders, so it can be used for loading database schema for different databases. Fresh database schema is loaded for every request, it means, loaded schemas are not cached. DefaultValueParsers Standard parsers for columns' default values. The default values in database are stored as string and it is necessary to convert them to the specific column's type. If conversion to desired type fails, the returned value is always null . ForeignKeySchema The schema of the foreign key of the database table. ForeignKeySchemaCollection List of foreign keys for table TableSchema . IndexColumnSchema Schema of a column of an index. IndexColumnSchemaCollection List of index columns. IndexSchema Schema of a table's index. IndexSchemaCollection List of indexes for table TableSchema . TableSchema Schema of a database table. TableSchemaCollection List of tables for DatabaseSchema . Interfaces IDatabaseSchemaCache Interface for classes which loads and caches database schema. IDatabaseSchemaLoader Interface for loading database schema. IDatabaseSchemaLoader<T> ISchemaCacheKeyGenerator Cache key generator for DatabaseSchemaCache . ISchemaCacheKeyGenerator<T> Enums ForeignKeyRule Foreign key rule. Defines what to do with child records when the value of parent record changes or is deleted. IndexType Table index type. SortOrder Sort order of an index column. Delegates DefaultValueParsers.ParseDefaultValueFunction Delegate for function which parses default value."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsertColumn.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsertColumn.html",
    "title": "Class MsAccessBulkInsertColumn | Kros.Libs",
    "keywords": "Class MsAccessBulkInsertColumn Definition of column for bulk insert into Microsoft Access database from CSV file. ( MsAccessBulkInsert ). Inheritance System.Object MsAccessBulkInsertColumn Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkInsertColumn Constructors MsAccessBulkInsertColumn(String) Creates a new definition for column columnName with type set to Undefined . Declaration public MsAccessBulkInsertColumn(string columnName) Parameters Type Name Description System.String columnName Column name. Exceptions Type Condition System.ArgumentNullException Value of columnName is null , empty string, or string containing whitespace characters only. MsAccessBulkInsertColumn(String, BulkInsertColumnType) Creates a new definition for column columnName with type columnType . Declaration public MsAccessBulkInsertColumn(string columnName, BulkInsertColumnType columnType) Parameters Type Name Description System.String columnName Column name. BulkInsertColumnType columnType Column type. Exceptions Type Condition System.ArgumentNullException Value of columnName is null , empty string, or string containing whitespace characters only. Properties ColumnName Column name. Declaration public string ColumnName { get; } Property Value Type Description System.String String. ColumnType Column type. Declaration public BulkInsertColumnType ColumnType { get; } Property Value Type Description BulkInsertColumnType BulkInsertColumnType value."
  },
  "api/Kros.KORM/Kros.KORM.CommandGenerator.html": {
    "href": "api/Kros.KORM/Kros.KORM.CommandGenerator.html",
    "title": "Namespace Kros.KORM.CommandGenerator | Kros.Libs",
    "keywords": "Namespace Kros.KORM.CommandGenerator Interfaces ICommandGenerator<T> Iterface, which describes generating single-table commands that are used to commit changes made to a DbSet with the associated database."
  },
  "api/Kros.KORM/Kros.KORM.Query.CommandParameter.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.CommandParameter.html",
    "title": "Class CommandParameter | Kros.Libs",
    "keywords": "Class CommandParameter Parameter pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). Inheritance System.Object CommandParameter Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class CommandParameter Constructors CommandParameter(String, Object) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. CommandParameter(String, Object, DbType) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, DbType dataType) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.DbType dataType Dátový typ parametra. CommandParameter(String, Object, ParameterDirection) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. CommandParameter(String, Object, Nullable<DbType>, ParameterDirection) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, DbType? dataType, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Nullable < System.Data.DbType > dataType Dátový typ parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Properties DataType Dátový typ parametra. Ak nie je nastavený, reálnemu databázovému parametru sa nastaví automaticky podľa typu hodnoty Value . Musí byť nastavený, ak Value je NULL. Declaration public DbType? DataType { get; set; } Property Value Type Description System.Nullable < System.Data.DbType > Direction Druh parametra: vstupný, výstupný, vstupno-výstupný, alebo návratová hodnota. Zmysel má len pri parametroch pre stored procedúry. Declaration public ParameterDirection Direction { get; set; } Property Value Type Description System.Data.ParameterDirection ParameterName Meno parametra. Declaration public string ParameterName { get; } Property Value Type Description System.String Value Hodnota parametra. Ak je NULL ( null , alebo System.DBNull ), mal by byť nastavený presný dátový typ DataType . Declaration public object Value { get; set; } Property Value Type Description System.Object"
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.MsAccessQueryProviderFactory.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.MsAccessQueryProviderFactory.html",
    "title": "Class MsAccessQueryProviderFactory | Kros.Libs",
    "keywords": "Class MsAccessQueryProviderFactory Factory, which know create MsAccess query provider. Inheritance System.Object MsAccessQueryProviderFactory Implements IQueryProviderFactory Namespace : Kros.KORM.Query.MsAccess Assembly : Kros.KORM.MsAccess.dll Syntax public class MsAccessQueryProviderFactory : IQueryProviderFactory Methods Create(ConnectionStringSettings, IModelBuilder, IDatabaseMapper) Creates the specified MsAccess QueryProvider factory. Declaration public IQueryProvider Create(ConnectionStringSettings connectionString, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of MsAccessQueryProvider . Create(DbConnection, IModelBuilder, IDatabaseMapper) Creates the specified MsAccess QueryProvider factory. Declaration public IQueryProvider Create(DbConnection connection, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of MsAccessQueryProvider . Register() Registers instance of this type to QueryProviderFactories . Declaration public static void Register() Implements IQueryProviderFactory See Also IQueryProviderFactory"
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.html",
    "title": "Namespace Kros.KORM.Query.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query.MsAccess Classes MsAccessQueryProvider Provider, which know execute query for MsAccess. MsAccessQueryProviderFactory Factory, which know create MsAccess query provider."
  },
  "api/Kros.Utils/Kros.Utils.Suspender.html": {
    "href": "api/Kros.Utils/Kros.Utils.Suspender.html",
    "title": "Class Suspender | Kros.Libs",
    "keywords": "Class Suspender Class for simple work suspending. It is poosible to suspend work ( Suspend() ) several times, but in that case it is necessary to resume ( Kros.Utils.Suspender.Resume ) it the same number of times. The easiest way of suspending work is using the using block. Inheritance System.Object Suspender ConnectionHelper Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public class Suspender Remarks It is useful for example in object initialization. During the initialization it is often necessary not to perform certain actions. Standard way is using some flag if the initialization is running. The Suspender class encapsulates the management of this flag, while it is possible to set this flag several times in succession (nested work suspending). Examples private Suspender _initSuspender = new Suspender(); private void Init() { using (_initSuspender.Suspend()) { // Do initialization... } } private void DoWork() { // Do general work. if (!_initSuspender.IsSuspended) { // Do work only when not initializing. } } Properties IsSuspended The flag, if work is ( true ), or not ( false ). Declaration public bool IsSuspended { get; } Property Value Type Description System.Boolean Methods ResumeCore() Used for specific (inherited) suspender implementations. This method is executed when the work is resumed for the last time. So it means it is executed when IsSuspended flag is changing from true to false . Declaration protected virtual void ResumeCore() Remarks Method is intended for implementing custom logic in own suspender when resuming work. It is executed only once during the last work resuming (preceding work resumings do not call ResumeCore() ). The method is called after the IsSuspended flag is changed, so the value of flag while the method is executing is false . Suspend() Suspends the - sets the IsSuspended flag to true . If this method is called several times, it is necessary to call Kros.Utils.Suspender.Resume the same number of times to clear IsSuspended flag. Declaration public IDisposable Suspend() Returns Type Description System.IDisposable Returns helper object, which automatically calls Kros.Utils.Suspender.Resume when disposed of, so it is convenient to use using block. Examples private Suspender _initSuspender = new Suspender(); private void Init() { using (_initSuspender.Suspend()) { // Do initialization... } } private void DoWork() { // Do general work. if (!_initSuspender.IsSuspended) { // Do work only when not initializing. } } SuspendCore() Used for specific (inherited) suspender implementations. This method is executed when Suspend() is called for the first time. So it means it is executed when IsSuspended flag is changing from false to true . Declaration protected virtual void SuspendCore() Remarks Method is intended for implementing custom logic in own suspender when suspending work. It is executed only once during the first call of Suspend() (subsequent calls to Suspend() do not call SuspendCore() ). The method is called before the IsSuspended flag is changed, so the value of flag while the method is executing is false ."
  },
  "api/Kros.Utils/Kros.Utils.html": {
    "href": "api/Kros.Utils/Kros.Utils.html",
    "title": "Namespace Kros.Utils | Kros.Libs",
    "keywords": "Namespace Kros.Utils Classes DateTimeProvider Class for \"freezing\" date and time to constant value. Usable for example in tests. Check Helper class for validating method parameters. Every validation throws some kind of System.ArgumentException if it fails ( System.ArgumentException , System.ArgumentNullException , System.ArgumentOutOfRangeException ). Suspender Class for simple work suspending. It is poosible to suspend work ( Suspend() ) several times, but in that case it is necessary to resume ( Kros.Utils.Suspender.Resume ) it the same number of times. The easiest way of suspending work is using the using block. Interfaces IDiContainer Interface for DI (Dependency Injection) container."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.IModelMapper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.IModelMapper.html",
    "title": "Interface IModelMapper | Kros.Libs",
    "keywords": "Interface IModelMapper Interface, which describe class for mapping database to model. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public interface IModelMapper Properties MapColumnName Gets or sets the column name mapping logic. Declaration Func<ColumnInfo, Type, string> MapColumnName { get; set; } Property Value Type Description System.Func < ColumnInfo , System.Type , System.String > Remarks Params: ColumnInfo - info about column. Type - Type of model. string - return column name. MapPrimaryKey Gets or sets the primary key mapping logic. Declaration Func<TableInfo, IEnumerable<ColumnInfo>> MapPrimaryKey { get; set; } Property Value Type Description System.Func < TableInfo , System.Collections.Generic.IEnumerable < ColumnInfo >> MapTableName Gets or sets the table name mapping logic. Declaration Func<TableInfo, Type, string> MapTableName { get; set; } Property Value Type Description System.Func < TableInfo , System.Type , System.String > Remarks Params: TableInfo - info about table. Type - Type of model. string - return table name. Methods GetInjector<T>() Get property service injector. Declaration IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information. Declaration TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Table info. GetTableInfo<T>() Gets the table information. Declaration TableInfo GetTableInfo<T>() Returns Type Description TableInfo Table info. Type Parameters Name Description T Type of model. InjectionConfigurator<T>() Get property injection configuration for model T. Declaration IInjectionConfigurator<T> InjectionConfigurator<T>() Returns Type Description IInjectionConfigurator <T> Type Parameters Name Description T Examples Database.DefaultModelMapper .InjectionConfigurator<Person>() .FillProperty(p => p.CalculationService, () => new CalculationService()) .FillProperty(p => p.Logger, () => ServiceContainer.Instance.Resolve<ILogger>()); SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>>, String) Set column name for specific property. Declaration void SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>> modelProperty, string columnName) where TModel : class Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property to. System.String columnName Database column name. Type Parameters Name Description TModel TValue Examples Database.DefaultModelMapper.SetColumnName<Person, string>(p => p.Name, \"FirstName\");"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.NoMapAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.NoMapAttribute.html",
    "title": "Class NoMapAttribute | Kros.Libs",
    "keywords": "Class NoMapAttribute Attribute, which describe property, which doesn't exist in database. Inheritance System.Object System.Attribute NoMapAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class NoMapAttribute : Attribute, _Attribute"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessIdGenerator.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessIdGenerator.html",
    "title": "Class MsAccessIdGenerator | Kros.Libs",
    "keywords": "Class MsAccessIdGenerator The unique ID generator for Microsoft Access. Inheritance System.Object IdGeneratorBase MsAccessIdGenerator Implements IIdGenerator Inherited Members IdGeneratorBase.TableName IdGeneratorBase.BatchSize IdGeneratorBase.Connection IdGeneratorBase.GetNext() IdGeneratorBase.Dispose(Boolean) IdGeneratorBase.Dispose() Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessIdGenerator : IdGeneratorBase, IIdGenerator, IDisposable Remarks In general, the generator should be created using MsAccessIdGeneratorFactory . Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; }; } } } Constructors MsAccessIdGenerator(OleDbConnection, String, Int32) Creates a generator for table tableName in database connection with batch size batchSize . Declaration public MsAccessIdGenerator(OleDbConnection connection, string tableName, int batchSize) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connection or tableName is null . System.ArgumentException Value of batchSize is less or equal than 0. MsAccessIdGenerator(String, String, Int32) Creates a generator for table tableName in database connectionString with batch size batchSize . Declaration public MsAccessIdGenerator(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Connection string to the database. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connectionString or tableName is null . System.ArgumentException Methods CreateConnection(String) Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.Common.DbConnection Overrides IdGeneratorBase.CreateConnection(String) GetIdStoreTableCreationScript() Returns SQL script for creating IdStore table. Declaration public static string GetIdStoreTableCreationScript() Returns Type Description System.String GetNewIdFromDbCore() Declaration protected override int GetNewIdFromDbCore() Returns Type Description System.Int32 Overrides IdGeneratorBase.GetNewIdFromDbCore() InitDatabaseForIdGenerator() Declaration public override void InitDatabaseForIdGenerator() Overrides IdGeneratorBase.InitDatabaseForIdGenerator() Implements IIdGenerator See Also IdGeneratorFactories MsAccessIdGeneratorFactory"
  },
  "api/Kros.Utils/Kros.UnitTests.SqlServerTestHelper.html": {
    "href": "api/Kros.Utils/Kros.UnitTests.SqlServerTestHelper.html",
    "title": "Class SqlServerTestHelper | Kros.Libs",
    "keywords": "Class SqlServerTestHelper Helper class for unit testing using real SQL Server database. Inheritance System.Object SqlServerTestHelper Namespace : Kros.UnitTests Assembly : Kros.Utils.dll Syntax public class SqlServerTestHelper : IDisposable Remarks In general, the unit tests should not require real database. But in some cases, this is necessary. This class manages creation of temporary database, which the tests will use. Database name is generated to be unique and after finishing ( Dispose() ), the database is deleted. Connection to created database is available in Connection property. Examples // V connection string-u nie je určená databáza, pretože tá sa automaticky vytvorí s náhodným // menom. Na konci práce sa databáza automaticky vymaže. private const string BaseConnectionString = \"Data Source=SQLSERVER;Integrated Security=True;\"; private const string CreateTestTableScript = @\"CREATE TABLE [dbo].[TestTable] ( [Id] [int] NOT NULL, [Name] [nvarchar](255) NULL, CONSTRAINT [PK_TestTable] PRIMARY KEY CLUSTERED ([Id] ASC) ON [PRIMARY] ) ON [PRIMARY];\"; [Fact] public void DoSomeTestWithDatabase() { using (var serverHelper = new SqlServerTestHelper(BaseConnectionString, \"TestDatabase\", CreateTestTableScript)) { // Do tests with connection serverHelper.Connection. } } Constructors SqlServerTestHelper(String, String) Creates an instance of helper with connection baseConnectionString and base database name baseDatabaseName . Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName) Parameters Type Name Description System.String baseConnectionString Base connection string to SQL Server, where database will be created. System.String baseDatabaseName Base database name. GUID will be appended to it. The value is not required. SqlServerTestHelper(String, String, IEnumerable<String>) Creates an instance of helper with connection baseConnectionString and base database name baseDatabaseName . Created database will be initialized with scripts from initDatabaseScripts . Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description System.String baseConnectionString Base connection string to SQL Server, where database will be created. System.String baseDatabaseName Base database name. GUID will be appended to it. The value is not required. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts List of scripts, which are executed when database is created. For example, they can be scripts to create necessary tables and data. SqlServerTestHelper(String, String, String) Creates an instance of helper with connection baseConnectionString and base database name baseDatabaseName . Created database will be initialized with script initDatabaseScript . Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName, string initDatabaseScript) Parameters Type Name Description System.String baseConnectionString Base connection string to SQL Server, where database will be created. System.String baseDatabaseName Base database name. GUID will be appended to it. The value is not required. System.String initDatabaseScript The script, which is executed when database is created. For example, it can be script to create some table. Properties BaseConnectionString Base connection string to SQL Server, where temporary database will be created. Database name does not need to be set in connection stirng, because it will be generated. Declaration public string BaseConnectionString { get; } Property Value Type Description System.String BaseDatabaseName Base database name. GUID is appended to this name, to make database name unique. If BaseDatabaseName is empty, the database name will be just that GUID. Declaration public string BaseDatabaseName { get; } Property Value Type Description System.String Connection Connection to created database. Declaration public SqlConnection Connection { get; } Property Value Type Description System.Data.SqlClient.SqlConnection Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GenerateDatabaseName() Generates a name for database, which is created on SQL Server. Returned name is composed from BaseDatabaseName (if specified) and generated GUID, to make it unique. Declaration protected virtual string GenerateDatabaseName() Returns Type Description System.String Database name. InitDatabase() Initializes a database. Method is executed once after creating the database and it executes scripts which were specified in constructor. Declaration protected virtual void InitDatabase()"
  },
  "api/Kros.KORM/Kros.KORM.Helper.Logger.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.Logger.html",
    "title": "Class Logger | Kros.Libs",
    "keywords": "Class Logger Logger for logging provider activities. Inheritance System.Object Logger Implements ILogger Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public class Logger : ILogger Methods LogCommand(IDbCommand) Logs the command. Declaration public void LogCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Implements ILogger See Also ILogger"
  },
  "api/Kros.KORM/Kros.KORM.Database.html": {
    "href": "api/Kros.KORM/Kros.KORM.Database.html",
    "title": "Class Database | Kros.Libs",
    "keywords": "Class Database Represent access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Inheritance System.Object Database Implements IDatabase Namespace : Kros.KORM Assembly : Kros.KORM.dll Syntax public class Database : IDatabase, IDisposable Constructors Database(ConnectionStringSettings) Initializes a new instance of the Database class. Declaration public Database(ConnectionStringSettings connectionString) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The active connection. Database(ConnectionStringSettings, IQueryProviderFactory) Initializes a new instance of the Database class. Declaration public Database(ConnectionStringSettings connectionString, IQueryProviderFactory queryProviderFactory) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string settings. IQueryProviderFactory queryProviderFactory The query provider factory, which know create query provider. Database(DbConnection) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. Database(DbConnection, IModelMapper) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection, IModelMapper modelMapper) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. IModelMapper modelMapper Model mapper, which will be used for mapping Object to Relation database. Database(DbConnection, IQueryProviderFactory) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection, IQueryProviderFactory queryProviderFactory) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. IQueryProviderFactory queryProviderFactory The query provider factory, which know create query provider. Database(String, String) Initializes a new instance of the Database class. Declaration public Database(string connectionString, string adoClientName) Parameters Type Name Description System.String connectionString Connection string. System.String adoClientName Ado client name. (System.Data.SqlClient/System.Data.OleDb) Properties DatabaseMapper Gets the database mapper, which has mapping information for all tables in database Declaration public static IDatabaseMapper DatabaseMapper { get; } Property Value Type Description IDatabaseMapper DbProviderFactory Returns DbProviderFactory for current provider. Declaration public DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory DefaultModelFactory Gets or sets the default model factory, which will be used for instanting and filling object from Ado. Declaration public static IModelFactory DefaultModelFactory { get; set; } Property Value Type Description IModelFactory The default model factory. DefaultModelMapper Gets or sets the default model mapper, which will be used for mapping Object to Relation database. Declaration public static IModelMapper DefaultModelMapper { get; set; } Property Value Type Description IModelMapper The default model mapper. Log Gets or sets the logging delegate. Declaration public static Action<string> Log { get; set; } Property Value Type Description System.Action < System.String > ModelBuilder Gets the model builder for materializing data from ado to models. Declaration public IModelBuilder ModelBuilder { get; } Property Value Type Description IModelBuilder Methods BeginTransaction() Declaration public ITransaction BeginTransaction() Returns Type Description ITransaction BeginTransaction(IsolationLevel) Declaration public ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction CreateBulkInsert() Creates instance of IBulkInsert . Declaration public IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration public IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing ExecuteNonQuery(String) Executes arbitrary query. Declaration public int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration public int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. Exceptions Type Condition System.ArgumentException Value of any of the parameters is NULL and its data type ( DataType ) is not set. ExecuteScalar(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public string ExecuteScalar(string query) Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public string ExecuteScalar(string query, params object[] args) Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar<TResult>(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public TResult? ExecuteScalar<TResult>(string query) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteScalar<TResult>(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public TResult? ExecuteScalar<TResult>(string query, params object[] args) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Returns Type Description TResult Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName CommandParameterCollection parameters Returns Type Description TResult Type Parameters Name Description TResult InitDatabaseForIdGenerator() Declaration public void InitDatabaseForIdGenerator() Query<T>() Gets the query builder for T creating and executing query for obtains models. Declaration public IQuery<T> Query<T>() Returns Type Description IQuery <T> Type Parameters Name Description T Type of model, for which querying. Implements IDatabase See Also IModelBuilder"
  },
  "api/Kros.Utils.MsAccess/Kros.UnitTests.MsAccessTestHelper.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.UnitTests.MsAccessTestHelper.html",
    "title": "Class MsAccessTestHelper | Kros.Libs",
    "keywords": "Class MsAccessTestHelper Helper class for unit tests, if there is a need for real database in tests. It creates temporary empty database for testing. This database is automatically deleted after finishing the work. Inheritance System.Object MsAccessTestHelper Namespace : Kros.UnitTests Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessTestHelper : IDisposable Constructors MsAccessTestHelper(ProviderType, Stream) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabaseStream . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.IO.Stream sourceDatabaseStream Source database. New temporary database is created as a copy of this. MsAccessTestHelper(ProviderType, Stream, IEnumerable<String>) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabaseStream and initialized with scripts in initDatabaseScripts . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.IO.Stream sourceDatabaseStream Source database. New temporary database is created as a copy of this. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts List of scripts, which are used for database initialization. For example, they can be scripts for creating and filling necessary tables. MsAccessTestHelper(ProviderType, Stream, String) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabaseStream and initialized with script initDatabaseScript . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream, string initDatabaseScript) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.IO.Stream sourceDatabaseStream Source database. New temporary database is created as a copy of this. System.String initDatabaseScript A script, which is used for database initialization. For example, it can be script for creating some table. MsAccessTestHelper(ProviderType, String) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabasePath . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.String sourceDatabasePath Source database. New temporary database is created as a copy of this. MsAccessTestHelper(ProviderType, String, IEnumerable<String>) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabasePath and initialized with scripts in initDatabaseScripts . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.String sourceDatabasePath Source database. New temporary database is created as a copy of this. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts List of scripts, which are used for database initialization. For example, they can be scripts for creating and filling necessary tables. MsAccessTestHelper(ProviderType, String, String) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabasePath and initialized with script initDatabaseScript . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath, string initDatabaseScript) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.String sourceDatabasePath Source database. New temporary database is created as a copy of this. System.String initDatabaseScript A script, which is used for database initialization. For example, it can be script for creating some table. Properties Connection Connection to created temporary database. Declaration public OleDbConnection Connection { get; } Property Value Type Description System.Data.OleDb.OleDbConnection DatabasePath Path to created temporary database. Declaration public string DatabasePath { get; } Property Value Type Description System.String Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GenerateDatabaseName() Generates path to the file where database will be created. Default is random filename in system's temp folder. Declaration protected virtual string GenerateDatabaseName() Returns Type Description System.String Path to the database file. InitDatabase() Initializes new empty database. Method is called after empty temporary database is created and it executes initialization scripts (specified in constructor). method is called only once. Declaration protected virtual void InitDatabase()"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessIdGeneratorFactory.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessIdGeneratorFactory.html",
    "title": "Class MsAccessIdGeneratorFactory | Kros.Libs",
    "keywords": "Class MsAccessIdGeneratorFactory Creates an instances of MsAccessIdGenerator for specified database. Inheritance System.Object MsAccessIdGeneratorFactory Implements IIdGeneratorFactory Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessIdGeneratorFactory : IIdGeneratorFactory Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; }; } } } Constructors MsAccessIdGeneratorFactory(OleDbConnection) Initializes a new instance of the MsAccessIdGeneratorFactory class. Declaration public MsAccessIdGeneratorFactory(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Connection, ktorá sa použije pre získavanie unikátnych identifikátorov. MsAccessIdGeneratorFactory(String) Initializes a new instance of the MsAccessIdGeneratorFactory class. Declaration public MsAccessIdGeneratorFactory(string connectionString) Parameters Type Name Description System.String connectionString Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov. Methods GetGenerator(String) Declaration public IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Returns Type Description IIdGenerator GetGenerator(String, Int32) Declaration public IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName System.Int32 batchSize Returns Type Description IIdGenerator Register() Registers factory methods for creating an instance of factory into IdGeneratorFactories . Declaration public static void Register() Implements IIdGeneratorFactory See Also MsAccessIdGenerator IdGeneratorFactories"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.html",
    "title": "Class SqlServerSchemaLoader | Kros.Libs",
    "keywords": "Class SqlServerSchemaLoader The implementation of IDatabaseSchemaLoader<T> for Microsoft SQL Server. Inheritance System.Object SqlServerSchemaLoader Implements IDatabaseSchemaLoader < System.Data.SqlClient.SqlConnection > IDatabaseSchemaLoader Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerSchemaLoader : IDatabaseSchemaLoader<SqlConnection>, IDatabaseSchemaLoader Methods GetDefaultValueString(String) Adjusts the string rawDefaultValueString so column's default value can be obtained from it. Declaration protected virtual string GetDefaultValueString(string rawDefaultValueString) Parameters Type Name Description System.String rawDefaultValueString Default value string as it is stored in database. Returns Type Description System.String Adjusted string - trimmed of unneeded characters. LoadSchema(SqlConnection) Loads database schema for connection . Declaration public DatabaseSchema LoadSchema(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. Returns Type Description DatabaseSchema Database schema. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException Initial catalog of connection is an empty string, or string containing whitespace characters only. LoadTableSchema(SqlConnection, String) Loads table schema for table tableName in database connection . Declaration public TableSchema LoadTableSchema(SqlConnection connection, string tableName) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. System.String tableName Table name. Returns Type Description TableSchema Table schema, or value null if specified table does not exist. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException OnParseDefaultValue(SqlServerParseDefaultValueEventArgs) Raises the ParseDefaultValue event with arguments e . Declaration protected virtual void OnParseDefaultValue(SqlServerParseDefaultValueEventArgs e) Parameters Type Name Description SqlServerParseDefaultValueEventArgs e Arguments for the event. SupportsConnectionType(SqlConnection) Checks if it is poosible to load database schema for connection . Declaration public bool SupportsConnectionType(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. Returns Type Description System.Boolean false if value of connection is null , otherwise true . Events ParseDefaultValue Event raised while parsing default value of a column. It is possible to use custom parsing logic in the event handler. Declaration public event EventHandler<SqlServerParseDefaultValueEventArgs> ParseDefaultValue Event Type Type Description System.EventHandler < SqlServerParseDefaultValueEventArgs > Remarks When custom logic for parsing column's default value is used, the parsed value is set in DefaultValue property and Handled flag must be set to true . Explicit Interface Implementations IDatabaseSchemaLoader.LoadSchema(Object) Loads database schema for connection . Declaration DatabaseSchema IDatabaseSchemaLoader.LoadSchema(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description DatabaseSchema Database schema. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException IDatabaseSchemaLoader.LoadTableSchema(Object, String) Loads table schema for table tableName in database connection . Declaration TableSchema IDatabaseSchemaLoader.LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Database connection. System.String tableName Table name. Returns Type Description TableSchema Table schema, or value null if specified table does not exist. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException IDatabaseSchemaLoader.SupportsConnectionType(Object) Checks if it is poosible to load database schema for connection . Declaration bool IDatabaseSchemaLoader.SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description System.Boolean false if value of connection is not of System.Data.SqlClient.SqlConnection type or is null , otherwise true . Implements IDatabaseSchemaLoader<T> IDatabaseSchemaLoader"
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexColumnSchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexColumnSchemaCollection.html",
    "title": "Class IndexColumnSchemaCollection | Kros.Libs",
    "keywords": "Class IndexColumnSchemaCollection List of index columns. Inheritance System.Object System.Collections.ObjectModel.Collection < IndexColumnSchema > System.Collections.ObjectModel.KeyedCollection < System.String , IndexColumnSchema > IndexColumnSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexColumnSchemaCollection : KeyedCollection<string, IndexColumnSchema>, IList<IndexColumnSchema>, ICollection<IndexColumnSchema>, IList, ICollection, IReadOnlyList<IndexColumnSchema>, IReadOnlyCollection<IndexColumnSchema>, IEnumerable<IndexColumnSchema>, IEnumerable Remarks To the columns added to this list is automatically set their Index . The column can belong only to one index. Constructors IndexColumnSchemaCollection(IndexSchema) Creates a new list of columns for index index . Declaration public IndexColumnSchemaCollection(IndexSchema index) Parameters Type Name Description IndexSchema index The index to which column list belongs. Exceptions Type Condition System.ArgumentNullException Value of index is null . Properties Index The index to which column list belongs. Declaration public IndexSchema Index { get; } Property Value Type Description IndexSchema Methods Add(String) Creates the new index column with name columnName and adds it to the list. Declaration public IndexColumnSchema Add(string columnName) Parameters Type Name Description System.String columnName Column name. Returns Type Description IndexColumnSchema Created column. Exceptions Type Condition System.ArgumentNullException Value of columnName is null . System.ArgumentException Value of columnName is empty string, or string containing only whitespace characters. Add(String, SortOrder) Creates the new index column with name columnName and sort order order and adds it to the list. Declaration public IndexColumnSchema Add(string columnName, SortOrder order) Parameters Type Name Description System.String columnName Column name. SortOrder order Column sort order. Returns Type Description IndexColumnSchema Created column. Exceptions Type Condition System.ArgumentNullException Value of columnName is null . System.ArgumentException Value of columnName is empty string, or string containing only whitespace characters. GetKeyForItem(IndexColumnSchema) Declaration protected override string GetKeyForItem(IndexColumnSchema item) Parameters Type Name Description IndexColumnSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.GetKeyForItem(Kros.Data.Schema.IndexColumnSchema) InsertItem(Int32, IndexColumnSchema) Declaration protected override void InsertItem(int index, IndexColumnSchema item) Parameters Type Name Description System.Int32 index IndexColumnSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.InsertItem(System.Int32, Kros.Data.Schema.IndexColumnSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Utils/Kros.Data.IIdGenerator.html": {
    "href": "api/Kros.Utils/Kros.Data.IIdGenerator.html",
    "title": "Interface IIdGenerator | Kros.Libs",
    "keywords": "Interface IIdGenerator Interface for generating IDs for records in database. In general, IDs are just sequential numbers. Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public interface IIdGenerator : IDisposable Remarks Usually one generator generates IDs for just one table. Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; }; } } } Methods GetNext() Returns next ID. Declaration int GetNext() Returns Type Description System.Int32 Unique ID for record in data table. InitDatabaseForIdGenerator() Initializes database for using ID generator. Initialization can mean creating necessary table and stored procedure. Declaration void InitDatabaseForIdGenerator() See Also SqlServerIdGenerator"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.html",
    "title": "Class SqlServerBulkUpdate | Kros.Libs",
    "keywords": "Class SqlServerBulkUpdate Class for fast data update for SQL Server. Inheritance System.Object BulkUpdateBase SqlServerBulkUpdate Implements IBulkUpdate Inherited Members BulkUpdateBase.PrefixTempTable BulkUpdateBase._connection BulkUpdateBase._disposeOfConnection BulkUpdateBase.ExternalTransaction BulkUpdateBase.DestinationTableName BulkUpdateBase.TempTableAction BulkUpdateBase.PrimaryKeyColumn BulkUpdateBase.Update(IBulkActionDataReader) BulkUpdateBase.UpdateAsync(IBulkActionDataReader) BulkUpdateBase.Update(IDataReader) BulkUpdateBase.UpdateAsync(IDataReader) BulkUpdateBase.Update(DataTable) BulkUpdateBase.UpdateAsync(DataTable) BulkUpdateBase.GetTempTableNameForBulkInsert(String) BulkUpdateBase.GetColumnNamesForTempTable(IDataReader) BulkUpdateBase.GetUpdateColumnNames(IDataReader, String) BulkUpdateBase.Dispose(Boolean) BulkUpdateBase.Dispose() Namespace : Kros.Data.BulkActions.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerBulkUpdate : BulkUpdateBase, IBulkUpdate, IDisposable Examples Constructors SqlServerBulkUpdate(SqlConnection) Initialize new instance of SqlServerBulkUpdate with database connection connection . Declaration public SqlServerBulkUpdate(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be updated, connection has to be opened. If transaction is running on connection, contructor with defined external transaction has to be used. SqlServerBulkUpdate(SqlConnection, SqlTransaction) Initialize new instance of SqlServerBulkUpdate with database connection connection , and external transaction externalTransaction . Declaration public SqlServerBulkUpdate(SqlConnection connection, SqlTransaction externalTransaction) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be updated, connection has to be opened. If transaction is running on connection, transaction has to be defined in externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction External transaction, in which bulk update is executed. SqlServerBulkUpdate(String) Initialize new instance of SqlServerBulkUpdate with connectionString . Declaration public SqlServerBulkUpdate(string connectionString) Parameters Type Name Description System.String connectionString Connection string for database connection. Methods CreateBulkInsert() Declaration protected override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Overrides BulkUpdateBase.CreateBulkInsert() CreateCommandForPrimaryKey() Declaration protected override IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand Overrides BulkUpdateBase.CreateCommandForPrimaryKey() CreateTempTable(IDataReader, String) Declaration protected override void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName Overrides BulkUpdateBase.CreateTempTable(IDataReader, String) DoneTempTableAsync(String, Boolean) Declaration protected override Task DoneTempTableAsync(string tempTableName, bool useAsync) Parameters Type Name Description System.String tempTableName System.Boolean useAsync Returns Type Description System.Threading.Tasks.Task Overrides BulkUpdateBase.DoneTempTableAsync(String, Boolean) GetTempTableName() Declaration protected override string GetTempTableName() Returns Type Description System.String Overrides BulkUpdateBase.GetTempTableName() InvokeAction(String) Declaration protected override void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Overrides BulkUpdateBase.InvokeAction(String) UpdateDestinationTableAsync(IDataReader, String, Boolean) Declaration protected override Task UpdateDestinationTableAsync(IDataReader reader, string tempTableName, bool useAsync) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName System.Boolean useAsync Returns Type Description System.Threading.Tasks.Task Overrides BulkUpdateBase.UpdateDestinationTableAsync(IDataReader, String, Boolean) Implements IBulkUpdate"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.html",
    "title": "Class SqlServerBulkInsert | Kros.Libs",
    "keywords": "Class SqlServerBulkInsert Class for fast data inserting into SQL Server. Inheritance System.Object SqlServerBulkInsert Implements IBulkInsert Namespace : Kros.Data.BulkActions.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerBulkInsert : IBulkInsert, IDisposable Constructors SqlServerBulkInsert(SqlConnection) Initialize new instance of SqlServerBulkInsert with database connection connection . Declaration public SqlServerBulkInsert(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be inserted, connection has to be opened. If transaction is running on connection, contructor with defined external transaction must be used. SqlServerBulkInsert(SqlConnection, SqlBulkCopyOptions) Initialize new instance of SqlServerBulkInsert with database connection connection and defined options options . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlBulkCopyOptions options) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be inserted, connection has to be opened. System.Data.SqlClient.SqlBulkCopyOptions options Options System.Data.SqlClient.SqlBulkCopyOptions . SqlServerBulkInsert(SqlConnection, SqlTransaction) Initialize new instance of SqlServerBulkInsert with database connection connection and external transaction externalTransaction . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlTransaction externalTransaction) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be inserted, connection has to be opened. If transaction is running on connection, transaction has to be defined in externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction External transaction, in which bulk insert is executed. SqlServerBulkInsert(SqlConnection, SqlTransaction, SqlBulkCopyOptions) Initialize new instance of SqlServerBulkInsert with database connection connection , external transaction externalTransaction and defined options options . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlTransaction externalTransaction, SqlBulkCopyOptions options) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be inserted, connection has to be opened. If transaction is running on connection, transaction has to be defined in externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction External transaction, in which bulk insert is executed. System.Data.SqlClient.SqlBulkCopyOptions options Options System.Data.SqlClient.SqlBulkCopyOptions . SqlServerBulkInsert(String) Initialize new instance of SqlServerBulkInsert with connectionString . Declaration public SqlServerBulkInsert(string connectionString) Parameters Type Name Description System.String connectionString Connection string for database connection. SqlServerBulkInsert(String, SqlBulkCopyOptions) Initialize new instance of SqlServerBulkInsert with connectionString and defined options options . Declaration public SqlServerBulkInsert(string connectionString, SqlBulkCopyOptions options) Parameters Type Name Description System.String connectionString Connection string for database connection. System.Data.SqlClient.SqlBulkCopyOptions options Options System.Data.SqlClient.SqlBulkCopyOptions . Properties BatchSize Row count for batch sent to database. If 0, batch size is not limited. Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException Value is negative. BulkCopyOptions Options BulkCopyOptions for internal instance of System.Data.SqlClient.SqlBulkCopy . Declaration public SqlBulkCopyOptions BulkCopyOptions { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions BulkInsertTimeout Timeout for BulkInsert operation. If 0, duration of operation is not limited. Declaration public int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException Value is negative. DefaultBulkCopyOptions Default System.Data.SqlClient.SqlBulkCopyOptions for internal instance of System.Data.SqlClient.SqlBulkCopy , if external transaction is not used. Value is SqlBulkCopyOptions.TableLock | SqlBulkCopyOptions.UseInternalTransaction . Declaration public static SqlBulkCopyOptions DefaultBulkCopyOptions { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions DefaultBulkCopyOptionsExternalTransaction Default System.Data.SqlClient.SqlBulkCopyOptions for internal instance of System.Data.SqlClient.SqlBulkCopy , if external transaction is used. Value is SqlBulkCopyOptions.TableLock . Declaration public static SqlBulkCopyOptions DefaultBulkCopyOptionsExternalTransaction { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions DestinationTableName Destination table name in database. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction External transaction, in which bulk insert is executed. Declaration public SqlTransaction ExternalTransaction { get; } Property Value Type Description System.Data.SqlClient.SqlTransaction Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Insert(IBulkActionDataReader) Declaration public void Insert(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Insert(DataTable) Declaration public void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Insert(IDataReader) Declaration public void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader InsertAsync(IBulkActionDataReader) Declaration public Task InsertAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Returns Type Description System.Threading.Tasks.Task InsertAsync(DataTable) Declaration public Task InsertAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Returns Type Description System.Threading.Tasks.Task InsertAsync(IDataReader) Declaration public Task InsertAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Returns Type Description System.Threading.Tasks.Task Implements IBulkInsert"
  },
  "api/Kros.KORM/Kros.KORM.Query.QueryProviderFactories.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.QueryProviderFactories.html",
    "title": "Class QueryProviderFactories | Kros.Libs",
    "keywords": "Class QueryProviderFactories Represent set of registered Query provider factories. Inheritance System.Object QueryProviderFactories Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public static class QueryProviderFactories Methods GetFactory(DbConnection) Gets the factory by connection. Declaration public static IQueryProviderFactory GetFactory(DbConnection connection) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. Returns Type Description IQueryProviderFactory Instance of IQueryProviderFactory . Exceptions Type Condition System.InvalidOperationException When factory for specific connection is not registered. GetFactory(String) Gets the factory by provider name. Declaration public static IQueryProviderFactory GetFactory(string providerName) Parameters Type Name Description System.String providerName Db provider name. Returns Type Description IQueryProviderFactory Instance of IQueryProviderFactory . Exceptions Type Condition System.InvalidOperationException When factory for specific providerName is not registered. Register<TConnection>(String, IQueryProviderFactory) Registers the specified query provider factory. Declaration public static void Register<TConnection>(string providerName, IQueryProviderFactory queryProviderFactory) where TConnection : DbConnection Parameters Type Name Description System.String providerName Name of the provider. IQueryProviderFactory queryProviderFactory The query provider factory. Type Parameters Name Description TConnection The type of the connection. See Also IQueryProviderFactory"
  },
  "api/Kros.KORM/Kros.KORM.Query.IFilteredQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IFilteredQuery-1.html",
    "title": "Interface IFilteredQuery<T> | Kros.Libs",
    "keywords": "Interface IFilteredQuery<T> Represent result of filter (where) operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IFilteredQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods GroupBy(String) Add group by statement to sql query. Declaration IGroupedQuery<T> GroupBy(string groupBy) Parameters Type Name Description System.String groupBy The group by statement. Returns Type Description IGroupedQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().GroupBy(\"FirstName, LastName\"); Exceptions Type Condition System.ArgumentNullException if groupBy is null or white string. OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().OrderBy(\"FirstName DESC, LastName\"); Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.QueryExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.QueryExpression.html",
    "title": "Class QueryExpression | Kros.Libs",
    "keywords": "Class QueryExpression Base expression. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression ColumnsExpression GroupByExpression OrderByExpression SelectExpression TableExpression Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public abstract class QueryExpression : Expression Properties NodeType Gets the node type of this System.Linq.Expressions.Expression . Declaration public override ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides System.Linq.Expressions.Expression.NodeType Type Gets the static type of the expression that this System.Linq.Expressions.Expression represents. Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides System.Linq.Expressions.Expression.Type See Also System.Linq.Expressions.Expression"
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.Sql.MsAccess.MsAccessQuerySqlGenerator.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.Sql.MsAccess.MsAccessQuerySqlGenerator.html",
    "title": "Class MsAccessQuerySqlGenerator | Kros.Libs",
    "keywords": "Class MsAccessQuerySqlGenerator Generator sql query for MS Access. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor DefaultQuerySqlGenerator MsAccessQuerySqlGenerator Implements ISqlExpressionVisitor Inherited Members DefaultQuerySqlGenerator.DatabaseMapper DefaultQuerySqlGenerator.GenerateSql(Expression) DefaultQuerySqlGenerator.VisitSql(SqlExpression) DefaultQuerySqlGenerator.VisitSelect(SelectExpression) DefaultQuerySqlGenerator.VisitColumns(ColumnsExpression) DefaultQuerySqlGenerator.VisitTable(TableExpression) DefaultQuerySqlGenerator.VisitWhere(WhereExpression) DefaultQuerySqlGenerator.VisitGroupBy(GroupByExpression) DefaultQuerySqlGenerator.VisitOrderBy(OrderByExpression) DefaultQuerySqlGenerator.SelectExpression DefaultQuerySqlGenerator.LinqStringBuilder DefaultQuerySqlGenerator.LinqParameters DefaultQuerySqlGenerator.Visit(Expression) DefaultQuerySqlGenerator.VisitMethodCall(MethodCallExpression) DefaultQuerySqlGenerator.VisitVbOperatorsMethods(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitCompare(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitLinqExpression(MethodCallExpression) DefaultQuerySqlGenerator.VisitAny(MethodCallExpression) DefaultQuerySqlGenerator.VisitTake(MethodCallExpression) DefaultQuerySqlGenerator.VisitAggregate(MethodCallExpression, String) DefaultQuerySqlGenerator.VisitCount(MethodCallExpression) DefaultQuerySqlGenerator.VisitWhere(MethodCallExpression) DefaultQuerySqlGenerator.VisitFirst(MethodCallExpression) DefaultQuerySqlGenerator.VisitUnary(UnaryExpression) DefaultQuerySqlGenerator.VisitBinary(BinaryExpression) DefaultQuerySqlGenerator.GetOperator(BinaryExpression) DefaultQuerySqlGenerator.VisitConstant(ConstantExpression) DefaultQuerySqlGenerator.VisitMember(MemberExpression) DefaultQuerySqlGenerator.VisitStringMethods(MethodCallExpression) DefaultQuerySqlGenerator.BindReplace(MethodCallExpression) DefaultQuerySqlGenerator.BindIsNullOrEmpty(MethodCallExpression) DefaultQuerySqlGenerator.BindContains(MethodCallExpression) DefaultQuerySqlGenerator.BindEndWith(MethodCallExpression) DefaultQuerySqlGenerator.BindStartWith(MethodCallExpression) Namespace : Kros.KORM.Query.Sql.MsAccess Assembly : Kros.KORM.MsAccess.dll Syntax public class MsAccessQuerySqlGenerator : DefaultQuerySqlGenerator, ISqlExpressionVisitor Constructors MsAccessQuerySqlGenerator(IDatabaseMapper) Initializes a new instance of the MsAccessQuerySqlGenerator class. Declaration public MsAccessQuerySqlGenerator(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper. Methods BindAnyCondition(String) Adds any method to query. Declaration protected override string BindAnyCondition(string existsCondition) Parameters Type Name Description System.String existsCondition Returns Type Description System.String Overrides DefaultQuerySqlGenerator.BindAnyCondition(String) BindSubstring(MethodCallExpression) Declaration protected override Expression BindSubstring(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Returns Type Description System.Linq.Expressions.Expression Overrides DefaultQuerySqlGenerator.BindSubstring(MethodCallExpression) BindToLower(MethodCallExpression) Declaration protected override Expression BindToLower(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Returns Type Description System.Linq.Expressions.Expression Overrides DefaultQuerySqlGenerator.BindToLower(MethodCallExpression) BindToUpper(MethodCallExpression) Declaration protected override Expression BindToUpper(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Returns Type Description System.Linq.Expressions.Expression Overrides DefaultQuerySqlGenerator.BindToUpper(MethodCallExpression) BindTrim(MethodCallExpression) Declaration protected override Expression BindTrim(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Returns Type Description System.Linq.Expressions.Expression Overrides DefaultQuerySqlGenerator.BindTrim(MethodCallExpression) Implements ISqlExpressionVisitor See Also DefaultQuerySqlGenerator"
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.Sql.MsAccess.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.Sql.MsAccess.html",
    "title": "Namespace Kros.KORM.Query.Sql.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query.Sql.MsAccess Classes MsAccessQuerySqlGenerator Generator sql query for MS Access."
  },
  "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.html",
    "title": "Namespace Kros.Data.BulkActions.SqlServer | Kros.Libs",
    "keywords": "Namespace Kros.Data.BulkActions.SqlServer Classes SqlServerBulkActionFactory Creates instances of IBulkInsert for bulk inserting. SqlServerBulkInsert Class for fast data inserting into SQL Server. SqlServerBulkUpdate Class for fast data update for SQL Server."
  },
  "api/Kros.Utils/Kros.Data.BulkActions.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.html",
    "title": "Namespace Kros.Data.BulkActions | Kros.Libs",
    "keywords": "Namespace Kros.Data.BulkActions Classes BulkActionDataReader Wrapper, which extends simple IBulkActionDataReader to more complex System.Data.IDataReader . BulkActionFactories Representing set of registered IBulkActionFactory . BulkUpdateBase Common base class for BulkUpdate. EnumerableDataReader<T> IBulkActionDataReader implementation for any list of objects. Interfaces IBulkActionDataReader Interface for data source used in bulk actions ( IBulkInsert , IBulkUpdate ). IBulkActionFactory Creates instances of IBulkInsert and IBulkUpdate for bulk actions. IBulkInsert Interface for fast data inserting into database. IBulkUpdate Interface for fast data updating in database."
  },
  "api/Kros.Utils/Kros.UnitTests.html": {
    "href": "api/Kros.Utils/Kros.UnitTests.html",
    "title": "Namespace Kros.UnitTests | Kros.Libs",
    "keywords": "Namespace Kros.UnitTests Classes SqlServerDatabaseTestBase Base class for database integration tests on Microsoft SQL Server. The class takes care of creating and initialization of database. Inherited classes just use connection to this database. SqlServerTestHelper Helper class for unit testing using real SQL Server database."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessDataHelper.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.MsAccess.MsAccessDataHelper.html",
    "title": "Class MsAccessDataHelper | Kros.Libs",
    "keywords": "Class MsAccessDataHelper General helpers for work Microsoft Access. Inheritance System.Object MsAccessDataHelper Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class MsAccessDataHelper Fields AceProviderBase Identification of Microsoft Access ACE provider: Microsoft.ACE.OLEDB . Declaration public const string AceProviderBase = \"Microsoft.ACE.OLEDB\" Field Value Type Description System.String ClientId Identification of Microsoft Access classes (used for example in MsAccessIdGeneratorFactory , MsAccessBulkActionFactory ). Declaration public const string ClientId = \"System.Data.OleDb\" Field Value Type Description System.String JetProviderBase Identification of Microsoft Access JET provider: Microsoft.Jet.OLEDB . Declaration public const string JetProviderBase = \"Microsoft.Jet.OLEDB\" Field Value Type Description System.String Properties MsAccessAceProvider Returns string for installed Microsoft Access ACE provider (for example Microsoft.ACE.OLEDB.12.0 ). If ACE provider is not installed, empty string is returned. Declaration public static string MsAccessAceProvider { get; } Property Value Type Description System.String Remarks Provider is loaded from the system only once and the value is cached. So when no provider is found, this state is returned for any subsequent reads of the property. MsAccessJetProvider Returns string for installed Microsoft Access ACE provider (for example Microsoft.Jet.OLEDB.4.0 ). If JET provider is not installed, empty string is returned. Declaration public static string MsAccessJetProvider { get; } Property Value Type Description System.String Remarks Provider is loaded from the system only once and the value is cached. So when no provider is found, this state is returned for any subsequent reads of the property. MsAccessProvider Returns installed provider for Microsoft Access. ACE provider is preferred over JET provider (if both are available). If none provider is installed, empty string is returned. Declaration public static string MsAccessProvider { get; } Property Value Type Description System.String Methods CreateConnectionString(String, ProviderType) Creates a connection string to the database databasePath with provider type provider . Declaration public static string CreateConnectionString(string databasePath, ProviderType provider) Parameters Type Name Description System.String databasePath Path to the database. ProviderType provider Provider type, which will be usedProvider string is used for the current, installed provider, so there is no need to care about provider version. Returns Type Description System.String Returns connection string to specified database. For example Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\\data\\database.accdb; . CreateEmptyDatabase(String, ProviderType) Creates an empty Microsoft Access database at location path . Database type ( .accdb , .mdb ) is specified with provider . Declaration public static void CreateEmptyDatabase(string path, ProviderType provider) Parameters Type Name Description System.String path Path, where the database will be created. The path must be full, must contain also file name. ProviderType provider Microsoft Access database type. Remarks If the file path already exists, it will be overwritten. Based on the value of provider is created specified database type ( .accdb , or older .mdb ). But nothing is done with the file extension, so the file name will be created as path . So it is possible to create a file with .mdb extension, which actually will be database type .accdb . So the caller must provide correct file name. GetProviderString(ProviderType) For specified provider type provider returns string of the provider for use in connection string. If there is no provider available, empty string is returned. Declaration public static string GetProviderString(ProviderType provider) Parameters Type Name Description ProviderType provider Provider type. Returns Type Description System.String Method just returns the values of other properties: Ace MsAccessAceProvider Jet MsAccessJetProvider GetProviderType(IDbConnection) Returns Microsoft Access provider type used in connection connection . Declaration public static ProviderType GetProviderType(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Database connection. Returns Type Description ProviderType Provider type. GetProviderType(String) Returns Microsoft Access provider type used in connection string connectionString . Declaration public static ProviderType GetProviderType(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description ProviderType Provider type. HasProvider(ProviderType) Returns is specified Microsoft Access provider provider is available. Declaration public static bool HasProvider(ProviderType provider) Parameters Type Name Description ProviderType provider Checked provider type. Returns Type Description System.Boolean true if provider is available, otherwise false . IsExclusiveMsAccessConnection(IDbConnection) Checks if connection connection is an exclusive connection to the database. Declaration public static bool IsExclusiveMsAccessConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection The connection. Returns Type Description System.Boolean true if connection is exclusive, otherwise false . IsExclusiveMsAccessConnection(String) Checks if connection connectionString is an exclusive connection to the database. Declaration public static bool IsExclusiveMsAccessConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Returns Type Description System.Boolean true if connection is exclusive, otherwise false . IsMsAccessAceProvider(String) Checks if ACE provider is used in connectionString . Declaration public static bool IsMsAccessAceProvider(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Boolean true if ACE provider is used, otherwise false . IsMsAccessConnection(IDbConnection) Checks if database connection connection is Microsoft Access. Declaration public static bool IsMsAccessConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Tested connection. Returns Type Description System.Boolean true if connection is to Microsoft Access database, otherwise false . IsMsAccessConnection(String) Checks if database connection connectionString is Microsoft Access. Declaration public static bool IsMsAccessConnection(string connectionString) Parameters Type Name Description System.String connectionString Tested connection string. Returns Type Description System.Boolean true if connection is to Microsoft Access database, otherwise false . IsMsAccessJetProvider(String) Checks if JET provider is used in connectionString . Declaration public static bool IsMsAccessJetProvider(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Boolean true if JET provider is used, otherwise false ."
  },
  "api/Kros.Utils/Kros.Data.Schema.IndexSchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IndexSchemaCollection.html",
    "title": "Class IndexSchemaCollection | Kros.Libs",
    "keywords": "Class IndexSchemaCollection List of indexes for table TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < IndexSchema > System.Collections.ObjectModel.KeyedCollection < System.String , IndexSchema > IndexSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexSchemaCollection : KeyedCollection<string, IndexSchema>, IList<IndexSchema>, ICollection<IndexSchema>, IList, ICollection, IReadOnlyList<IndexSchema>, IReadOnlyCollection<IndexSchema>, IEnumerable<IndexSchema>, IEnumerable Remarks To the indexes added to this list is automatically set their Table . Index can belong only to one table. Constructors IndexSchemaCollection(TableSchema) Creates a new index list for table . Declaration public IndexSchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Table to which index list belongs. Exceptions Type Condition System.ArgumentNullException Value of table is null . Properties Table The table to which belongs this IndexSchemaCollection . Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods Add(String) Creates an instance of index with name indexName . Created index is added to the list. Declaration public IndexSchema Add(string indexName) Parameters Type Name Description System.String indexName Name of the index. Returns Type Description IndexSchema Created index schema. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. Add(String, IndexType) Creates an instance of index of type indexType , with name indexName . Created index is added to the list. Declaration public IndexSchema Add(string indexName, IndexType indexType) Parameters Type Name Description System.String indexName Name of the index. IndexType indexType Type of the index. Returns Type Description IndexSchema Created index schema. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. Add(String, IndexType, Boolean) Creates an instance of index of type indexType , with name indexName and setting if the index is clustered . Created index is added to the list. Declaration public IndexSchema Add(string indexName, IndexType indexType, bool clustered) Parameters Type Name Description System.String indexName Name of the index. IndexType indexType Type of the index. System.Boolean clustered Specifies, if the index is CLUSTERED . Returns Type Description IndexSchema Created index schema. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. GetKeyForItem(IndexSchema) Declaration protected override string GetKeyForItem(IndexSchema item) Parameters Type Name Description IndexSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.GetKeyForItem(Kros.Data.Schema.IndexSchema) InsertItem(Int32, IndexSchema) Declaration protected override void InsertItem(int index, IndexSchema item) Parameters Type Name Description System.Int32 index IndexSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.InsertItem(System.Int32, Kros.Data.Schema.IndexSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Utils/Kros.Data.Schema.ColumnSchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ColumnSchemaCollection.html",
    "title": "Class ColumnSchemaCollection | Kros.Libs",
    "keywords": "Class ColumnSchemaCollection List of columns for table TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < ColumnSchema > System.Collections.ObjectModel.KeyedCollection < System.String , ColumnSchema > ColumnSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ColumnSchemaCollection : KeyedCollection<string, ColumnSchema>, IList<ColumnSchema>, ICollection<ColumnSchema>, IList, ICollection, IReadOnlyList<ColumnSchema>, IReadOnlyCollection<ColumnSchema>, IEnumerable<ColumnSchema>, IEnumerable Remarks To the columns added to this list is automatically set their Table . The column can belong only to one table. Constructors ColumnSchemaCollection(TableSchema) Creates a new column list for table . Declaration public ColumnSchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Table to which column list belongs. Exceptions Type Condition System.ArgumentNullException Value of table is null . Properties Table The table to which belongs this ColumnSchemaCollection . Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods GetKeyForItem(ColumnSchema) Declaration protected override string GetKeyForItem(ColumnSchema item) Parameters Type Name Description ColumnSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.GetKeyForItem(Kros.Data.Schema.ColumnSchema) InsertItem(Int32, ColumnSchema) Declaration protected override void InsertItem(int index, ColumnSchema item) Parameters Type Name Description System.Int32 index ColumnSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.InsertItem(System.Int32, Kros.Data.Schema.ColumnSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.IBulkInsert.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.IBulkInsert.html",
    "title": "Interface IBulkInsert | Kros.Libs",
    "keywords": "Interface IBulkInsert Interface for fast data inserting into database. Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkInsert : IDisposable Properties BatchSize Row count for batch sent to database. If 0, batch size is not limited. Declaration int BatchSize { get; set; } Property Value Type Description System.Int32 BulkInsertTimeout Timeout for operation in seconds. If 0, duration of operation is not limited. Declaration int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 DestinationTableName Destination table name in database. Declaration string DestinationTableName { get; set; } Property Value Type Description System.String Methods Insert(IBulkActionDataReader) Inserts all data from reader . Declaration void Insert(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Insert(DataTable) Inserts all rows from table table . Declaration void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Source table. Insert(IDataReader) Inserts all data from reader . Declaration void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. InsertAsync(IBulkActionDataReader) Asynchronously inserts all data from reader . Declaration Task InsertAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. InsertAsync(DataTable) Asynchronously inserts all rows from table table . Declaration Task InsertAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Source table. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. InsertAsync(IDataReader) Asynchronously inserts all data from reader . Declaration Task InsertAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation."
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.GroupByExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.GroupByExpression.html",
    "title": "Class GroupByExpression | Kros.Libs",
    "keywords": "Class GroupByExpression Expression, which represent GROUP BY statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression GroupByExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class GroupByExpression : QueryExpression Constructors GroupByExpression(String) Initializes a new instance of the GroupByExpression class. Declaration public GroupByExpression(string groupBy) Parameters Type Name Description System.String groupBy The groupBy part of sql. Remarks Group by columns are separate by , GroupByExpression(String[]) Initializes a new instance of the GroupByExpression class. Declaration public GroupByExpression(params string[] groupBy) Parameters Type Name Description System.String [] groupBy The groupBy. Fields GroupByStatement The group by statement Declaration public const string GroupByStatement = \"GROUP BY\" Field Value Type Description System.String Properties GroupByPart Gets or sets the group by part. Declaration public string GroupByPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) Create<T, TResult>(Func<T, TResult>) Creates the GroupByExpression by selector. Declaration public static GroupByExpression Create<T, TResult>(Func<T, TResult> selector) where T : new() Parameters Type Name Description System.Func <T, TResult> selector The selector. Returns Type Description GroupByExpression GroupByExpression Type Parameters Name Description T Type of model class. TResult The type of the result. See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerable-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerable-1.html",
    "title": "Class ModelBuilder.ModelBuilderEnumerable<T> | Kros.Libs",
    "keywords": "Class ModelBuilder.ModelBuilderEnumerable<T> Enumerable which support iteration over the materialized models. Inheritance System.Object ModelBuilder.ModelBuilderEnumerable<T> Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilderEnumerable<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. See Also System.Collections.Generic.IEnumerable <T>"
  },
  "api/Kros.KORM/Kros.KORM.Exceptions.MissingPrimaryKeyException.html": {
    "href": "api/Kros.KORM/Kros.KORM.Exceptions.MissingPrimaryKeyException.html",
    "title": "Class MissingPrimaryKeyException | Kros.Libs",
    "keywords": "Class MissingPrimaryKeyException Exception class for missing primary key. Inheritance System.Object System.Exception MissingPrimaryKeyException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class MissingPrimaryKeyException : Exception, ISerializable, _Exception Constructors MissingPrimaryKeyException(String, String) Initializes a new instance of the MissingPrimaryKeyException class. Declaration public MissingPrimaryKeyException(string message, string tableName) Parameters Type Name Description System.String message Exception message. System.String tableName Table name which doesn't have primary key. Properties TableName Table name which doesn't have primary key. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.TableExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.TableExpression.html",
    "title": "Class TableExpression | Kros.Libs",
    "keywords": "Class TableExpression Expression, which represent FROM statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression TableExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class TableExpression : QueryExpression Constructors TableExpression(String) Initializes a new instance of the TableExpression class. Declaration public TableExpression(string table) Parameters Type Name Description System.String table The table (or join). Fields FromStatement From statement Declaration public const string FromStatement = \"FROM\" Field Value Type Description System.String Properties TablePart Gets the table part. Declaration public string TablePart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.ArgsExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.ArgsExpression.html",
    "title": "Class ArgsExpression | Kros.Libs",
    "keywords": "Class ArgsExpression Base class for args expression. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression SqlExpression WhereExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public abstract class ArgsExpression : QueryExpression Properties Parameters Gets the parameters. Declaration public IEnumerable<object> Parameters { get; protected set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Object > Sql Sql. Declaration public string Sql { get; protected set; } Property Value Type Description System.String See Also System.Linq.Expressions.Expression"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.KeyAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.KeyAttribute.html",
    "title": "Class KeyAttribute | Kros.Libs",
    "keywords": "Class KeyAttribute Attribute, which describe property, which are part of primary key. Inheritance System.Object System.Attribute KeyAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class KeyAttribute : Attribute, _Attribute Constructors KeyAttribute() Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute() KeyAttribute(AutoIncrementMethodType) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(AutoIncrementMethodType autoIncrementMethodType) Parameters Type Name Description AutoIncrementMethodType autoIncrementMethodType Type of primary key auto increment method. KeyAttribute(String) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(string name) Parameters Type Name Description System.String name The key name. KeyAttribute(String, AutoIncrementMethodType) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(string name, AutoIncrementMethodType autoIncrementMethodType) Parameters Type Name Description System.String name The key name. AutoIncrementMethodType autoIncrementMethodType Type of primary key auto increment method. Properties AutoIncrementMethodType Type of primary key auto increment method. Declaration public AutoIncrementMethodType AutoIncrementMethodType { get; } Property Value Type Description AutoIncrementMethodType Name Gets the name of key. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Caching.Cache-2.html": {
    "href": "api/Kros.Utils/Kros.Caching.Cache-2.html",
    "title": "Class Cache<TKey, TValue> | Kros.Libs",
    "keywords": "Class Cache<TKey, TValue> Class for caching data. Inheritance System.Object Cache<TKey, TValue> Implements ICache <TKey, TValue> Namespace : Kros.Caching Assembly : Kros.Utils.dll Syntax public class Cache<TKey, TValue> : ICache<TKey, TValue> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Constructors Cache() Initializes a new instance of the Cache<TKey, TValue> class. Declaration public Cache() Cache(IEqualityComparer<TKey>) Initializes a new instance of the Cache<TKey, TValue> class. Declaration public Cache(IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <TKey> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing keys. Properties Count Gets the count of cached data. Declaration public int Count { get; } Property Value Type Description System.Int32 Methods Clear() Clears the cache. Declaration public void Clear() Get(TKey, Func<TValue>) Gets the cached value by key. Declaration public TValue Get(TKey key, Func<TValue> factory) Parameters Type Name Description TKey key The key. System.Func <TValue> factory The factory for creating value, if doesn't exist in cahce. Returns Type Description TValue Value from Cache. Remarks If value key doesn't exist in cache, then factory is use for creating value and value is set to cache. Implements ICache<TKey, TValue> See Also ICache <TKey, TValue>"
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.ParameterExtractingExpressionVisitor.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.ParameterExtractingExpressionVisitor.html",
    "title": "Class ParameterExtractingExpressionVisitor | Kros.Libs",
    "keywords": "Class ParameterExtractingExpressionVisitor Class for extracting parameters from Expression. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor ParameterExtractingExpressionVisitor Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class ParameterExtractingExpressionVisitor : ExpressionVisitor Methods ExtractParametersToCommand(DbCommand, Expression) Extracts the parrameters to command. Declaration public static void ExtractParametersToCommand(DbCommand command, Expression expression) Parameters Type Name Description System.Data.Common.DbCommand command The command. System.Linq.Expressions.Expression expression The expression. Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. Declaration public override Expression Visit(Expression node) Parameters Type Name Description System.Linq.Expressions.Expression node The expression to visit. Returns Type Description System.Linq.Expressions.Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression) See Also System.Linq.Expressions.ExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.IQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IQuery-1.html",
    "title": "Interface IQuery<T> | Kros.Libs",
    "keywords": "Interface IQuery<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. Inherited Members IProjectionQuery<T>.Where(RawSqlString, Object[]) IProjectionQuery<T>.Where(FormattableString) IProjectionQuery<T>.FirstOrDefault(RawSqlString, Object[]) IProjectionQuery<T>.FirstOrDefault(FormattableString) IProjectionQuery<T>.Any(RawSqlString, Object[]) IProjectionQuery<T>.Any(FormattableString) IProjectionQuery<T>.OrderBy(String) IProjectionQuery<T>.GroupBy(String) IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQuery<T> : IProjectionQuery<T>, IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Remarks When you don't use Select or From function, than default values are taken from model. Examples You can use standard string sql query for querying data. var people = database.Query<Person>().Sql( \"SELECT p.Id, FirstName, LastName, PostCode \" + \"FROM Person \" + \"JOIN Address ON (Person.AddressId = Address.Id) \" + \"WHERE Age > @1\", 18); foreach (var person in people) { Console.WriteLine(person.FirstName); } You can use sql query builder. var people = database.Query<Person>() .Select(\"p.Id\", \"FirstName\", \"LastName\", \"PostCode\") .From(\"Person JOIN Address ON (Person.AddressId = Address.Id)\") .Where(\"Age > @1\", 18); foreach (var person in people) { Console.WriteLine(person.FirstName); } Methods From(String) Add FROM part to sql query. Declaration IProjectionQuery<T> From(string table) Parameters Type Name Description System.String table Table name or join. Returns Type Description IProjectionQuery <T> Query for enumerable models. Remarks When From method is not call, query take table by T model type. Examples var people = database.Query<Person>().From(\"Person LEFT JOIN Avatar ON (Person.Id = Avatar.PersonId)\"); Exceptions Type Condition System.ArgumentNullException if table is null or white string. Select(String) Add select part to sql. Declaration IQuery<T> Select(string selectPart) Parameters Type Name Description System.String selectPart The columns for select clausule. (Separate by ,) Returns Type Description IQuery <T> Query for enumerable models. Remarks When Select method is not call, query take columns by T model. Examples var people = database.Query<Person>().Select(\"Id, FirstName\"); Exceptions Type Condition System.ArgumentNullException if sqlPart is null or white string. Select(String[]) Add columns to sql. Declaration IQuery<T> Select(params string[] columns) Parameters Type Name Description System.String [] columns The columns for select clausule. Returns Type Description IQuery <T> Query for enumerable models. Remarks When Select method is not call, query take columns by T model. Examples var people = database.Query<Person>().Select(\"Id\", \"FirstName\"); Select<TResult>(Func<T, TResult>) Add columns to sql Declaration IQuery<T> Select<TResult>(Func<T, TResult> selector) Parameters Type Name Description System.Func <T, TResult> selector The selector. Returns Type Description IQuery <T> Query for enumerable models. Type Parameters Name Description TResult The type of the result. Remarks When Select method is not call, query take columns by T model. Examples var people = database.Query<Person>().Select(p => new { p.Id, p.FirstName }); Exceptions Type Condition System.ArgumentNullException if selector is null. Sql(RawSqlString, Object[]) Create query from sql statement. Declaration IQueryBase<T> Sql(RawSqlString sql, params object[] args) Parameters Type Name Description RawSqlString sql The SQL for executing in server. System.Object [] args The arguments. Returns Type Description IQueryBase <T> Query from sql. Remarks Sql must be server specific. Because no translation is provide. Exceptions Type Condition System.ArgumentNullException if sql is null or white string. Sql(FormattableString) Create query from sql statement. Declaration IQueryBase<T> Sql(FormattableString sql) Parameters Type Name Description System.FormattableString sql The SQL for executing in server. Returns Type Description IQueryBase <T> Query from sql. Remarks Sql must be server specific. Because no translation is provide. Examples var id = 15; var name = \"Name\"; var items = query.Sql($\"SELECT * FROM Table WHERE Id = {id} AND Name = {name}\"); Exceptions Type Condition System.ArgumentNullException if sql is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlServerIdGeneratorFactory.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlServerIdGeneratorFactory.html",
    "title": "Class SqlServerIdGeneratorFactory | Kros.Libs",
    "keywords": "Class SqlServerIdGeneratorFactory Creates an instances of SqlServerIdGenerator for specified database. Inheritance System.Object SqlServerIdGeneratorFactory Implements IIdGeneratorFactory Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerIdGeneratorFactory : IIdGeneratorFactory Examples Constructors SqlServerIdGeneratorFactory(SqlConnection) Initializes a new instance of the SqlServerIdGeneratorFactory class. Declaration public SqlServerIdGeneratorFactory(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. ID generators create IDs for tables in this database. SqlServerIdGeneratorFactory(String) Initializes a new instance of the SqlServerIdGeneratorFactory class. Declaration public SqlServerIdGeneratorFactory(string connectionString) Parameters Type Name Description System.String connectionString Database connection string. ID generators create IDs for tables in this database. Methods GetGenerator(String) Declaration public IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Returns Type Description IIdGenerator GetGenerator(String, Int32) Declaration public IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName System.Int32 batchSize Returns Type Description IIdGenerator Register() Registers factory methods for creating an instance of factory into IdGeneratorFactories . Declaration public static void Register() Implements IIdGeneratorFactory See Also SqlServerIdGenerator IdGeneratorFactories"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.EnumerableDataReader-1.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.EnumerableDataReader-1.html",
    "title": "Class EnumerableDataReader<T> | Kros.Libs",
    "keywords": "Class EnumerableDataReader<T> IBulkActionDataReader implementation for any list of objects. Inheritance System.Object EnumerableDataReader<T> Implements IBulkActionDataReader Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public class EnumerableDataReader<T> : IBulkActionDataReader, IDisposable Type Parameters Name Description T Object data type. Remarks Class implements IBulkActionDataReader for any list of objects, so this list can be easily used in bulk actions ( IBulkInsert , IBulkUpdate ). Constructors EnumerableDataReader(IEnumerable<T>, IEnumerable<String>) Creates instance of reader over data with list of columns columnNames . Declaration public EnumerableDataReader(IEnumerable<T> data, IEnumerable<string> columnNames) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> data Data which reader operates with. System.Collections.Generic.IEnumerable < System.String > columnNames List of columns with which reader works. For every column must exists property with the same name in object T . Exceptions Type Condition System.ArgumentNullException Value of data , or columnNames is null . System.ArgumentException List columnNames is empty, i.e. does not contain any value. System.InvalidOperationException Class T does not have all properties defined in columnNames . Properties FieldCount Columns count. Declaration public int FieldCount { get; } Property Value Type Description System.Int32 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetName(Int32) Column name at index i . Declaration public string GetName(int i) Parameters Type Name Description System.Int32 i Column index. Returns Type Description System.String Column name. GetOrdinal(String) Index of column with name . Declaration public int GetOrdinal(string name) Parameters Type Name Description System.String name Column name. Returns Type Description System.Int32 Index. GetValue(Int32) Returns value of column at index i . Declaration public object GetValue(int i) Parameters Type Name Description System.Int32 i Column index. Returns Type Description System.Object Column value. Read() Moves to next record. Declaration public bool Read() Returns Type Description System.Boolean true if move was successfull, false if there is no next record. Implements IBulkActionDataReader"
  },
  "api/Kros.KORM/Kros.KORM.Query.SqlServerQueryProviderFactory.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.SqlServerQueryProviderFactory.html",
    "title": "Class SqlServerQueryProviderFactory | Kros.Libs",
    "keywords": "Class SqlServerQueryProviderFactory Factory which create sql server provider. Inheritance System.Object SqlServerQueryProviderFactory Implements IQueryProviderFactory Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class SqlServerQueryProviderFactory : IQueryProviderFactory Methods Create(ConnectionStringSettings, IModelBuilder, IDatabaseMapper) Creates the SqlServer query provider. Declaration public IQueryProvider Create(ConnectionStringSettings connectionString, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of SqlServerQueryProvider . Create(DbConnection, IModelBuilder, IDatabaseMapper) Creates the SqlServer query provider. Declaration public IQueryProvider Create(DbConnection connection, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of SqlServerQueryProvider . Implements IQueryProviderFactory"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.OrderByExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.OrderByExpression.html",
    "title": "Class OrderByExpression | Kros.Libs",
    "keywords": "Class OrderByExpression Expression, which represent ORDER BY statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression OrderByExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class OrderByExpression : QueryExpression Constructors OrderByExpression(String) Initializes a new instance of the OrderByExpression class. Declaration public OrderByExpression(string orderBy) Parameters Type Name Description System.String orderBy The orderBy part of sql. Remarks Order by columns are separate by , OrderByExpression(String[]) Initializes a new instance of the OrderByExpression class. Declaration public OrderByExpression(params string[] columns) Parameters Type Name Description System.String [] columns The orderBy. Fields OrderByStatement The group by statement Declaration public const string OrderByStatement = \"ORDER BY\" Field Value Type Description System.String Properties OrderByPart Gets or sets the group by part. Declaration public string OrderByPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Exceptions.CompositePrimaryKeyException.html": {
    "href": "api/Kros.KORM/Kros.KORM.Exceptions.CompositePrimaryKeyException.html",
    "title": "Class CompositePrimaryKeyException | Kros.Libs",
    "keywords": "Class CompositePrimaryKeyException Exception class for composite primary key. Inheritance System.Object System.Exception CompositePrimaryKeyException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class CompositePrimaryKeyException : Exception, ISerializable, _Exception Constructors CompositePrimaryKeyException(String, String) Initializes a new instance of the CompositePrimaryKeyException class. Declaration public CompositePrimaryKeyException(string message, string tableName) Parameters Type Name Description System.String message Exception message. System.String tableName Table name which has composite primary key. Properties TableName Table name which has composite primary key. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Utils.DateTimeProvider.html": {
    "href": "api/Kros.Utils/Kros.Utils.DateTimeProvider.html",
    "title": "Class DateTimeProvider | Kros.Libs",
    "keywords": "Class DateTimeProvider Class for \"freezing\" date and time to constant value. Usable for example in tests. Inheritance System.Object DateTimeProvider Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public class DateTimeProvider : IDisposable Remarks Current time is accessible in Now property. Own time can be injected using InjectActualDateTime(DateTime) . private void BasicExample() { using (DateTimeProvider.InjectActualDateTime(new DateTime(1978, 12, 10))) { Console.WriteLine(DateTimeProvider.Now.ToString(\"d.M.yyyy\")); // Writes 10.12.1978 } } Set value is valid for current thread only, so it is possible to have different values in different threads. Properties Now Returns own date and time, if it was set by InjectActualDateTime(DateTime) . If it was not set, System.DateTime.Now is returned. Declaration public static DateTime Now { get; } Property Value Type Description System.DateTime Methods Dispose() Declaration public void Dispose() InjectActualDateTime(DateTime) Sets time actualDateTime , which will be returned in Now property. Use it in using block. Declaration public static IDisposable InjectActualDateTime(DateTime actualDateTime) Parameters Type Name Description System.DateTime actualDateTime Required date and time value. Returns Type Description System.IDisposable See Also System.IDisposable"
  },
  "api/Kros.Utils/Kros.Data.Schema.ForeignKeySchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ForeignKeySchemaCollection.html",
    "title": "Class ForeignKeySchemaCollection | Kros.Libs",
    "keywords": "Class ForeignKeySchemaCollection List of foreign keys for table TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < ForeignKeySchema > System.Collections.ObjectModel.KeyedCollection < System.String , ForeignKeySchema > ForeignKeySchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ForeignKeySchemaCollection : KeyedCollection<string, ForeignKeySchema>, IList<ForeignKeySchema>, ICollection<ForeignKeySchema>, IList, ICollection, IReadOnlyList<ForeignKeySchema>, IReadOnlyCollection<ForeignKeySchema>, IEnumerable<ForeignKeySchema>, IEnumerable Remarks To the foreign keys added to this list is automatically set their Table . Foreign key can belong only to one table. Constructors ForeignKeySchemaCollection(TableSchema) Creates a new foreign key list for table . Declaration public ForeignKeySchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Table to which foreign key list belongs. Exceptions Type Condition System.ArgumentNullException Value of table is null . Methods Add(String, String, IEnumerable<String>, String, IEnumerable<String>) Creates a definition of foreign key with the name and adds it to the list. Columns primaryKeyTableColumns in parent table primaryKeyTableName are referenced in columns foreignKeyTableColumns of child table foreignKeyTableName . Declaration public ForeignKeySchema Add(string name, string primaryKeyTableName, IEnumerable<string> primaryKeyTableColumns, string foreignKeyTableName, IEnumerable<string> foreignKeyTableColumns) Parameters Type Name Description System.String name Name of the foreign key. System.String primaryKeyTableName . System.Collections.Generic.IEnumerable < System.String > primaryKeyTableColumns List of columns in parent table. System.String foreignKeyTableName . System.Collections.Generic.IEnumerable < System.String > foreignKeyTableColumns List of columns in child table. Returns Type Description ForeignKeySchema Exceptions Type Condition System.ArgumentNullException Value of any argument is null . System.ArgumentException Add(String, String, String, String, String) Creates a definition of foreign key with the name and adds it to the list. Column primaryKeyTableColumn in parent table primaryKeyTableName is referenced in column foreignKeyTableColumn of child table foreignKeyTableName . Declaration public ForeignKeySchema Add(string name, string primaryKeyTableName, string primaryKeyTableColumn, string foreignKeyTableName, string foreignKeyTableColumn) Parameters Type Name Description System.String name Name of the foreign key. System.String primaryKeyTableName . System.String primaryKeyTableColumn Column name in primary key table. System.String foreignKeyTableName . System.String foreignKeyTableColumn Column name in foreign key table. Returns Type Description ForeignKeySchema Created foreign key. Exceptions Type Condition System.ArgumentNullException Value of any parameter is null . System.ArgumentException Value of any parameter is empty string, or string containing only whitespace characters. GetKeyForItem(ForeignKeySchema) Declaration protected override string GetKeyForItem(ForeignKeySchema item) Parameters Type Name Description ForeignKeySchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.GetKeyForItem(Kros.Data.Schema.ForeignKeySchema) InsertItem(Int32, ForeignKeySchema) Declaration protected override void InsertItem(int index, ForeignKeySchema item) Parameters Type Name Description System.Int32 index ForeignKeySchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.InsertItem(System.Int32, Kros.Data.Schema.ForeignKeySchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.KORM/Kros.KORM.Exceptions.html": {
    "href": "api/Kros.KORM/Kros.KORM.Exceptions.html",
    "title": "Namespace Kros.KORM.Exceptions | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Exceptions Classes AlreadyInCollectionException Exception class for item already exists in the collection. CompositePrimaryKeyException Exception class for composite primary key. MissingPrimaryKeyException Exception class for missing primary key."
  },
  "api/Kros.KORM/Kros.KORM.CommandGenerator.ICommandGenerator-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.CommandGenerator.ICommandGenerator-1.html",
    "title": "Interface ICommandGenerator<T> | Kros.Libs",
    "keywords": "Interface ICommandGenerator<T> Iterface, which describes generating single-table commands that are used to commit changes made to a DbSet with the associated database. Namespace : Kros.KORM.CommandGenerator Assembly : Kros.KORM.dll Syntax public interface ICommandGenerator<T> Type Parameters Name Description T Methods FillCommand(DbCommand, T) Fills command's parameters with values from item . Declaration void FillCommand(DbCommand command, T item) Parameters Type Name Description System.Data.Common.DbCommand command Command which parameters are filled. T item Item, from which command is filled. Exceptions Type Condition System.ArgumentNullException Either command or item is null . GetColumnValue(ColumnInfo, T) Gets value from the specific column. Declaration object GetColumnValue(ColumnInfo columnInfo, T item) Parameters Type Name Description ColumnInfo columnInfo The specific column. T item The item whose value will be returned. Returns Type Description System.Object Value from the specific column. GetDeleteCommand() Gets the automatically generated DbCommand object required to perform deletions on the database. Declaration DbCommand GetDeleteCommand() Returns Type Description System.Data.Common.DbCommand Delete command. Exceptions Type Condition MissingPrimaryKeyException GetDeleteCommand doesn't supported when entity doesn't have primary key. GetDeleteCommands(IEnumerable<T>) Gets the automatically generated DbCommands object required to perform deletions on the database. Declaration IEnumerable<DbCommand> GetDeleteCommands(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items Type class of model collection. Returns Type Description System.Collections.Generic.IEnumerable < System.Data.Common.DbCommand > Delete command collection. Exceptions Type Condition MissingPrimaryKeyException GetDeleteCommands doesn't supported when entity doesn't have primary key. GetInsertCommand() Gets the automatically generated DbCommand object required to perform insertions on the database. Declaration DbCommand GetInsertCommand() Returns Type Description System.Data.Common.DbCommand Insert command. GetQueryColumns() Get columns for query. Declaration IEnumerable<ColumnInfo> GetQueryColumns() Returns Type Description System.Collections.Generic.IEnumerable < ColumnInfo > GetUpdateCommand() Gets the automatically generated DbCommand object required to perform updates on the database Declaration DbCommand GetUpdateCommand() Returns Type Description System.Data.Common.DbCommand Update command. Exceptions Type Condition MissingPrimaryKeyException GetUpdateCommand doesn't supported when entity doesn't have primary key."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.html",
    "title": "Namespace Kros.KORM.Materializer | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Materializer Classes DynamicMethodModelFactory Modelfactory, which materialize model by dynamic method delegates. ModelBuilder ModelBuilder, which know materialize data from Db to objects. ModelBuilder.ModelBuilderEnumerable<T> Enumerable which support iteration over the materialized models. ModelBuilder.ModelBuilderEnumerator<T> Enumerator that iterates through the materialized models. Interfaces IMaterialize Specifies that this object supports notification about materializing. IModelBuilder Interface for ModelBuilder, which know materialize data from Ado to objects. IModelFactory Interface for factory, which know materialize model from database."
  },
  "api/Kros.Utils/Kros.Data.IIdGeneratorFactory.html": {
    "href": "api/Kros.Utils/Kros.Data.IIdGeneratorFactory.html",
    "title": "Interface IIdGeneratorFactory | Kros.Libs",
    "keywords": "Interface IIdGeneratorFactory Interface for factory classes, which create instances of IIdGenerator . Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public interface IIdGeneratorFactory Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; }; } } } Methods GetGenerator(String) Creates an instance of IIdGenerator for table tableName . Declaration IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Table for which IDs will be generated. Returns Type Description IIdGenerator The instance of IIdGenerator . GetGenerator(String, Int32) Creates an instance of IIdGenerator for table tableName with specified batchSize . Declaration IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName Table for which IDs will be generated. System.Int32 batchSize IDs batch size. This number of IDs will be reserved for later use. Returns Type Description IIdGenerator The instance of IIdGenerator . See Also SqlServerIdGeneratorFactory IdGeneratorFactories"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.html",
    "title": "Namespace Kros.Data.Schema.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.Data.Schema.MsAccess Classes MsAccessCacheKeyGenerator Cache key generator for Microsoft Access used by DatabaseSchemaCache . MsAccessColumnSchema Table's column schema for Microsoft Access. MsAccessParseDefaultValueEventArgs Arguments for the event ParseDefaultValue . MsAccessSchemaLoader The implementation of IDatabaseSchemaLoader<T> for Microsoft Access. MsAccessSchemaLoader.ColumnsSchemaNames MsAccessSchemaLoader.IndexesSchemaNames MsAccessSchemaLoader.ProceduresSchemaNames MsAccessSchemaLoader.SchemaNames MsAccessSchemaLoader.TablesSchemaNames MsAccessSchemaLoader.TableTypes MsAccessSchemaLoader.ViewsSchemaNames"
  },
  "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.MsAccessQueryProvider.html": {
    "href": "api/Kros.KORM.MsAccess/Kros.KORM.Query.MsAccess.MsAccessQueryProvider.html",
    "title": "Class MsAccessQueryProvider | Kros.Libs",
    "keywords": "Class MsAccessQueryProvider Provider, which know execute query for MsAccess. Inheritance System.Object QueryProvider MsAccessQueryProvider Implements IQueryProvider Inherited Members QueryProvider.SetParameterDbType(DbParameter, String, String) QueryProvider.Execute<T>(IQuery<T>) QueryProvider.ExecuteScalar<T>(IQuery<T>) QueryProvider.ExecuteInTransactionAsync(Func<Task>) QueryProvider.ExecuteNonQueryCommand(IDbCommand) QueryProvider.ExecuteNonQueryCommandAsync(DbCommand) QueryProvider.ExecuteNonQuery(String) QueryProvider.ExecuteNonQuery(String, CommandParameterCollection) QueryProvider.ExecuteStoredProcedure<TResult>(String) QueryProvider.ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) QueryProvider.GetCommandForCurrentTransaction() QueryProvider.BeginTransaction(IsolationLevel) QueryProvider.CreateIdGenerator(String, Int32) QueryProvider.CreateQuery(Expression) QueryProvider.CreateQuery<TElement>(Expression) QueryProvider.Execute(Expression) QueryProvider.Execute<TResult>(Expression) QueryProvider.GetCurrentTransaction() QueryProvider.ConnectionString QueryProvider.IsExternalConnection QueryProvider.Connection QueryProvider.Dispose(Boolean) QueryProvider.Dispose() Namespace : Kros.KORM.Query.MsAccess Assembly : Kros.KORM.MsAccess.dll Syntax public class MsAccessQueryProvider : QueryProvider, IQueryProvider, IQueryProvider, IDisposable Constructors MsAccessQueryProvider(ConnectionStringSettings, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the MsAccessQueryProvider class. Declaration public MsAccessQueryProvider(ConnectionStringSettings connectionString, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string settings. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. MsAccessQueryProvider(DbConnection, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the MsAccessQueryProvider class. Declaration public MsAccessQueryProvider(DbConnection connection, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. Properties DbProviderFactory Vráti System.Data.OleDb.OleDbFactory.Instance . Declaration public override DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Overrides QueryProvider.DbProviderFactory Methods CreateBulkInsert() Creates instance of MsAccessBulkInsert . Declaration public override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of MsAccessBulkInsert . Overrides QueryProvider.CreateBulkInsert() CreateBulkUpdate() Creates instance of MsAccessBulkUpdate . Declaration public override IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of MsAccessBulkUpdate . Overrides QueryProvider.CreateBulkUpdate() GetSchemaLoader() Returns instance of MsAccessSchemaLoader . Declaration protected override IDatabaseSchemaLoader GetSchemaLoader() Returns Type Description IDatabaseSchemaLoader Overrides QueryProvider.GetSchemaLoader() Implements IQueryProvider See Also QueryProvider"
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlServerDataHelper.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlServerDataHelper.html",
    "title": "Class SqlServerDataHelper | Kros.Libs",
    "keywords": "Class SqlServerDataHelper General helpers for Microsoft SQL Server. Inheritance System.Object SqlServerDataHelper Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public static class SqlServerDataHelper Fields ClientId Identification of Microsoft SQL Server classes (used for example in SqlServerIdGeneratorFactory , SqlServerBulkActionFactory ). Declaration public const string ClientId = \"System.Data.SqlClient\" Field Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.html",
    "title": "Namespace Kros.Data.BulkActions.MsAccess | Kros.Libs",
    "keywords": "Namespace Kros.Data.BulkActions.MsAccess Classes MsAccessBulkActionFactory Creates instances of IBulkInsert for bulk inserting. MsAccessBulkInsert The calss for fast bulk insert big amount of data into Microsoft Access database. MsAccessBulkInsertColumn Definition of column for bulk insert into Microsoft Access database from CSV file. ( MsAccessBulkInsert ). MsAccessBulkInsertColumnCollection Collection of columns for bulk insert into Microsoft Access database from CSV file ( MsAccessBulkInsert ). MsAccessBulkUpdate Class for fast bulk data update for Microsoft Access. Enums BulkInsertColumnType Column type for bulk insert into Microsoft Access database from file."
  },
  "api/Kros.Utils.MsAccess/Kros.UnitTests.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.UnitTests.html",
    "title": "Namespace Kros.UnitTests | Kros.Libs",
    "keywords": "Namespace Kros.UnitTests Classes MsAccessTestHelper Helper class for unit tests, if there is a need for real database in tests. It creates temporary empty database for testing. This database is automatically deleted after finishing the work."
  },
  "api/Kros.KORM/Kros.KORM.Query.IOrderedQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IOrderedQuery-1.html",
    "title": "Interface IOrderedQuery<T> | Kros.Libs",
    "keywords": "Interface IOrderedQuery<T> Represents result of a sorting operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IOrderedQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. See Also IQueryBase <T>"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.SqlExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.SqlExpression.html",
    "title": "Class SqlExpression | Kros.Libs",
    "keywords": "Class SqlExpression Expression, which represent sql query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression SqlExpression Inherited Members ArgsExpression.Sql ArgsExpression.Parameters QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class SqlExpression : ArgsExpression Constructors SqlExpression(RawSqlString, Object[]) Initializes a new instance of the SqlExpression class. Declaration public SqlExpression(RawSqlString sqlQuery, params object[] args) Parameters Type Name Description RawSqlString sqlQuery The SQL query. System.Object [] args Where args. Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.DbSet-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.DbSet-1.html",
    "title": "Class DbSet<T> | Kros.Libs",
    "keywords": "Class DbSet<T> Represents the collection of all items that can be saved to the database, of a given type. Inheritance System.Object DbSet<T> Implements IDbSet <T> Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class DbSet<T> : IDbSet<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type that defines the set. Constructors DbSet(ICommandGenerator<T>, IQueryProvider, IQueryBase<T>, TableInfo) Initializes a new instance of the DbSet<T> class. Declaration public DbSet(ICommandGenerator<T> commandGenerator, IQueryProvider provider, IQueryBase<T> query, TableInfo tableInfo) Parameters Type Name Description ICommandGenerator <T> commandGenerator Generator to create commands. IQueryProvider provider Provider to executing commands. IQueryBase <T> query Query. TableInfo tableInfo Information about table from database. Properties AddedItems List of items in Added state. Declaration public IEnumerable<T> AddedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> DeletedItems List of items in Deleted state. Declaration public IEnumerable<T> DeletedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> EditedItems List of items in Edited state. Declaration public IEnumerable<T> EditedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> Methods Add(T) Adds the item to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration public void Add(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Add(IEnumerable<T>) Adds the items to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration public void Add(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to add. BulkInsert() Declaration public void BulkInsert() BulkInsert(IEnumerable<T>) Declaration public void BulkInsert(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items BulkInsertAsync() Declaration public Task BulkInsertAsync() Returns Type Description System.Threading.Tasks.Task BulkInsertAsync(IEnumerable<T>) Declaration public Task BulkInsertAsync(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items Returns Type Description System.Threading.Tasks.Task BulkUpdate() Declaration public void BulkUpdate() BulkUpdate(Action<IDbConnection, IDbTransaction, String>) Declaration public void BulkUpdate(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction BulkUpdate(IEnumerable<T>) Declaration public void BulkUpdate(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items BulkUpdate(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Declaration public void BulkUpdate(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction BulkUpdateAsync() Declaration public Task BulkUpdateAsync() Returns Type Description System.Threading.Tasks.Task BulkUpdateAsync(Action<IDbConnection, IDbTransaction, String>) Declaration public Task BulkUpdateAsync(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction Returns Type Description System.Threading.Tasks.Task BulkUpdateAsync(IEnumerable<T>) Declaration public Task BulkUpdateAsync(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items Returns Type Description System.Threading.Tasks.Task BulkUpdateAsync(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Declaration public Task BulkUpdateAsync(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction Returns Type Description System.Threading.Tasks.Task Clear() Clear Added, Edited and Deleted lists of items. Declaration public void Clear() CommitChanges() Commits all pending changes to the database. Declaration public void CommitChanges() CommitChangesAsync() Declaration public Task CommitChangesAsync() Returns Type Description System.Threading.Tasks.Task Delete(T) Adds the item to the context underlying the set in the Deleted state such that it will be deleted from the database when CommitChanges is called. Declaration public void Delete(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Delete(IEnumerable<T>) Marks the items as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration public void Delete(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to delete. Edit(T) Adds the item to the context underlying the set in the Edited state such that it will be updated in the database when CommitChanges is called. Declaration public void Edit(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Edit(IEnumerable<T>) Marks the items as Edited such that it will be updated in the database when CommitChanges is called. Declaration public void Edit(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to edit. GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> An enumerator that can be used to iterate through the collection. Implements IDbSet<T>"
  },
  "api/Kros.Utils/Kros.Caching.html": {
    "href": "api/Kros.Utils/Kros.Caching.html",
    "title": "Namespace Kros.Caching | Kros.Libs",
    "keywords": "Namespace Kros.Caching Classes Cache<TKey, TValue> Class for caching data. Interfaces ICache<TKey, TValue> Interface, which describe class for caching data."
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.html",
    "title": "Namespace Kros.Data.Schema.SqlServer | Kros.Libs",
    "keywords": "Namespace Kros.Data.Schema.SqlServer Classes SqlServerCacheKeyGenerator Cache key generator for Microsoft SQL Server used by DatabaseSchemaCache . SqlServerColumnSchema Table's column schema for Microsoft SQL Server. SqlServerParseDefaultValueEventArgs Arguments for the event ParseDefaultValue . SqlServerSchemaLoader The implementation of IDatabaseSchemaLoader<T> for Microsoft SQL Server. SqlServerSchemaLoader.ColumnSetColumnsSchemaNames SqlServerSchemaLoader.ColumnsSchemaNames SqlServerSchemaLoader.DatabasesSchemaNames SqlServerSchemaLoader.ForeignKeysSchemaNames SqlServerSchemaLoader.IndexColumnsSchemaNames SqlServerSchemaLoader.IndexesSchemaNames SqlServerSchemaLoader.ProcedureParametersSchemaNames SqlServerSchemaLoader.ProceduresSchemaNames SqlServerSchemaLoader.SchemaNames SqlServerSchemaLoader.TablesSchemaNames SqlServerSchemaLoader.UserDefinedTypesSchemaNames SqlServerSchemaLoader.UsersSchemaNames SqlServerSchemaLoader.ViewColumnsSchemaNames SqlServerSchemaLoader.ViewsSchemaNames"
  },
  "api/Kros.Utils/Kros.Data.Schema.TableSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.TableSchema.html",
    "title": "Class TableSchema | Kros.Libs",
    "keywords": "Class TableSchema Schema of a database table. Inheritance System.Object TableSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class TableSchema Constructors TableSchema(DatabaseSchema, String) Creates an instance of TableSchema with specified name , which belongs to database . Declaration public TableSchema(DatabaseSchema database, string name) Parameters Type Name Description DatabaseSchema database Database into which table belongs to. Value can be null . System.String name Table's name. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. TableSchema(String) Creates an instance of TableSchema with specified name . Declaration public TableSchema(string name) Parameters Type Name Description System.String name Meno tabuľky. Je povinné. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. Properties Columns Columns of the table. Declaration public ColumnSchemaCollection Columns { get; } Property Value Type Description ColumnSchemaCollection Database Database to which table belongs. Declaration public DatabaseSchema Database { get; } Property Value Type Description DatabaseSchema ForeignKeys List of table's foreign keys. Declaration public ForeignKeySchemaCollection ForeignKeys { get; } Property Value Type Description ForeignKeySchemaCollection Indexes List of table's indexes. Declaration public IndexSchemaCollection Indexes { get; } Property Value Type Description IndexSchemaCollection Name Table's name. Declaration public string Name { get; } Property Value Type Description System.String PrimaryKey Table's primary key. Declaration public IndexSchema PrimaryKey { get; } Property Value Type Description IndexSchema Remarks If table does not have a primary key, value is null . Methods SetPrimaryKey(String, Boolean) Sets primary key with name primaryKeyName and flag clustered . Declaration public IndexSchema SetPrimaryKey(string primaryKeyName, bool clustered) Parameters Type Name Description System.String primaryKeyName Primary key name. System.Boolean clustered If true , primary key is CLUSTERED . Returns Type Description IndexSchema Created primary key or null value, if primary key name was not specified. Remarks If primaryKeyName is null or empty string or white space string, primary key is removed (value of PrimaryKey will be null ). ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.html",
    "title": "Namespace Kros.KORM.Metadata.Attribute | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Metadata.Attribute Classes AliasAttribute Attribute which describe database name of property/class. ConverterAttribute Attribute for getting data converter. KeyAttribute Attribute, which describe property, which are part of primary key. NoMapAttribute Attribute, which describe property, which doesn't exist in database."
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.html",
    "title": "Namespace Kros.KORM.Query.Expressions | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query.Expressions Classes ArgsExpression Base class for args expression. ColumnsExpression Expression which represent projection part of sql select. GroupByExpression Expression, which represent GROUP BY statement from sql select query. OrderByExpression Expression, which represent ORDER BY statement from sql select query. QueryExpression Base expression. SelectExpression Expression, which represent SELECT query. SqlExpression Expression, which represent sql query. TableExpression Expression, which represent FROM statement from sql select query. WhereExpression Expression, which represent WHERE statement from sql select query."
  },
  "api/Kros.KORM/Kros.KORM.html": {
    "href": "api/Kros.KORM/Kros.KORM.html",
    "title": "Namespace Kros.KORM | Kros.Libs",
    "keywords": "Namespace Kros.KORM Classes Database Represent access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Interfaces IDatabase Interface, which describe class for access to ORM features. For executing query and materializing models see: IDatabase IQuery<T>"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.IBulkActionFactory.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.IBulkActionFactory.html",
    "title": "Interface IBulkActionFactory | Kros.Libs",
    "keywords": "Interface IBulkActionFactory Creates instances of IBulkInsert and IBulkUpdate for bulk actions. Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkActionFactory Methods GetBulkInsert() Gets the bulk insert. Declaration IBulkInsert GetBulkInsert() Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction) Gets the bulk insert. Declaration IBulkInsert GetBulkInsert(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkInsert The bulk insert. GetBulkUpdate() Gets the bulk update. Declaration IBulkUpdate GetBulkUpdate() Returns Type Description IBulkUpdate The bulk update. GetBulkUpdate(DbTransaction) Gets the bulk update. Declaration IBulkUpdate GetBulkUpdate(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkUpdate The bulk update."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.ConverterAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.ConverterAttribute.html",
    "title": "Class ConverterAttribute | Kros.Libs",
    "keywords": "Class ConverterAttribute Attribute for getting data converter. Inheritance System.Object System.Attribute ConverterAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class ConverterAttribute : Attribute, _Attribute Constructors ConverterAttribute(Type) Initializes a new instance of the ConverterAttribute class. Declaration public ConverterAttribute(Type converterType) Parameters Type Name Description System.Type converterType Type of the converter. Exceptions Type Condition System.ArgumentNullException The value of converterType is null . Properties Converter Gets the converter for property. Declaration public IConverter Converter { get; } Property Value Type Description IConverter"
  },
  "api/Kros.KORM/Kros.KORM.Materializer.DynamicMethodModelFactory.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.DynamicMethodModelFactory.html",
    "title": "Class DynamicMethodModelFactory | Kros.Libs",
    "keywords": "Class DynamicMethodModelFactory Modelfactory, which materialize model by dynamic method delegates. Inheritance System.Object DynamicMethodModelFactory Implements IModelFactory Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class DynamicMethodModelFactory : IModelFactory Constructors DynamicMethodModelFactory(IDatabaseMapper) Initializes a new instance of the DynamicMethodModelFactory class. Declaration public DynamicMethodModelFactory(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper The database mapper. Exceptions Type Condition System.ArgumentNullException databaseMapper;Argument 'databaseMapper' is required. Methods GetFactory<T>(IDataReader) Gets the factory for creating and filling model. Declaration public Func<IDataReader, T> GetFactory<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader from fill model. Returns Type Description System.Func < System.Data.IDataReader , T> Factory for creating and filling model. Type Parameters Name Description T Type of model class. Exceptions Type Condition System.ArgumentNullException reader;Argument 'reader' is required. Implements IModelFactory See Also IModelFactory"
  },
  "api/Kros.KORM/Kros.KORM.Data.ITransaction.html": {
    "href": "api/Kros.KORM/Kros.KORM.Data.ITransaction.html",
    "title": "Interface ITransaction | Kros.Libs",
    "keywords": "Interface ITransaction Represent database transaction. Instances of this class are obtained from BeginTransaction() and it is not designed to be directly constructed in your application code. Namespace : Kros.KORM.Data Assembly : Kros.KORM.dll Syntax public interface ITransaction : IDisposable Properties CommandTimeout The time in seconds to wait for the System.Data.Common.DbCommand.CommandTimeout in this transaction to execute. If not set, default value (30 s) will be used. Caution: Can be set only for main transaction (nested will share this value). Declaration int CommandTimeout { get; set; } Property Value Type Description System.Int32 Remarks A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely). Methods Commit() Commits all changes made to the database in the current transaction. Declaration void Commit() Rollback() Discards all changes made to the database in the current transaction. Declaration void Rollback()"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsertColumnCollection.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsertColumnCollection.html",
    "title": "Class MsAccessBulkInsertColumnCollection | Kros.Libs",
    "keywords": "Class MsAccessBulkInsertColumnCollection Collection of columns for bulk insert into Microsoft Access database from CSV file ( MsAccessBulkInsert ). Inheritance System.Object System.Collections.Generic.List < MsAccessBulkInsertColumn > MsAccessBulkInsertColumnCollection Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkInsertColumnCollection : List<MsAccessBulkInsertColumn>, IList<MsAccessBulkInsertColumn>, ICollection<MsAccessBulkInsertColumn>, IList, ICollection, IReadOnlyList<MsAccessBulkInsertColumn>, IReadOnlyCollection<MsAccessBulkInsertColumn>, IEnumerable<MsAccessBulkInsertColumn>, IEnumerable Constructors MsAccessBulkInsertColumnCollection() Creates a new instance of MsAccessBulkInsertColumnCollection . Declaration public MsAccessBulkInsertColumnCollection() MsAccessBulkInsertColumnCollection(IEnumerable<MsAccessBulkInsertColumn>) Creates a new instance of MsAccessBulkInsertColumnCollection and adds into it data collection . Declaration public MsAccessBulkInsertColumnCollection(IEnumerable<MsAccessBulkInsertColumn> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < MsAccessBulkInsertColumn > collection Initial data added to the collection. MsAccessBulkInsertColumnCollection(Int32) Creates a new instance of MsAccessBulkInsertColumnCollection with specified initial capacity capacity . Declaration public MsAccessBulkInsertColumnCollection(int capacity) Parameters Type Name Description System.Int32 capacity Initial capacity of the inner list. Methods Add(MsAccessColumnSchema) Adds column based on database column schema column . Declaration public void Add(MsAccessColumnSchema column) Parameters Type Name Description MsAccessColumnSchema column Database column schema. Add(String) Adds a column with name columnName with type set to Undefined . Declaration public void Add(string columnName) Parameters Type Name Description System.String columnName Column name. Add(String, BulkInsertColumnType) Adds a column with name columnName and type columnType . Declaration public void Add(string columnName, BulkInsertColumnType columnType) Parameters Type Name Description System.String columnName Column name. BulkInsertColumnType columnType Column type. AddRange(IEnumerable<MsAccessColumnSchema>) Adds columns based on database column schemas columns . Declaration public void AddRange(IEnumerable<MsAccessColumnSchema> columns) Parameters Type Name Description System.Collections.Generic.IEnumerable < MsAccessColumnSchema > columns Database column schemas. AddRange(String[]) Adds all columns in columnNames with type set to Undefined . Declaration public void AddRange(params string[] columnNames) Parameters Type Name Description System.String [] columnNames Column names."
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsert.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsert.html",
    "title": "Class MsAccessBulkInsert | Kros.Libs",
    "keywords": "Class MsAccessBulkInsert The calss for fast bulk insert big amount of data into Microsoft Access database. Inheritance System.Object MsAccessBulkInsert Implements IBulkInsert Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkInsert : IBulkInsert, IDisposable Remarks In the background, it creates a text CSV file with data which are inserted. Constructors MsAccessBulkInsert(OleDbConnection) Creates a new instance with database connection connection and default settings for CSV file. Declaration public MsAccessBulkInsert(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. Exceptions Type Condition System.ArgumentNullException Value of connection is null . MsAccessBulkInsert(OleDbConnection, OleDbTransaction) Creates a new instance with database connection connection , transaction externalTransaction and default settings for CSV file. Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. If there already is running transaction in this connection, it must be specified in externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Transaction in which the bulk insert will be performed. Exceptions Type Condition System.ArgumentNullException Value of connection is null . MsAccessBulkInsert(OleDbConnection, OleDbTransaction, Int32) Creates a new instance with database connection connection , transaction externalTransaction and CSV file code page csvFileCodePage . Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction, int csvFileCodePage) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. If there already is running transaction in this connection, it must be specified in externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Transaction in which the bulk insert will be performed. System.Int32 csvFileCodePage Code page for generated CSV file. Exceptions Type Condition System.ArgumentNullException Value of connection is null . MsAccessBulkInsert(OleDbConnection, OleDbTransaction, Int32, Char) Creates a new instance with database connection connection , transaction externalTransaction and CSV file settings csvFileCodePage and valueDelimiter . Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction, int csvFileCodePage, char valueDelimiter) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. If there already is running transaction in this connection, it must be specified in externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Transaction in which the bulk insert will be performed. System.Int32 csvFileCodePage Code page for generated CSV file. System.Char valueDelimiter Value delimiter for generated CSV file. Exceptions Type Condition System.ArgumentNullException Value of connection is null . MsAccessBulkInsert(String) Creates a new instance with database connection specifiend in connectionString and default settings for CSV file. Declaration public MsAccessBulkInsert(string connectionString) Parameters Type Name Description System.String connectionString Connection string for the database connection where the data will be inserted. Fields AnsiCodePage ANSI code page. Declaration public const int AnsiCodePage = 2147483647 Field Value Type Description System.Int32 DefaultCodePage Default code page: Utf8CodePage . Declaration public const int DefaultCodePage = 65001 Field Value Type Description System.Int32 DefaultValueDelimiter Default value separator for CSV file: comma ( , ). Declaration public const char DefaultValueDelimiter = ',' Field Value Type Description System.Char OemCodePage OEM code page. Declaration public const int OemCodePage = 2147483646 Field Value Type Description System.Int32 Utf8CodePage UTF-8 code page: 65001. Declaration public const int Utf8CodePage = 65001 Field Value Type Description System.Int32 WindowsCentralEuropeCodePage Windows Central Europe code page: 1250 . Declaration public const int WindowsCentralEuropeCodePage = 1250 Field Value Type Description System.Int32 Properties BatchSize This setting is not used. Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 BulkInsertTimeout This setting is not used. Declaration public int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 CodePage Code page used for CSV file and bulk insert. Default value is 65001 Utf8CodePage . Declaration public int CodePage { get; } Property Value Type Description System.Int32 Number of code page. Columns List of inserted columns. Declaration public MsAccessBulkInsertColumnCollection Columns { get; } Property Value Type Description MsAccessBulkInsertColumnCollection List of columns as MsAccessBulkInsertColumnCollection . Remarks Columns in the list must be in the same order as they are in input CSV file. DestinationTableName Destination table name in database. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction External transaction, in which bulk insert is executed. Declaration public OleDbTransaction ExternalTransaction { get; } Property Value Type Description System.Data.OleDb.OleDbTransaction ValueDelimiter Value separator in generated CSV file. Declaration public char ValueDelimiter { get; } Property Value Type Description System.Char Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Insert(IBulkActionDataReader) Declaration public void Insert(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Insert(DataTable) Declaration public void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Insert(IDataReader) Declaration public void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader InsertAsync(IBulkActionDataReader) Declaration public Task InsertAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Returns Type Description System.Threading.Tasks.Task InsertAsync(DataTable) Declaration public Task InsertAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Returns Type Description System.Threading.Tasks.Task InsertAsync(IDataReader) Declaration public Task InsertAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Returns Type Description System.Threading.Tasks.Task Implements IBulkInsert"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkActionFactory.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkActionFactory.html",
    "title": "Class MsAccessBulkActionFactory | Kros.Libs",
    "keywords": "Class MsAccessBulkActionFactory Creates instances of IBulkInsert for bulk inserting. Inheritance System.Object MsAccessBulkActionFactory Implements IBulkActionFactory Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkActionFactory : IBulkActionFactory Constructors MsAccessBulkActionFactory(OleDbConnection) Initializes a new instance of the MsAccessBulkActionFactory class. Declaration public MsAccessBulkActionFactory(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection The connection. MsAccessBulkActionFactory(String) Initializes a new instance of the MsAccessBulkActionFactory class. Declaration public MsAccessBulkActionFactory(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Methods GetBulkInsert() Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert() Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction, Int32) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction, int csvFileCodePage) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. System.Int32 csvFileCodePage The CSV file code page. Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction, Int32, Char) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction, int csvFileCodePage, char valueDelimiter) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. System.Int32 csvFileCodePage The CSV file code page. System.Char valueDelimiter The value delimiter. Returns Type Description IBulkInsert The bulk insert. GetBulkUpdate() Gets the bulk update. Declaration public IBulkUpdate GetBulkUpdate() Returns Type Description IBulkUpdate The bulk update. GetBulkUpdate(DbTransaction) Gets the bulk update. Declaration public IBulkUpdate GetBulkUpdate(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkUpdate The bulk update. Register() Registers factory methods for creation instances to BulkActionFactories . Declaration public static void Register() Implements IBulkActionFactory See Also IBulkActionFactory"
  },
  "api/Kros.Utils/Kros.Data.Schema.TableSchemaCollection.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.TableSchemaCollection.html",
    "title": "Class TableSchemaCollection | Kros.Libs",
    "keywords": "Class TableSchemaCollection List of tables for DatabaseSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < TableSchema > System.Collections.ObjectModel.KeyedCollection < System.String , TableSchema > TableSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class TableSchemaCollection : KeyedCollection<string, TableSchema>, IList<TableSchema>, ICollection<TableSchema>, IList, ICollection, IReadOnlyList<TableSchema>, IReadOnlyCollection<TableSchema>, IEnumerable<TableSchema>, IEnumerable Remarks To the tables added to this list is automatically set their Database . The table can belong only to one database. Constructors TableSchemaCollection(DatabaseSchema) Creates a new table list for database . Declaration public TableSchemaCollection(DatabaseSchema database) Parameters Type Name Description DatabaseSchema database Database to which table belongs. Exceptions Type Condition System.ArgumentNullException Value of database is null . Properties Database Database to which table list belongs. Declaration public DatabaseSchema Database { get; } Property Value Type Description DatabaseSchema Methods Add(String) Creates a new TableSchema with name and adds it to the list. Declaration public TableSchema Add(string name) Parameters Type Name Description System.String name Name of the created table. Returns Type Description TableSchema Created table schema. GetKeyForItem(TableSchema) Declaration protected override string GetKeyForItem(TableSchema item) Parameters Type Name Description TableSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.GetKeyForItem(Kros.Data.Schema.TableSchema) InsertItem(Int32, TableSchema) Declaration protected override void InsertItem(int index, TableSchema item) Parameters Type Name Description System.Int32 index TableSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.InsertItem(System.Int32, Kros.Data.Schema.TableSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.KORM/Kros.KORM.Query.IQueryProvider.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IQueryProvider.html",
    "title": "Interface IQueryProvider | Kros.Libs",
    "keywords": "Interface IQueryProvider Interface for provider, which know execute query. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryProvider : IQueryProvider, IDisposable Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Methods BeginTransaction(IsolationLevel) Begins the transaction using the specified isolation level. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The database isolation level with which the underlying store transaction will be created. Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. CreateBulkInsert() Creates instance of IBulkInsert . Declaration IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . CreateIdGenerator(String, Int32) Creates the identifier generator. Declaration IIdGenerator CreateIdGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName Name of the database table. System.Int32 batchSize Size of inserting the batch. Returns Type Description IIdGenerator The identifier generator. Execute<T>(IQuery<T>) Executes the specified query. Declaration IEnumerable<T> Execute<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models, which was materialized by query. Type Parameters Name Description T Type of model result. Exceptions Type Condition System.ArgumentNullException If query is null. ExecuteInTransactionAsync(Func<Task>) Asynchronously executes action in transaction. Declaration Task ExecuteInTransactionAsync(Func<Task> action) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > action Action which will be executed. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous operation. ExecuteNonQuery(String) Executes arbitrary query. Declaration int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQueryCommand(IDbCommand) Executes the command. Declaration int ExecuteNonQueryCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQueryCommandAsync(DbCommand) Asynchronously executes the command. Declaration Task<int> ExecuteNonQueryCommandAsync(DbCommand command) Parameters Type Name Description System.Data.Common.DbCommand command The command. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A task that represents the asynchronous save operation. The task result contains the numbers of affected rows. ExecuteScalar<T>(IQuery<T>) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration object ExecuteScalar<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Object The first column of the first row in the result set, or a null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description T Type of model. ExecuteStoredProcedure<TResult>(String) Executes the stored procedure with parameters and returns its result. The result can be scalar value (primitive or complex – class type), or a list of values ( System.Collections.Generic.IEnumerable<T> ). Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. It can be scalar primitive or complex (class) value, or System.Collections.Generic.IEnumerable<T> of some value. If the TResult is primitive scalar value, the result is converted to that. If TResult is a classs, the result of stored procedure is converted (materialized) to that class type. If TResult is System.Collections.Generic.IEnumerable<T> , the result of procedure is converted (materialized) to that. Examples For the examples, we expect to have a Database initialized and a Person class defined. Exceptions Type Condition System.InvalidOperationException ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. CommandParameterCollection parameters The stored procedure parameters. Values of output parameters ( System.Data.ParameterDirection.Output System.Data.ParameterDirection.InputOutput ) are set back to corresponding parameter in collection Returns Type Description TResult Type Parameters Name Description TResult Exceptions Type Condition System.ArgumentException Value of any of the parameters in parameters is null or System.DBNull and its data type ( DataType ) is not set. GetCommandForCurrentTransaction() Vytvorí inicializovaný príkaz System.Data.Common.DbCommand , pre aktuálnu transakciu. Používa sa iba v rámci volania ExecuteInTransactionAsync(Func<Task>) . Declaration DbCommand GetCommandForCurrentTransaction() Returns Type Description System.Data.Common.DbCommand Inicializovaný príkaz. SetParameterDbType(DbParameter, String, String) Sets correct data type to parameter , according to column columnName in table tableName . The method does not set general System.Data.Common.DbParameter.DbType , but specific for given database ( SqlParameter.SqlDbType , OleDbParameter.OleDbType ). Declaration void SetParameterDbType(DbParameter parameter, string tableName, string columnName) Parameters Type Name Description System.Data.Common.DbParameter parameter The parameter to which the data type is set. System.String tableName Table name. System.String columnName Column name which data type is obtained."
  },
  "api/Kros.KORM/Kros.KORM.Query.IQueryBase-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IQueryBase-1.html",
    "title": "Interface IQueryBase<T> | Kros.Libs",
    "keywords": "Interface IQueryBase<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryBase<T> : IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods AsDbSet() Returns the collection of all entities that can be queried from the database. Declaration IDbSet<T> AsDbSet() Returns Type Description IDbSet <T> DbSet<T> . ExecuteScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration object ExecuteScalar() Returns Type Description System.Object The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Examples var id = (int)database.Query<Person>() .Select(p => new { p.Id }) .Where(\"FirstName = @p1 AND LastName = @p2\", \"Michael\", \"Štúr\") .ExecuteScalar(); ExecuteScalar<TRet>() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TRet? ExecuteScalar<TRet>() where TRet : struct Returns Type Description System.Nullable <TRet> The first column of the first row in the result set as nullable type of TRet. If the result set is empty, then HasValue is false. Returns a maximum of 2033 characters. Type Parameters Name Description TRet Return type. Examples var id = (int)database.Query<Person>() .Select(p => new { p.Id }) .Where(\"FirstName = @p1 AND LastName = @p2\", \"Michael\", \"Štúr\") .ExecuteScalar(); ExecuteStringScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteStringScalar() Returns Type Description System.String The first column of the first row in the result set as string, or null if the result set is empty. Returns a maximum of 2033 characters. Examples var id = (int)database.Query<Person>() .Select(p => new { p.Id }) .Where(\"FirstName = @p1 AND LastName = @p2\", \"Michael\", \"Štúr\") .ExecuteScalar();"
  },
  "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaLoader-1.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.IDatabaseSchemaLoader-1.html",
    "title": "Interface IDatabaseSchemaLoader<T> | Kros.Libs",
    "keywords": "Interface IDatabaseSchemaLoader<T> Inherited Members IDatabaseSchemaLoader.SupportsConnectionType(Object) IDatabaseSchemaLoader.LoadSchema(Object) IDatabaseSchemaLoader.LoadTableSchema(Object, String) Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaLoader<T> : IDatabaseSchemaLoader Type Parameters Name Description T Database connection type which loader works with. Methods LoadSchema(T) Declaration DatabaseSchema LoadSchema(T connection) Parameters Type Name Description T connection Returns Type Description DatabaseSchema LoadTableSchema(T, String) Declaration TableSchema LoadTableSchema(T connection, string tableName) Parameters Type Name Description T connection System.String tableName Returns Type Description TableSchema SupportsConnectionType(T) Declaration bool SupportsConnectionType(T connection) Parameters Type Name Description T connection Returns Type Description System.Boolean"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessCacheKeyGenerator.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessCacheKeyGenerator.html",
    "title": "Class MsAccessCacheKeyGenerator | Kros.Libs",
    "keywords": "Class MsAccessCacheKeyGenerator Cache key generator for Microsoft Access used by DatabaseSchemaCache . Inheritance System.Object MsAccessCacheKeyGenerator Implements ISchemaCacheKeyGenerator < System.Data.OleDb.OleDbConnection > ISchemaCacheKeyGenerator Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessCacheKeyGenerator : ISchemaCacheKeyGenerator<OleDbConnection>, ISchemaCacheKeyGenerator Methods GenerateKey(OleDbConnection) Generates a cache key for connection . The generated key is a string \" MsAccess:database path \". Declaration public string GenerateKey(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. Returns Type Description System.String String. Exceptions Type Condition System.ArgumentNullException Value of connection is null . Explicit Interface Implementations ISchemaCacheKeyGenerator.GenerateKey(Object) Declaration string ISchemaCacheKeyGenerator.GenerateKey(object connection) Parameters Type Name Description System.Object connection Returns Type Description System.String Implements ISchemaCacheKeyGenerator<T> ISchemaCacheKeyGenerator"
  },
  "api/Kros.Utils/Kros.Utils.IDiContainer.html": {
    "href": "api/Kros.Utils/Kros.Utils.IDiContainer.html",
    "title": "Interface IDiContainer | Kros.Libs",
    "keywords": "Interface IDiContainer Interface for DI (Dependency Injection) container. Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public interface IDiContainer : IDisposable Methods CreateChildContainer() Create a child container. Declaration IDiContainer CreateChildContainer() Returns Type Description IDiContainer The new child container. Remarks A child container shares the parent's configuration, but can be configured with different settings or lifetime. GetInstance(Type) Resolves the instance of type instanceType . Declaration object GetInstance(Type instanceType) Parameters Type Name Description System.Type instanceType Type to resolve from container. Returns Type Description System.Object Object of type instanceType . GetInstance(Type, String) Resolves the named instance of type instanceType . Declaration object GetInstance(Type instanceType, string name) Parameters Type Name Description System.Type instanceType Type to resolve from container. System.String name Name of the desired instance. Returns Type Description System.Object Object of type instanceType . GetInstance<T>() Resolves the instance of type T . Declaration T GetInstance<T>() Returns Type Description T Object of type T . Type Parameters Name Description T Type to resolve from container. GetInstance<T>(String) Resolves the named instance of type T . Declaration T GetInstance<T>(string name) Parameters Type Name Description System.String name Name of the desired instance. Returns Type Description T Object of type T . Type Parameters Name Description T Type to resolve from container. Register<T>() Registers a class type. Declaration IDiContainer Register<T>() Returns Type Description IDiContainer Container instance for fluent registration. Type Parameters Name Description T Class type. Register<T>(Func<IDiContainer, T>) Register interface or class type using lambda function. Declaration IDiContainer Register<T>(Func<IDiContainer, T> lambda) Parameters Type Name Description System.Func < IDiContainer , T> lambda Function which takes current DI container as parameter and creates a new instance of T . Returns Type Description IDiContainer Type Parameters Name Description T Interface or class type. Register<T>(String) Registers a class type with name name . Declaration IDiContainer Register<T>(string name) Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description T Class type. Register<T>(String, Func<IDiContainer, T>) Register named interface or class type using lambda function. Declaration IDiContainer Register<T>(string name, Func<IDiContainer, T> lambda) Parameters Type Name Description System.String name Name of the registered interface or class type. System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Interface or class type. Register<TFrom, TTo>() Registers a interface-class pair. Declaration IDiContainer Register<TFrom, TTo>() where TTo : TFrom Returns Type Description IDiContainer Type Parameters Name Description TFrom Registered interface. TTo Registered class type that implements TFrom . Register<TFrom, TTo>(String) Registers a named interface-class pair. Declaration IDiContainer Register<TFrom, TTo>(string name) where TTo : TFrom Parameters Type Name Description System.String name Name of the registered interface. Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo RegisterInstance<T>() Registers class type as singleton. Declaration IDiContainer RegisterInstance<T>() Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(T) Registers class instance. Declaration IDiContainer RegisterInstance<T>(T instance) Parameters Type Name Description T instance Registered instance. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(Func<IDiContainer, T>) Registers class instance as sigleton using function. Declaration IDiContainer RegisterInstance<T>(Func<IDiContainer, T> lambda) Parameters Type Name Description System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String) Registers class type with name name as singleton. Declaration IDiContainer RegisterInstance<T>(string name) Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String, T) Registers class instance. Declaration IDiContainer RegisterInstance<T>(string name, T instance) Parameters Type Name Description System.String name Name of the registered class type. T instance Registered instance. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String, Func<IDiContainer, T>) Registers named class instance as sigleton using function. Declaration IDiContainer RegisterInstance<T>(string name, Func<IDiContainer, T> lambda) Parameters Type Name Description System.String name Name, under which is type registered. System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<TFrom, TTo>() Registers a interface-class pair as singleton. Declaration IDiContainer RegisterInstance<TFrom, TTo>() where TTo : TFrom Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo RegisterInstance<TFrom, TTo>(String) Registers a named interface to class type pair. class type TTo as a singleton. Declaration IDiContainer RegisterInstance<TFrom, TTo>(string name) where TTo : TFrom Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo"
  },
  "api/Kros.Utils/Kros.Data.ConnectionHelper.html": {
    "href": "api/Kros.Utils/Kros.Data.ConnectionHelper.html",
    "title": "Class ConnectionHelper | Kros.Libs",
    "keywords": "Class ConnectionHelper Helper class for opening database connection. It ensures opening and closing of the connection. Inheritance System.Object Suspender ConnectionHelper Inherited Members Suspender.Suspend() Suspender.IsSuspended Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public class ConnectionHelper : Suspender Methods OpenConnection(IDbConnection) If database connection is closed, it is opened immediately. After disposing of returned object, the connection is closed, but only if it was opened. So when already opened connection is passed in the parameter, nothing is done with it. Declaration public static IDisposable OpenConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Database connection. Returns Type Description System.IDisposable Helper object, which closes connection when it is disposed of. Exceptions Type Condition System.ArgumentNullException Value of connection is null . ResumeCore() Declaration protected override void ResumeCore() Overrides Suspender.ResumeCore() SuspendCore() Declaration protected override void SuspendCore() Overrides Suspender.SuspendCore()"
  },
  "api/Kros.KORM/Kros.KORM.Query.QueryProvider.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.QueryProvider.html",
    "title": "Class QueryProvider | Kros.Libs",
    "keywords": "Class QueryProvider Provider, which know execute query. Inheritance System.Object QueryProvider SqlServerQueryProvider Implements IQueryProvider Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public abstract class QueryProvider : IQueryProvider, IQueryProvider, IDisposable Constructors QueryProvider(ConnectionStringSettings, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public QueryProvider(ConnectionStringSettings connectionSettings, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionSettings The connection string settings. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. QueryProvider(DbConnection, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public QueryProvider(DbConnection externalConnection, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Data.Common.DbConnection externalConnection The connection. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. Properties Connection Vráti spojenie na databázu s ktorou trieda pracuje. Ak trieda bola vytvorená iba so zadaným connection string-om, je vytvorené nové spojenie. Declaration protected DbConnection Connection { get; } Property Value Type Description System.Data.Common.DbConnection ConnectionString Connection string na databázu, ktorý bol zadaný pri vytvorení inštancie triedy ( QueryProvider(ConnectionStringSettings, ISqlExpressionVisitor, IModelBuilder, ILogger) ). Ak bola trieda vytvorená konkrétnou inštanciou spojenia, vráti null . Declaration protected string ConnectionString { get; } Property Value Type Description System.String DbProviderFactory Returns DbProviderFactory for current provider. Declaration public abstract DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory IsExternalConnection Vráti, či spojenie na databázu je externé, tzn. či bolo explicitne zadané zvonka v konštruktore. Ak bolo spojenie zadané explicitne, vráti true , ak bol v konštruktore zadaný iba connection string a spojenie je vytvorené interne, vráti false . Declaration protected bool IsExternalConnection { get; } Property Value Type Description System.Boolean Methods BeginTransaction(IsolationLevel) Declaration public ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction CreateBulkInsert() Creates instance of IBulkInsert . Declaration public abstract IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration public abstract IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . CreateIdGenerator(String, Int32) Declaration public IIdGenerator CreateIdGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName System.Int32 batchSize Returns Type Description IIdGenerator CreateQuery(Expression) Not implemented. Declaration public IQueryable CreateQuery(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Linq.IQueryable Exceptions Type Condition System.NotImplementedException CreateQuery<TElement>(Expression) Constructs an System.Linq.IQueryable<T> object that can evaluate the query represented by a specified expression tree. Declaration public IQueryable<TElement> CreateQuery<TElement>(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Linq.IQueryable <TElement> An System.Linq.IQueryable<T> that can evaluate the query represented by the specified expression tree. Type Parameters Name Description TElement The type of the elements of the System.Linq.IQueryable<T> that is returned. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Execute(Expression) Executing non generic result is not actualy supported. Declaration public object Execute(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Object Exceptions Type Condition System.NotImplementedException Execute<T>(IQuery<T>) Executes the specified query. Declaration public IEnumerable<T> Execute<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models, which was materialized by query Type Parameters Name Description T Type of model result. Exceptions Type Condition System.ArgumentNullException If query is null. Execute<TResult>(Expression) Executes the strongly-typed query represented by a specified expression tree. Declaration public TResult Execute<TResult>(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description TResult The value that results from executing the specified query. Type Parameters Name Description TResult The type of the value that results from executing the query. ExecuteInTransactionAsync(Func<Task>) Declaration public Task ExecuteInTransactionAsync(Func<Task> action) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > action Returns Type Description System.Threading.Tasks.Task ExecuteNonQuery(String) Executes arbitrary query. Declaration public int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration public int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. Exceptions Type Condition System.ArgumentException Value of any of the parameters is NULL and its data type ( DataType ) is not set. ExecuteNonQueryCommand(IDbCommand) Executes the command. Declaration public int ExecuteNonQueryCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Returns Type Description System.Int32 Exceptions Type Condition System.NotImplementedException ExecuteNonQueryCommandAsync(DbCommand) Declaration public Task<int> ExecuteNonQueryCommandAsync(DbCommand command) Parameters Type Name Description System.Data.Common.DbCommand command Returns Type Description System.Threading.Tasks.Task < System.Int32 > ExecuteScalar<T>(IQuery<T>) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public object ExecuteScalar<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Object The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description T Type of model. Exceptions Type Condition System.ArgumentNullException If query is null. ExecuteStoredProcedure<TResult>(String) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Returns Type Description TResult Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName CommandParameterCollection parameters Returns Type Description TResult Type Parameters Name Description TResult GetCommandForCurrentTransaction() Vytvorí inicializovaný príkaz System.Data.Common.DbCommand , pre aktuálnu transakciu. Používa sa iba v rámci volania ExecuteInTransactionAsync(Func<Task>) . Declaration public DbCommand GetCommandForCurrentTransaction() Returns Type Description System.Data.Common.DbCommand Inicializovaný príkaz. GetCurrentTransaction() Gets current the transaction. Declaration protected DbTransaction GetCurrentTransaction() Returns Type Description System.Data.Common.DbTransaction Current transaction if is opened; otherwise null; GetSchemaLoader() Creates IDatabaseSchemaLoader for specific database. Declaration protected abstract IDatabaseSchemaLoader GetSchemaLoader() Returns Type Description IDatabaseSchemaLoader SetParameterDbType(DbParameter, String, String) Declaration public void SetParameterDbType(DbParameter parameter, string tableName, string columnName) Parameters Type Name Description System.Data.Common.DbParameter parameter System.String tableName System.String columnName Implements IQueryProvider See Also IQueryProvider"
  },
  "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerator-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerator-1.html",
    "title": "Class ModelBuilder.ModelBuilderEnumerator<T> | Kros.Libs",
    "keywords": "Class ModelBuilder.ModelBuilderEnumerator<T> Enumerator that iterates through the materialized models. Inheritance System.Object ModelBuilder.ModelBuilderEnumerator<T> Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilderEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Model Type Properties Current Gets the element in the collection at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() MoveNext() Advances the enumerator to the next element of the collection. Declaration public bool MoveNext() Returns Type Description System.Boolean true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration public void Reset() Exceptions Type Condition System.NotImplementedException See Also System.Collections.Generic.IEnumerator <T>"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.html",
    "title": "Class MsAccessSchemaLoader | Kros.Libs",
    "keywords": "Class MsAccessSchemaLoader The implementation of IDatabaseSchemaLoader<T> for Microsoft Access. Inheritance System.Object MsAccessSchemaLoader Implements IDatabaseSchemaLoader < System.Data.OleDb.OleDbConnection > IDatabaseSchemaLoader Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessSchemaLoader : IDatabaseSchemaLoader<OleDbConnection>, IDatabaseSchemaLoader Methods GetDefaultValueString(String) Adjusts the string rawDefaultValueString so column's default value can be obtained from it. Declaration protected virtual string GetDefaultValueString(string rawDefaultValueString) Parameters Type Name Description System.String rawDefaultValueString Default value string as it is stored in database. Returns Type Description System.String Adjusted string - trimmed of unneeded characters. LoadSchema(OleDbConnection) Loads database schema for connection . Declaration public DatabaseSchema LoadSchema(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. Returns Type Description DatabaseSchema Database schema. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException Value of connection id null . System.ArgumentException The connection connection is not a connection to Microsoft Access database. LoadTableSchema(OleDbConnection, String) Loads table schema for table tableName in database connection . Declaration public TableSchema LoadTableSchema(OleDbConnection connection, string tableName) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. System.String tableName Table name. Returns Type Description TableSchema Table schema, or value null if specified table does not exist. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException Value of tableName is an empty string, or string containing whitespace characters only. OnParseDefaultValue(MsAccessParseDefaultValueEventArgs) Raises the ParseDefaultValue event with arguments e . Declaration protected virtual void OnParseDefaultValue(MsAccessParseDefaultValueEventArgs e) Parameters Type Name Description MsAccessParseDefaultValueEventArgs e Arguments for the event. SupportsConnectionType(OleDbConnection) Checks if it is poosible to load database schema for connection . Declaration public bool SupportsConnectionType(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. Returns Type Description System.Boolean false if value of connection is null , or it is not a connection to Microsoft Access database. Otherwise true . Events ParseDefaultValue Event raised while parsing default value of a column. It is possible to use custom parsing logic in the event handler. Declaration public event EventHandler<MsAccessParseDefaultValueEventArgs> ParseDefaultValue Event Type Type Description System.EventHandler < MsAccessParseDefaultValueEventArgs > Remarks When custom logic for parsing column's default value is used, the parsed value is set in DefaultValue property and Handled flag must be set to true . Explicit Interface Implementations IDatabaseSchemaLoader.LoadSchema(Object) Loads database schema for connection . Declaration DatabaseSchema IDatabaseSchemaLoader.LoadSchema(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description DatabaseSchema Database schema. Remarks By default, schema is loaded using new connection to the database, based on connection . But if connection is an exclusive connection, it is used directly. Exceptions Type Condition System.ArgumentNullException The value of connection is null . System.ArgumentException The connection connection is not a connection to Microsoft Access database. IDatabaseSchemaLoader.LoadTableSchema(Object, String) Loads table schema for table tableName in database connection . Declaration TableSchema IDatabaseSchemaLoader.LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Database connection. System.String tableName Table name. Returns Type Description TableSchema Table schema, or value null if specified table does not exist. Remarks By default, schema is loaded using new connection to the database, based on connection . But if connection is an exclusive connection, it is used directly. Exceptions Type Condition System.ArgumentNullException The value of connection or tableName is null . System.ArgumentException IDatabaseSchemaLoader.SupportsConnectionType(Object) Declaration bool IDatabaseSchemaLoader.SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Returns Type Description System.Boolean Implements IDatabaseSchemaLoader<T> IDatabaseSchemaLoader"
  },
  "api/Kros.KORM/Kros.KORM.Query.CommandParameterCollection.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.CommandParameterCollection.html",
    "title": "Class CommandParameterCollection | Kros.Libs",
    "keywords": "Class CommandParameterCollection Zoznam parametrov pre pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). Inheritance System.Object System.Collections.ObjectModel.Collection < CommandParameter > System.Collections.ObjectModel.KeyedCollection < System.String , CommandParameter > CommandParameterCollection Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class CommandParameterCollection : KeyedCollection<string, CommandParameter>, IList<CommandParameter>, ICollection<CommandParameter>, IList, ICollection, IReadOnlyList<CommandParameter>, IReadOnlyCollection<CommandParameter>, IEnumerable<CommandParameter>, IEnumerable Constructors CommandParameterCollection() Vytvorí inštanciu triedy. V názvoch parametrov, ktoré predstavujú kľúč do slovníka, nezáleží na veľkosti písmen. Declaration public CommandParameterCollection() Methods Add(String, Object) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, DbType) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, DbType dataType) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.DbType dataType Dátový typ parametra. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, ParameterDirection) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, Nullable<DbType>, ParameterDirection) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, DbType? dataType, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Nullable < System.Data.DbType > dataType Dátový typ parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Returns Type Description CommandParameter Pridaný parameter. GetKeyForItem(CommandParameter) Vráti kľuč do slovníka, čo je meno parametra ParameterName . Declaration protected override string GetKeyForItem(CommandParameter item) Parameters Type Name Description CommandParameter item Parameter, pre ktorý sa zíkava kľúč. Returns Type Description System.String Reťazec - meno parametra. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.KORM.Query.CommandParameter>.GetKeyForItem(Kros.KORM.Query.CommandParameter)"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.ConventionModelMapper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.ConventionModelMapper.html",
    "title": "Class ConventionModelMapper | Kros.Libs",
    "keywords": "Class ConventionModelMapper Model mapper, which know define convention for name mapping. Inheritance System.Object ConventionModelMapper Implements IModelMapper Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class ConventionModelMapper : IModelMapper Constructors ConventionModelMapper() Initializes a new instance of the ConventionModelMapper class. Declaration public ConventionModelMapper() Properties MapColumnName Gets or sets the column name mapping logic. Declaration public Func<ColumnInfo, Type, string> MapColumnName { get; set; } Property Value Type Description System.Func < ColumnInfo , System.Type , System.String > Remarks Params: ColumnInfo - info about column. Type - Type of model. string - return column name. MapPrimaryKey Gets or sets the primary key mapping logic. Declaration public Func<TableInfo, IEnumerable<ColumnInfo>> MapPrimaryKey { get; set; } Property Value Type Description System.Func < TableInfo , System.Collections.Generic.IEnumerable < ColumnInfo >> MapTableName Gets or sets the table name mapping logic. Declaration public Func<TableInfo, Type, string> MapTableName { get; set; } Property Value Type Description System.Func < TableInfo , System.Type , System.String > Methods GetInjector<T>() Get property service injector. Declaration public IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information. Declaration public TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Table info. GetTableInfo<T>() Gets the table information. Declaration public TableInfo GetTableInfo<T>() Returns Type Description TableInfo Table info. Type Parameters Name Description T Type of model. InjectionConfigurator<T>() Get property injection configuration for model T. Declaration public IInjectionConfigurator<T> InjectionConfigurator<T>() Returns Type Description IInjectionConfigurator <T> Type Parameters Name Description T Examples Database.DefaultModelMapper .InjectionConfigurator<Person>() .FillProperty(p => p.CalculationService, () => new CalculationService()) .FillProperty(p => p.Logger, () => ServiceContainer.Instance.Resolve<ILogger>()); SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>>, String) Set column name for specific property. Declaration public void SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>> modelProperty, string columnName) where TModel : class Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property to. System.String columnName Database column name. Type Parameters Name Description TModel TValue Examples Database.DefaultModelMapper.SetColumnName<Person, string>(p => p.Name, \"FirstName\"); Implements IModelMapper See Also IModelMapper"
  },
  "api/Kros.Utils/Kros.Data.SqlServer.SqlServerIdGenerator.html": {
    "href": "api/Kros.Utils/Kros.Data.SqlServer.SqlServerIdGenerator.html",
    "title": "Class SqlServerIdGenerator | Kros.Libs",
    "keywords": "Class SqlServerIdGenerator The unique ID generator for Microsoft SQL Server. Inheritance System.Object IdGeneratorBase SqlServerIdGenerator Implements IIdGenerator Inherited Members IdGeneratorBase.TableName IdGeneratorBase.BatchSize IdGeneratorBase.Connection IdGeneratorBase.GetNext() IdGeneratorBase.Dispose(Boolean) IdGeneratorBase.Dispose() Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerIdGenerator : IdGeneratorBase, IIdGenerator, IDisposable Remarks In general, the generator should be created using SqlServerIdGeneratorFactory . Examples Constructors SqlServerIdGenerator(SqlConnection, String, Int32) Creates a generator for table tableName in database connection with batch size batchSize . Declaration public SqlServerIdGenerator(SqlConnection connection, string tableName, int batchSize) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connection or tableName is null . System.ArgumentException Value of batchSize is less or equal than 0. SqlServerIdGenerator(String, String, Int32) Creates a generator for table tableName in database connectionString with batch size batchSize . Declaration public SqlServerIdGenerator(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Connection string to the database. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connectionString or tableName is null . System.ArgumentException Methods CreateConnection(String) Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.Common.DbConnection Overrides IdGeneratorBase.CreateConnection(String) GetIdStoreTableCreationScript() Returns SQL script for creating table in database for storing IDs. Declaration public static string GetIdStoreTableCreationScript() Returns Type Description System.String GetNewIdFromDbCore() Declaration protected override int GetNewIdFromDbCore() Returns Type Description System.Int32 Overrides IdGeneratorBase.GetNewIdFromDbCore() GetStoredProcedureCreationScript() Returns SQL script for creating stored procedure, which generates IDs. Declaration public static string GetStoredProcedureCreationScript() Returns Type Description System.String InitDatabaseForIdGenerator() Declaration public override void InitDatabaseForIdGenerator() Overrides IdGeneratorBase.InitDatabaseForIdGenerator() Implements IIdGenerator See Also IdGeneratorFactories SqlServerIdGeneratorFactory"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerColumnSchema.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerColumnSchema.html",
    "title": "Class SqlServerColumnSchema | Kros.Libs",
    "keywords": "Class SqlServerColumnSchema Table's column schema for Microsoft SQL Server. Inheritance System.Object ColumnSchema SqlServerColumnSchema Inherited Members ColumnSchema.DefaultDefaultValue ColumnSchema.DefaultAllowNull ColumnSchema.DefaultSize ColumnSchema.Table ColumnSchema.Name ColumnSchema.FullName ColumnSchema.AllowNull ColumnSchema.DefaultValue ColumnSchema.Size ColumnSchema.ToStringDefaultValue() Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerColumnSchema : ColumnSchema Constructors SqlServerColumnSchema(String) Declaration public SqlServerColumnSchema(string name) Parameters Type Name Description System.String name SqlServerColumnSchema(String, Boolean) Declaration public SqlServerColumnSchema(string name, bool allowNull) Parameters Type Name Description System.String name System.Boolean allowNull SqlServerColumnSchema(String, Boolean, Object) Declaration public SqlServerColumnSchema(string name, bool allowNull, object defaultValue) Parameters Type Name Description System.String name System.Boolean allowNull System.Object defaultValue SqlServerColumnSchema(String, Boolean, Object, Int32) Declaration public SqlServerColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name System.Boolean allowNull System.Object defaultValue System.Int32 size Properties SqlDbType Data type of the column. Declaration public SqlDbType SqlDbType { get; set; } Property Value Type Description System.Data.SqlDbType Methods SetParameterDbType(IDataParameter) Declaration public override void SetParameterDbType(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Overrides ColumnSchema.SetParameterDbType(IDataParameter) Exceptions Type Condition System.ArgumentException Value of param is not of type System.Data.SqlClient.SqlParameter . ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator.html",
    "title": "Class SqlServerCacheKeyGenerator | Kros.Libs",
    "keywords": "Class SqlServerCacheKeyGenerator Cache key generator for Microsoft SQL Server used by DatabaseSchemaCache . Inheritance System.Object SqlServerCacheKeyGenerator Implements ISchemaCacheKeyGenerator < System.Data.SqlClient.SqlConnection > ISchemaCacheKeyGenerator Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerCacheKeyGenerator : ISchemaCacheKeyGenerator<SqlConnection>, ISchemaCacheKeyGenerator Methods GenerateKey(SqlConnection) Generates a cache key for connection . The generated key is a string \" SqlServer:SERVER\\database \". Declaration public string GenerateKey(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. Returns Type Description System.String String. Exceptions Type Condition System.ArgumentNullException Value of connection is null . Explicit Interface Implementations ISchemaCacheKeyGenerator.GenerateKey(Object) Declaration string ISchemaCacheKeyGenerator.GenerateKey(object connection) Parameters Type Name Description System.Object connection Returns Type Description System.String Implements ISchemaCacheKeyGenerator<T> ISchemaCacheKeyGenerator"
  },
  "api/Kros.Utils/Kros.Data.Schema.DatabaseSchemaLoader.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DatabaseSchemaLoader.html",
    "title": "Class DatabaseSchemaLoader | Kros.Libs",
    "keywords": "Class DatabaseSchemaLoader Helper class for simple loading of database schemas. It contains inner list of different loaders, so it can be used for loading database schema for different databases. Fresh database schema is loaded for every request, it means, loaded schemas are not cached. Inheritance System.Object DatabaseSchemaLoader Implements IDatabaseSchemaLoader Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchemaLoader : IDatabaseSchemaLoader Remarks Class is a wrapper for loaders for different databases and so it allows loading of database schema for any known database type. More loaders can be added by AddSchemaLoader(IDatabaseSchemaLoader) The class is intended for static use, using property Default . By default, it contains loader for Microsoft SQL Server ( SqlServerSchemaLoader . Examples Properties Default Instance of DatabaseSchemaLoader intended for general use. It contains loader for Microsoft SQL Server by default ( SqlServerSchemaLoader ). Declaration public static DatabaseSchemaLoader Default { get; } Property Value Type Description DatabaseSchemaLoader Methods AddSchemaLoader(IDatabaseSchemaLoader) Adds loader to the list of loaders. Declaration public void AddSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Specific database schema loader. Exceptions Type Condition System.ArgumentNullException Value of loader is null . ClearSchemaLoaders() Removes all loaders in the list. Declaration public void ClearSchemaLoaders() LoadSchema(Object) Declaration public DatabaseSchema LoadSchema(object connection) Parameters Type Name Description System.Object connection Returns Type Description DatabaseSchema Exceptions Type Condition System.ArgumentNullException Value of connection is null . System.ArgumentException Loader for connection type specified by connection does not exist. LoadTableSchema(Object, String) Declaration public TableSchema LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection System.String tableName Returns Type Description TableSchema Exceptions Type Condition System.ArgumentNullException Value of any parameter is null . System.ArgumentException RemoveSchemaLoader(IDatabaseSchemaLoader) Removes loader from the list of loaders. Declaration public void RemoveSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Specific database schema loader to be removed from the list. SupportsConnectionType(Object) Checks, if database schema from connection can be loaded. Declaration public bool SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description System.Boolean true if loading schema for connection is supported, false otherwise. Internal list of loader is checked and method returns true if any of the loaders can load schema from connection . Implements IDatabaseSchemaLoader"
  },
  "api/Kros.Utils/Kros.Data.Schema.DatabaseSchemaCache.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.DatabaseSchemaCache.html",
    "title": "Class DatabaseSchemaCache | Kros.Libs",
    "keywords": "Class DatabaseSchemaCache Implementation of IDatabaseSchemaCache . It allows to load database schemas after adding appropriate loaders ( AddSchemaLoader(IDatabaseSchemaLoader, ISchemaCacheKeyGenerator) ). Loading of a database schema is quite slow, that's why loaded schemas are cached. On next request for the same schema, it is not loaded from database, but returned from cache. Inheritance System.Object DatabaseSchemaCache Implements IDatabaseSchemaCache Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchemaCache : IDatabaseSchemaCache Remarks It is necessary to initialize DatabaseSchemaCache with loaders ( IDatabaseSchemaLoader ) and every loader must have its cache key generator ( ISchemaCacheKeyGenerator ). Different cache key generators should generate different keys. There is a property Default intended for simple static use, so it is not necessary to create own instance. Properties Default Instance of DatabaseSchemaCache intended for simple static use. By default, it contains a loader for Microsoft SQL Server ( SqlServerSchemaLoader ). Declaration public static DatabaseSchemaCache Default { get; } Property Value Type Description DatabaseSchemaCache Methods AddSchemaLoader(IDatabaseSchemaLoader, ISchemaCacheKeyGenerator) Adds loader together with its cache key generator keyGenerator to the inner loaders list. Declaration public void AddSchemaLoader(IDatabaseSchemaLoader loader, ISchemaCacheKeyGenerator keyGenerator) Parameters Type Name Description IDatabaseSchemaLoader loader Database schema loader. ISchemaCacheKeyGenerator keyGenerator Schema cache key generator for loader . Exceptions Type Condition System.ArgumentNullException Value of loader or keyGenerator is null . ClearAllSchemas() Declaration public void ClearAllSchemas() ClearSchema(Object) Declaration public void ClearSchema(object connection) Parameters Type Name Description System.Object connection Exceptions Type Condition System.InvalidOperationException The cache does not contain a loader for database type specified by connection . ClearSchemaLoaders() Removes all database schema loaders. Declaration public void ClearSchemaLoaders() GetSchema(Object) Declaration public DatabaseSchema GetSchema(object connection) Parameters Type Name Description System.Object connection Returns Type Description DatabaseSchema Exceptions Type Condition System.InvalidOperationException The cache does not contain a loader for database type specified by connection . RefreshSchema(Object) Declaration public DatabaseSchema RefreshSchema(object connection) Parameters Type Name Description System.Object connection Returns Type Description DatabaseSchema Exceptions Type Condition System.InvalidOperationException The cache does not contain a loader for database type specified by connection . RemoveSchemaLoader(IDatabaseSchemaLoader) Removes specified loader from inner loaders list. Declaration public void RemoveSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Database schema loader to be removed. Implements IDatabaseSchemaCache"
  },
  "api/Kros.KORM/Kros.KORM.Query.IGroupedQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IGroupedQuery-1.html",
    "title": "Interface IGroupedQuery<T> | Kros.Libs",
    "keywords": "Interface IGroupedQuery<T> Represents result of grouping operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IGroupedQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().OrderBy(\"FirstName DESC, LastName\"); Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM/Kros.KORM.Helper.PropertyName-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Helper.PropertyName-1.html",
    "title": "Class PropertyName<P> | Kros.Libs",
    "keywords": "Class PropertyName<P> Helper for getting property name from class. Inheritance System.Object PropertyName<P> Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public static class PropertyName<P> where P : class Type Parameters Name Description P Class type, from want get property name Examples var propName = PropertyName<Person>.GetPropertyName((p) => p.FirstName); Methods GetPropertyName<T>(Expression<Func<P, T>>) Gets the name of the property. Declaration public static string GetPropertyName<T>(Expression<Func<P, T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <P, T>> expression The expression with property. Returns Type Description System.String Property name. Type Parameters Name Description T Examples var propName = PropertyName<Person>.GetPropertyName((p) => p.FirstName);"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.BulkUpdateBase.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.BulkUpdateBase.html",
    "title": "Class BulkUpdateBase | Kros.Libs",
    "keywords": "Class BulkUpdateBase Common base class for BulkUpdate. Inheritance System.Object BulkUpdateBase SqlServerBulkUpdate Implements IBulkUpdate Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public abstract class BulkUpdateBase : IBulkUpdate, IDisposable Fields _connection Connection. Declaration protected IDbConnection _connection Field Value Type Description System.Data.IDbConnection _disposeOfConnection true if dispose of the connection is necessary, otherwise false . Declaration protected bool _disposeOfConnection Field Value Type Description System.Boolean PrefixTempTable Temporary table prefix. Declaration protected const char PrefixTempTable = '#' Field Value Type Description System.Char Properties DestinationTableName Destination table name in database. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction External transaction in which the operation is executed. Declaration public IDbTransaction ExternalTransaction { get; protected set; } Property Value Type Description System.Data.IDbTransaction PrimaryKeyColumn Primary key. Declaration public string PrimaryKeyColumn { get; set; } Property Value Type Description System.String TempTableAction Declaration public Action<IDbConnection, IDbTransaction, string> TempTableAction { get; set; } Property Value Type Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > Methods CreateBulkInsert() Creates BulkInsert. Declaration protected abstract IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Bulk insert. CreateCommandForPrimaryKey() Returns command for creating primary key. Declaration protected abstract IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand CreateTempTable(IDataReader, String) Creates temporary table by reader . Declaration protected abstract void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader Reader for accessing data. System.String tempTableName Name of temporary table. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing DoneTempTableAsync(String, Boolean) Ends work with temporary table. Declaration protected virtual Task DoneTempTableAsync(string tempTableName, bool useAsync) Parameters Type Name Description System.String tempTableName Temporary table name. System.Boolean useAsync true if action can by executed asynchronously. Returns Type Description System.Threading.Tasks.Task GetColumnNamesForTempTable(IDataReader) List of temporary table columns. Declaration protected string GetColumnNamesForTempTable(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader for accesing data. Returns Type Description System.String GetTempTableName() Returns name of temporary table. Declaration protected abstract string GetTempTableName() Returns Type Description System.String GetTempTableNameForBulkInsert(String) Returns formatted name of temporary table for BulkInsert. Declaration protected virtual string GetTempTableNameForBulkInsert(string name) Parameters Type Name Description System.String name Temporary table name. Returns Type Description System.String GetUpdateColumnNames(IDataReader, String) List of temporary table columns. Declaration protected string GetUpdateColumnNames(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader Reader for accesing data. System.String tempTableName Temporary table name. Returns Type Description System.String InvokeAction(String) Invokes action in temporary database. Declaration protected abstract void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Name of temporary table. Update(IBulkActionDataReader) Declaration public void Update(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Update(DataTable) Declaration public void Update(DataTable table) Parameters Type Name Description System.Data.DataTable table Update(IDataReader) Declaration public void Update(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader UpdateAsync(IBulkActionDataReader) Declaration public Task UpdateAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Returns Type Description System.Threading.Tasks.Task UpdateAsync(DataTable) Declaration public Task UpdateAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Returns Type Description System.Threading.Tasks.Task UpdateAsync(IDataReader) Declaration public Task UpdateAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Returns Type Description System.Threading.Tasks.Task UpdateDestinationTableAsync(IDataReader, String, Boolean) Executes update on destination table. Declaration protected abstract Task UpdateDestinationTableAsync(IDataReader reader, string tempTableName, bool useAsync) Parameters Type Name Description System.Data.IDataReader reader Reader for accesing data. System.String tempTableName Temporary table name. System.Boolean useAsync true if action can by executed asynchronously. Returns Type Description System.Threading.Tasks.Task Implements IBulkUpdate"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.BulkActionFactories.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.BulkActionFactories.html",
    "title": "Class BulkActionFactories | Kros.Libs",
    "keywords": "Class BulkActionFactories Representing set of registered IBulkActionFactory . Inheritance System.Object BulkActionFactories Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public static class BulkActionFactories Methods GetFactory(DbConnection) Gets the IBulkActionFactory with specific connection. Declaration public static IBulkActionFactory GetFactory(DbConnection connection) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. Returns Type Description IBulkActionFactory The IBulkActionFactory instance. GetFactory(String, String) Gets the IBulkActionFactory with specific connection string. Declaration public static IBulkActionFactory GetFactory(string connectionString, string adoClientName) Parameters Type Name Description System.String connectionString The connection string. System.String adoClientName Name of the ado client. (e.g. System.Data.SqlClient.SqlConnection it's: System.Data.SqlClient) Returns Type Description IBulkActionFactory The IBulkActionFactory instance. Register<TConnection>(String, Func<DbConnection, IBulkActionFactory>, Func<String, IBulkActionFactory>) Registers the specified ADO client name. Declaration public static void Register<TConnection>(string adoClientName, Func<DbConnection, IBulkActionFactory> factoryByConnection, Func<string, IBulkActionFactory> factoryByConnectionString) where TConnection : DbConnection Parameters Type Name Description System.String adoClientName Name of the database client. System.Func < System.Data.Common.DbConnection , IBulkActionFactory > factoryByConnection The factory by connection. System.Func < System.String , IBulkActionFactory > factoryByConnectionString The factory by connection string. Type Parameters Name Description TConnection The type of the connection."
  },
  "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkActionFactory.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.SqlServer.SqlServerBulkActionFactory.html",
    "title": "Class SqlServerBulkActionFactory | Kros.Libs",
    "keywords": "Class SqlServerBulkActionFactory Creates instances of IBulkInsert for bulk inserting. Inheritance System.Object SqlServerBulkActionFactory Implements IBulkActionFactory Namespace : Kros.Data.BulkActions.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerBulkActionFactory : IBulkActionFactory Constructors SqlServerBulkActionFactory(SqlConnection) Initializes a new instance of the SqlServerBulkActionFactory class. Declaration public SqlServerBulkActionFactory(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection The connection. SqlServerBulkActionFactory(String) Initializes a new instance of the SqlServerBulkActionFactory class. Declaration public SqlServerBulkActionFactory(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Methods GetBulkInsert() Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert() Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction, SqlBulkCopyOptions) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction, SqlBulkCopyOptions options) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. System.Data.SqlClient.SqlBulkCopyOptions options The options. Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(SqlBulkCopyOptions) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(SqlBulkCopyOptions options) Parameters Type Name Description System.Data.SqlClient.SqlBulkCopyOptions options The options. Returns Type Description IBulkInsert The bulk insert. GetBulkUpdate() Gets the bulk update. Declaration public IBulkUpdate GetBulkUpdate() Returns Type Description IBulkUpdate The bulk update. GetBulkUpdate(DbTransaction) Gets the bulk update. Declaration public IBulkUpdate GetBulkUpdate(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkUpdate The bulk update. Register() Registers factory methods for creation instances to BulkActionFactories . Declaration public static void Register() Implements IBulkActionFactory See Also IBulkActionFactory"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.IBulkUpdate.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.IBulkUpdate.html",
    "title": "Interface IBulkUpdate | Kros.Libs",
    "keywords": "Interface IBulkUpdate Interface for fast data updating in database. Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkUpdate : IDisposable Properties DestinationTableName Destination table name in database. Declaration string DestinationTableName { get; set; } Property Value Type Description System.String PrimaryKeyColumn Primary key. Declaration string PrimaryKeyColumn { get; set; } Property Value Type Description System.String TempTableAction Action, executed on temporary table. Declaration Action<IDbConnection, IDbTransaction, string> TempTableAction { get; set; } Property Value Type Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > Remarks Action, which will be executed on temp table (additional modification of data). Methods Update(IBulkActionDataReader) Updates all data from source reader . Declaration void Update(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Update(DataTable) Updates all data from table table . Declaration void Update(DataTable table) Parameters Type Name Description System.Data.DataTable table Data source. Update(IDataReader) Updates all data from source reader . Declaration void Update(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. UpdateAsync(IBulkActionDataReader) Asynchronously updates all data from source reader . Declaration Task UpdateAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. UpdateAsync(DataTable) Asynchronously updates all data from table table . Declaration Task UpdateAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. UpdateAsync(IDataReader) Asynchronously updates all data from source reader . Declaration Task UpdateAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.DatabaseMapper.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.DatabaseMapper.html",
    "title": "Class DatabaseMapper | Kros.Libs",
    "keywords": "Class DatabaseMapper Mapper for database. Map object types to database informations. Inheritance System.Object DatabaseMapper Implements IDatabaseMapper Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class DatabaseMapper : IDatabaseMapper Constructors DatabaseMapper(IModelMapper) Initializes a new instance of the DatabaseMapper class. Declaration public DatabaseMapper(IModelMapper modelMapper) Parameters Type Name Description IModelMapper modelMapper The model mapper. Methods GetInjector<T>() Get property service injector. Declaration public IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information by model type. Declaration public TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Database table info for model. GetTableInfo<T>() Gets the table information by model type. Declaration public TableInfo GetTableInfo<T>() Returns Type Description TableInfo Database table info for model. Type Parameters Name Description T Model type. Implements IDatabaseMapper See Also IDatabaseMapper"
  },
  "api/Kros.KORM/Kros.KORM.Metadata.Attribute.AliasAttribute.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.Attribute.AliasAttribute.html",
    "title": "Class AliasAttribute | Kros.Libs",
    "keywords": "Class AliasAttribute Attribute which describe database name of property/class. Inheritance System.Object System.Attribute AliasAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property, AllowMultiple = false)] public class AliasAttribute : Attribute, _Attribute Constructors AliasAttribute(String) Initializes a new instance of the AliasAttribute class. Declaration public AliasAttribute(string alias) Parameters Type Name Description System.String alias The database alias. Exceptions Type Condition System.ArgumentNullException The value of alias is null . System.ArgumentException The value of alias is empty string, or stirng containing whitespace characters only. Properties Alias Database alias Declaration public string Alias { get; } Property Value Type Description System.String"
  },
  "api/Kros.Utils/Kros.Data.IdGeneratorFactories.html": {
    "href": "api/Kros.Utils/Kros.Data.IdGeneratorFactories.html",
    "title": "Class IdGeneratorFactories | Kros.Libs",
    "keywords": "Class IdGeneratorFactories Helper class for ID generator factories ( IIdGeneratorFactory ) for different databases. Factories are registered in the class using Register<TConnection>(String, Func<DbConnection, IIdGeneratorFactory>, Func<String, IIdGeneratorFactory>) method. Two factory methods are registered for every connection (database) type. One for creating generator with connection instance and one with connection string. Inheritance System.Object IdGeneratorFactories Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public static class IdGeneratorFactories Remarks SqlServerIdGeneratorFactory is automatically registered. Methods GetFactory(DbConnection) Returns IIdGeneratorFactory for specified connection . Declaration public static IIdGeneratorFactory GetFactory(DbConnection connection) Parameters Type Name Description System.Data.Common.DbConnection connection Database connection. Returns Type Description IIdGeneratorFactory Instance of IIdGeneratorFactory . Exceptions Type Condition System.InvalidOperationException Factory for type of connection is not registered. GetFactory(String, String) Returns IIdGeneratorFactory for specified connectionString and database type adoClientName . Declaration public static IIdGeneratorFactory GetFactory(string connectionString, string adoClientName) Parameters Type Name Description System.String connectionString Connection string for database. System.String adoClientName Name, which specifies database type. Returns Type Description IIdGeneratorFactory Instance of IIdGeneratorFactory . Exceptions Type Condition System.InvalidOperationException Factory for database type specified by adoClientName is not registered. Register<TConnection>(String, Func<DbConnection, IIdGeneratorFactory>, Func<String, IIdGeneratorFactory>) Registers ID generator factory methods factoryByConnection and factoryByConnectionString for database specified by connection type TConnection and client name adoClientName . Declaration public static void Register<TConnection>(string adoClientName, Func<DbConnection, IIdGeneratorFactory> factoryByConnection, Func<string, IIdGeneratorFactory> factoryByConnectionString) where TConnection : DbConnection Parameters Type Name Description System.String adoClientName Name of the database client. It identifies specific database. For example client name for SqlServerIdGeneratorFactory is \"System.Data.SqlClient\" ( ClientId ). System.Func < System.Data.Common.DbConnection , IIdGeneratorFactory > factoryByConnection Factory method for creating IIdGeneratorFactory with connection instance. System.Func < System.String , IIdGeneratorFactory > factoryByConnectionString Factory method for creating IIdGeneratorFactory with connection string. Type Parameters Name Description TConnection Database connection type. Exceptions Type Condition System.ArgumentNullException Value of any argument is null . System.ArgumentException Value of adoClientName is empty string, or string containing only whitespace characters. See Also IIdGeneratorFactory IIdGenerator"
  },
  "api/Kros.Utils/Kros.Data.IdGeneratorBase.html": {
    "href": "api/Kros.Utils/Kros.Data.IdGeneratorBase.html",
    "title": "Class IdGeneratorBase | Kros.Libs",
    "keywords": "Class IdGeneratorBase Base class for simple creation of implementations of IIdGenerator . Inheritance System.Object IdGeneratorBase SqlServerIdGenerator Implements IIdGenerator Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public abstract class IdGeneratorBase : IIdGenerator, IDisposable Constructors IdGeneratorBase(DbConnection, String, Int32) Creates an instance of ID generator for table tableName in database connection and with specified batchSize . Declaration public IdGeneratorBase(DbConnection connection, string tableName, int batchSize) Parameters Type Name Description System.Data.Common.DbConnection connection Database connection. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connection or tableName is null . System.ArgumentException Value of batchSize is less or equal than 0. IdGeneratorBase(String, String, Int32) Creates an instance of ID generator for table tableName in database connectionString and with specified batchSize . Declaration public IdGeneratorBase(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Database connection string. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connectionString or tableName is null . System.ArgumentException Properties BatchSize Batch size - saves roundtrips into database. Declaration public int BatchSize { get; } Property Value Type Description System.Int32 Connection Database connection. Declaration protected DbConnection Connection { get; } Property Value Type Description System.Data.Common.DbConnection TableName Table name for which IDs are generated. Declaration public string TableName { get; } Property Value Type Description System.String Methods CreateConnection(String) Creates a database connection instance. Declaration protected abstract DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Data.Common.DbConnection Specific instance of System.Data.Common.DbConnection . Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetNewIdFromDbCore() Returns new ID from database. In this method is ensured, that the Connection is opened. Declaration protected abstract int GetNewIdFromDbCore() Returns Type Description System.Int32 Next ID. GetNext() Declaration public virtual int GetNext() Returns Type Description System.Int32 InitDatabaseForIdGenerator() Declaration public abstract void InitDatabaseForIdGenerator() Implements IIdGenerator See Also IIdGenerator"
  },
  "api/Kros.Utils/Kros.Data.BulkActions.BulkActionDataReader.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.BulkActionDataReader.html",
    "title": "Class BulkActionDataReader | Kros.Libs",
    "keywords": "Class BulkActionDataReader Wrapper, which extends simple IBulkActionDataReader to more complex System.Data.IDataReader . Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbDataReader BulkActionDataReader Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public class BulkActionDataReader : DbDataReader, IDataReader, IDisposable, IDataRecord, IEnumerable Constructors BulkActionDataReader(IBulkActionDataReader) Creates System.Data.IDataReader over defined reader . Declaration public BulkActionDataReader(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Input reader. Exceptions Type Condition System.ArgumentNullException reader is null . Properties Depth Declaration public override int Depth { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.Depth FieldCount Columns count of the data row. Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.FieldCount HasRows Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.HasRows IsClosed Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsClosed Item[Int32] Declaration public override object this[int i] { get; } Parameters Type Name Description System.Int32 i Property Value Type Description System.Object Overrides System.Data.Common.DbDataReader.Item[System.Int32] Item[String] Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description System.Object Overrides System.Data.Common.DbDataReader.Item[System.String] RecordsAffected Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.RecordsAffected Methods Close() Declaration public override void Close() Overrides System.Data.Common.DbDataReader.Close() GetBoolean(Int32) Declaration public override bool GetBoolean(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.GetBoolean(System.Int32) GetByte(Int32) Declaration public override byte GetByte(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Byte Overrides System.Data.Common.DbDataReader.GetByte(System.Int32) GetBytes(Int32, Int64, Byte[], Int32, Int32) Declaration public override long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldOffset System.Byte [] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) GetDataTypeName(Int32) Declaration public override string GetDataTypeName(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetDataTypeName(System.Int32) GetDateTime(Int32) Declaration public override DateTime GetDateTime(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.DateTime Overrides System.Data.Common.DbDataReader.GetDateTime(System.Int32) GetDecimal(Int32) Declaration public override decimal GetDecimal(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Decimal Overrides System.Data.Common.DbDataReader.GetDecimal(System.Int32) GetDouble(Int32) Declaration public override double GetDouble(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Double Overrides System.Data.Common.DbDataReader.GetDouble(System.Int32) GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Overrides System.Data.Common.DbDataReader.GetEnumerator() GetFieldType(Int32) Declaration public override Type GetFieldType(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Type Overrides System.Data.Common.DbDataReader.GetFieldType(System.Int32) GetFloat(Int32) Declaration public override float GetFloat(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Single Overrides System.Data.Common.DbDataReader.GetFloat(System.Int32) GetGuid(Int32) Declaration public override Guid GetGuid(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Guid Overrides System.Data.Common.DbDataReader.GetGuid(System.Int32) GetChar(Int32) Declaration public override char GetChar(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Char Overrides System.Data.Common.DbDataReader.GetChar(System.Int32) GetChars(Int32, Int64, Char[], Int32, Int32) Declaration public override long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldoffset System.Char [] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) GetInt16(Int32) Declaration public override short GetInt16(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int16 Overrides System.Data.Common.DbDataReader.GetInt16(System.Int32) GetInt32(Int32) Declaration public override int GetInt32(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetInt32(System.Int32) GetInt64(Int32) Declaration public override long GetInt64(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetInt64(System.Int32) GetName(Int32) Returns column name at index i . Declaration public override string GetName(int i) Parameters Type Name Description System.Int32 i Index of column. Returns Type Description System.String Column name. Overrides System.Data.Common.DbDataReader.GetName(System.Int32) Exceptions Type Condition System.IndexOutOfRangeException Defined index is not between 0 and FieldCount . GetOrdinal(String) Returns column index by its name name . Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name Name of column. Returns Type Description System.Int32 Index of column. Overrides System.Data.Common.DbDataReader.GetOrdinal(System.String) GetSchemaTable() Declaration public override DataTable GetSchemaTable() Returns Type Description System.Data.DataTable Overrides System.Data.Common.DbDataReader.GetSchemaTable() GetString(Int32) Declaration public override string GetString(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetString(System.Int32) GetValue(Int32) Returns value of column. Declaration public override object GetValue(int i) Parameters Type Name Description System.Int32 i Column index. Returns Type Description System.Object Object value of column. Overrides System.Data.Common.DbDataReader.GetValue(System.Int32) Exceptions Type Condition System.IndexOutOfRangeException Defined index is not between 0 and FieldCount . GetValues(Object[]) Declaration public override int GetValues(object[] values) Parameters Type Name Description System.Object [] values Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetValues(System.Object[]) IsDBNull(Int32) Declaration public override bool IsDBNull(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsDBNull(System.Int32) NextResult() Declaration public override bool NextResult() Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.NextResult() Read() Moves reader to next record. Declaration public override bool Read() Returns Type Description System.Boolean true if next record exists and reader is moved, false if there is no next record. Overrides System.Data.Common.DbDataReader.Read()"
  },
  "api/Kros.KORM/Kros.KORM.Query.SqlServerQueryProvider.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.SqlServerQueryProvider.html",
    "title": "Class SqlServerQueryProvider | Kros.Libs",
    "keywords": "Class SqlServerQueryProvider Provider, which know execute query for Sql Server. Inheritance System.Object QueryProvider SqlServerQueryProvider Implements IQueryProvider Inherited Members QueryProvider.SetParameterDbType(DbParameter, String, String) QueryProvider.Execute<T>(IQuery<T>) QueryProvider.ExecuteScalar<T>(IQuery<T>) QueryProvider.ExecuteInTransactionAsync(Func<Task>) QueryProvider.ExecuteNonQueryCommand(IDbCommand) QueryProvider.ExecuteNonQueryCommandAsync(DbCommand) QueryProvider.ExecuteNonQuery(String) QueryProvider.ExecuteNonQuery(String, CommandParameterCollection) QueryProvider.ExecuteStoredProcedure<TResult>(String) QueryProvider.ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) QueryProvider.GetCommandForCurrentTransaction() QueryProvider.BeginTransaction(IsolationLevel) QueryProvider.CreateIdGenerator(String, Int32) QueryProvider.CreateQuery(Expression) QueryProvider.CreateQuery<TElement>(Expression) QueryProvider.Execute(Expression) QueryProvider.Execute<TResult>(Expression) QueryProvider.GetCurrentTransaction() QueryProvider.ConnectionString QueryProvider.IsExternalConnection QueryProvider.Connection QueryProvider.Dispose(Boolean) QueryProvider.Dispose() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class SqlServerQueryProvider : QueryProvider, IQueryProvider, IQueryProvider, IDisposable Constructors SqlServerQueryProvider(ConnectionStringSettings, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the SqlServerQueryProvider class. Declaration public SqlServerQueryProvider(ConnectionStringSettings connectionString, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string settings. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. SqlServerQueryProvider(DbConnection, ISqlExpressionVisitor, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public SqlServerQueryProvider(DbConnection connection, ISqlExpressionVisitor sqlGenerator, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. ISqlExpressionVisitor sqlGenerator The SQL generator. IModelBuilder modelBuilder The model builder. ILogger logger The logger. Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration public override DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Overrides QueryProvider.DbProviderFactory Methods CreateBulkInsert() Creates instance of IBulkInsert . Declaration public override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . Overrides QueryProvider.CreateBulkInsert() CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration public override IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . Overrides QueryProvider.CreateBulkUpdate() GetSchemaLoader() Returns instance of SqlServerSchemaLoader . Declaration protected override IDatabaseSchemaLoader GetSchemaLoader() Returns Type Description IDatabaseSchemaLoader Overrides QueryProvider.GetSchemaLoader() Implements IQueryProvider See Also QueryProvider"
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.html",
    "title": "Class DefaultQuerySqlGenerator | Kros.Libs",
    "keywords": "Class DefaultQuerySqlGenerator Default sql query visitor for generating SELECT command. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor DefaultQuerySqlGenerator Implements ISqlExpressionVisitor Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class DefaultQuerySqlGenerator : ExpressionVisitor, ISqlExpressionVisitor Constructors DefaultQuerySqlGenerator(IDatabaseMapper) Constructor. Declaration public DefaultQuerySqlGenerator(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper. Properties DatabaseMapper Gets the database mapper. Declaration protected IDatabaseMapper DatabaseMapper { get; } Property Value Type Description IDatabaseMapper LinqParameters Gets the linq query parameters. Declaration protected DefaultQuerySqlGenerator.Parameters LinqParameters { get; } Property Value Type Description DefaultQuerySqlGenerator.Parameters LinqStringBuilder Gets the linq string builder. Declaration protected StringBuilder LinqStringBuilder { get; } Property Value Type Description System.Text.StringBuilder SelectExpression Get root select expression. Declaration protected SelectExpression SelectExpression { get; } Property Value Type Description SelectExpression Methods BindAnyCondition(String) Adds any method to query. Declaration protected virtual string BindAnyCondition(string existsCondition) Parameters Type Name Description System.String existsCondition Returns Type Description System.String BindContains(MethodCallExpression) Binds the System.String.Contains(System.String) method. Declaration protected virtual Expression BindContains(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindEndWith(MethodCallExpression) Binds the System.String.EndsWith(System.String) method. Declaration protected virtual Expression BindEndWith(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindIsNullOrEmpty(MethodCallExpression) Binds the System.String.IsNullOrEmpty(System.String) method. Declaration protected virtual Expression BindIsNullOrEmpty(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindReplace(MethodCallExpression) Binds the System.String.Replace(System.String,System.String) method. Declaration protected virtual Expression BindReplace(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindStartWith(MethodCallExpression) Binds the System.String.StartsWith(System.String) method. Declaration protected virtual Expression BindStartWith(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindSubstring(MethodCallExpression) Binds the System.String.Substring(System.Int32) method. Declaration protected virtual Expression BindSubstring(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindToLower(MethodCallExpression) Binds to System.String.ToLower method. Declaration protected virtual Expression BindToLower(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindToUpper(MethodCallExpression) Binds to System.String.ToUpper method. Declaration protected virtual Expression BindToUpper(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindTrim(MethodCallExpression) Binds the System.String.Trim method. Declaration protected virtual Expression BindTrim(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression GenerateSql(Expression) Generates the SQL from expression. Declaration public virtual string GenerateSql(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression The expression. Returns Type Description System.String SQL select command text. GetOperator(BinaryExpression) Gets the operator. Declaration protected virtual string GetOperator(BinaryExpression expression) Parameters Type Name Description System.Linq.Expressions.BinaryExpression expression The expression. Returns Type Description System.String Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. Declaration public override Expression Visit(Expression node) Parameters Type Name Description System.Linq.Expressions.Expression node The expression to visit. Returns Type Description System.Linq.Expressions.Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression) VisitAggregate(MethodCallExpression, String) Visits the Linq aggregate methods. Declaration protected virtual Expression VisitAggregate(MethodCallExpression expression, string aggregateName) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. System.String aggregateName Name of aggreage method. Returns Type Description System.Linq.Expressions.Expression VisitAny(MethodCallExpression) Visits the Linq Any method. Declaration protected virtual Expression VisitAny(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitBinary(BinaryExpression) Visits the Linq Binary. Declaration protected override Expression VisitBinary(BinaryExpression expression) Parameters Type Name Description System.Linq.Expressions.BinaryExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression) Exceptions Type Condition System.NotSupportedException If this binary expression is not supported. VisitColumns(ColumnsExpression) Visits the columns. Declaration public virtual Expression VisitColumns(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitCompare(MethodCallExpression, ExpressionType) Visit Visual Basic Compare expression Declaration protected virtual Expression VisitCompare(MethodCallExpression expression, ExpressionType binExpNodeType) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Method call expression Compare expression System.Linq.Expressions.ExpressionType binExpNodeType Binary expression node type Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitConstant(ConstantExpression) Visits the constant. Declaration protected override Expression VisitConstant(ConstantExpression expression) Parameters Type Name Description System.Linq.Expressions.ConstantExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression) Exceptions Type Condition System.NotSupportedException If type of constant is System.Object . VisitCount(MethodCallExpression) Visits the Linq Count method. Declaration protected virtual Expression VisitCount(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitFirst(MethodCallExpression) Visits the Linq First. Declaration protected virtual Expression VisitFirst(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitGroupBy(GroupByExpression) Visits the group by. Declaration public virtual Expression VisitGroupBy(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitLinqExpression(MethodCallExpression) Visits the linq expression. Declaration protected virtual Expression VisitLinqExpression(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The method call expression. Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitMember(MemberExpression) Visits the member. Declaration protected override Expression VisitMember(MemberExpression expression) Parameters Type Name Description System.Linq.Expressions.MemberExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression) Exceptions Type Condition System.NotSupportedException If the member type is not supported. VisitMethodCall(MethodCallExpression) Visits the method call. Declaration protected override Expression VisitMethodCall(MethodCallExpression m) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression m The method call expression. Returns Type Description System.Linq.Expressions.Expression Reuced expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) VisitOrderBy(OrderByExpression) Visits the order by. Declaration public virtual Expression VisitOrderBy(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSelect(SelectExpression) Visits the select. Declaration public virtual Expression VisitSelect(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression The select expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSql(SqlExpression) Visits the SQL. Declaration public virtual Expression VisitSql(SqlExpression sqlExpression) Parameters Type Name Description SqlExpression sqlExpression The SQL expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitStringMethods(MethodCallExpression) Visits the string methods. Declaration protected virtual Expression VisitStringMethods(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Exceptions Type Condition System.NotSupportedException If this System.String method is not supported. VisitTable(TableExpression) Visits the table. Declaration public virtual Expression VisitTable(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitTake(MethodCallExpression) Visits the Linq Take method. Declaration protected virtual Expression VisitTake(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Exceptions Type Condition System.NotSupportedException If call of Take method is not supported. VisitUnary(UnaryExpression) Visits the unary. Declaration protected override Expression VisitUnary(UnaryExpression expression) Parameters Type Name Description System.Linq.Expressions.UnaryExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression) Exceptions Type Condition System.NotSupportedException If this unary expression is not supported. VisitVbOperatorsMethods(MethodCallExpression, ExpressionType) Visit Visual Basic operators expressions. Declaration protected virtual Expression VisitVbOperatorsMethods(MethodCallExpression expression, ExpressionType binExpNodeType) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Method call expression System.Linq.Expressions.ExpressionType binExpNodeType Binary expression node type Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitWhere(WhereExpression) Visits the where. Declaration public virtual Expression VisitWhere(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitWhere(MethodCallExpression) Visits the Linq Where method. Declaration protected virtual Expression VisitWhere(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Implements ISqlExpressionVisitor See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.IProjectionQuery-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IProjectionQuery-1.html",
    "title": "Interface IProjectionQuery<T> | Kros.Libs",
    "keywords": "Interface IProjectionQuery<T> Represent result of projection operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IProjectionQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods Any(RawSqlString, Object[]) Check if exist elements in the table which match condition. Declaration bool Any(RawSqlString whereCondition, params object[] args) Parameters Type Name Description RawSqlString whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description System.Boolean true if exist elements in the table which match condition; otherwise, false. Examples var exist = database.Query<Person>().Any(\"Age > @1\", 18); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. Any(FormattableString) Check if exist elements in the table which match condition. Declaration bool Any(FormattableString whereCondition) Parameters Type Name Description System.FormattableString whereCondition The where condition. Returns Type Description System.Boolean true if exist elements in the table which match condition; otherwise, false. Examples var exist = database.Query<Person>().Any($\"Age > {18}\"); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. FirstOrDefault(RawSqlString, Object[]) Returns the first item of which match where condition, or a default value if item doesn't exist. Declaration T FirstOrDefault(RawSqlString whereCondition, params object[] args) Parameters Type Name Description RawSqlString whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description T null if item doesn't exist; otherwise, the first item which match the condition. Examples var item = query.FirstOrDefault(\"Id = @1\", 22); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. FirstOrDefault(FormattableString) Returns the first item of which match where condition, or a default value if item doesn't exist. Declaration T FirstOrDefault(FormattableString whereCondition) Parameters Type Name Description System.FormattableString whereCondition The where condition. Returns Type Description T null if item doesn't exist; otherwise, the first item which match the condition. Examples var item = query.FirstOrDefault($\"Id = {22}\"); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. GroupBy(String) Add group by statement to sql query. Declaration IGroupedQuery<T> GroupBy(string groupBy) Parameters Type Name Description System.String groupBy The group by statement. Returns Type Description IGroupedQuery <T> Query for enumerable models. Remarks You can also add HAVING statement. Examples var people = database.Query<Person>().GroupBy(\"FirstName, LastName\"); Exceptions Type Condition System.ArgumentNullException if groupBy is null or white string. OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().OrderBy(\"FirstName DESC, LastName\"); Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. Where(RawSqlString, Object[]) Add where condition to sql. Declaration IFilteredQuery<T> Where(RawSqlString whereCondition, params object[] args) Parameters Type Name Description RawSqlString whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description IFilteredQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().Where(\"Id < @1 AND Age > @2\", 1000, 18); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. Where(FormattableString) Add where condition to sql. Declaration IFilteredQuery<T> Where(FormattableString whereCondition) Parameters Type Name Description System.FormattableString whereCondition The where condition. Returns Type Description IFilteredQuery <T> Query for enumerable models. Examples var item = query.Where($\"Id = {1}\") Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessParseDefaultValueEventArgs.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessParseDefaultValueEventArgs.html",
    "title": "Class MsAccessParseDefaultValueEventArgs | Kros.Libs",
    "keywords": "Class MsAccessParseDefaultValueEventArgs Arguments for the event ParseDefaultValue . Inheritance System.Object System.EventArgs MsAccessParseDefaultValueEventArgs Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessParseDefaultValueEventArgs : EventArgs Constructors MsAccessParseDefaultValueEventArgs(String, String, OleDbType, String, Object) Creates and initializes instance of arguments. Declaration public MsAccessParseDefaultValueEventArgs(string tableName, string columnName, OleDbType oleDbType, string defaultValueString, object defaultValue) Parameters Type Name Description System.String tableName System.String columnName System.Data.OleDb.OleDbType oleDbType System.String defaultValueString System.Object defaultValue Value, which was obtained by default parser. Properties ColumnName Column name which default value is being parsed. Declaration public string ColumnName { get; } Property Value Type Description System.String DefaultValue Value, which was obtained by default parser. Set this value, when using custom logic for parsing default value in event handler. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object DefaultValueString Default value of a column. It is the string which is being parsed. Declaration public string DefaultValueString { get; } Property Value Type Description System.String Handled Flag indicating if default value was parsed using custom logic in event handler. Set this to true if you set your own default value in DefaultValue . Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean OleDbType Data type of column which default value is being parsed. Declaration public OleDbType OleDbType { get; } Property Value Type Description System.Data.OleDb.OleDbType TableName Table which schema is being loaded. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessColumnSchema.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.Schema.MsAccess.MsAccessColumnSchema.html",
    "title": "Class MsAccessColumnSchema | Kros.Libs",
    "keywords": "Class MsAccessColumnSchema Table's column schema for Microsoft Access. Inheritance System.Object ColumnSchema MsAccessColumnSchema Inherited Members ColumnSchema.DefaultDefaultValue ColumnSchema.DefaultAllowNull ColumnSchema.DefaultSize ColumnSchema.Table ColumnSchema.Name ColumnSchema.FullName ColumnSchema.AllowNull ColumnSchema.DefaultValue ColumnSchema.Size ColumnSchema.ToStringDefaultValue() Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessColumnSchema : ColumnSchema Constructors MsAccessColumnSchema(String) Declaration public MsAccessColumnSchema(string name) Parameters Type Name Description System.String name MsAccessColumnSchema(String, Boolean) Declaration public MsAccessColumnSchema(string name, bool allowNull) Parameters Type Name Description System.String name System.Boolean allowNull MsAccessColumnSchema(String, Boolean, Object) Declaration public MsAccessColumnSchema(string name, bool allowNull, object defaultValue) Parameters Type Name Description System.String name System.Boolean allowNull System.Object defaultValue MsAccessColumnSchema(String, Boolean, Object, Int32) Declaration public MsAccessColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name System.Boolean allowNull System.Object defaultValue System.Int32 size Properties OleDbType Data type of the column. Declaration public OleDbType OleDbType { get; set; } Property Value Type Description System.Data.OleDb.OleDbType Methods SetParameterDbType(IDataParameter) Declaration public override void SetParameterDbType(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Overrides ColumnSchema.SetParameterDbType(IDataParameter) Exceptions Type Condition System.ArgumentException Hodnota param nie je typu System.Data.OleDb.OleDbParameter . ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.html",
    "title": "Class SqlServerParseDefaultValueEventArgs | Kros.Libs",
    "keywords": "Class SqlServerParseDefaultValueEventArgs Arguments for the event ParseDefaultValue . Inheritance System.Object System.EventArgs SqlServerParseDefaultValueEventArgs Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerParseDefaultValueEventArgs : EventArgs Constructors SqlServerParseDefaultValueEventArgs(String, String, SqlDbType, String, Object) Creates and initializes instance of arguments. Declaration public SqlServerParseDefaultValueEventArgs(string tableName, string columnName, SqlDbType sqlDbType, string defaultValueString, object defaultValue) Parameters Type Name Description System.String tableName System.String columnName System.Data.SqlDbType sqlDbType System.String defaultValueString System.Object defaultValue Value, which was obtained by default parser. Properties ColumnName Column name which default value is being parsed. Declaration public string ColumnName { get; } Property Value Type Description System.String DefaultValue Value, which was obtained by default parser. Set this value, when using custom logic for parsing default value in event handler. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object DefaultValueString Default value of a column. It is the string which is being parsed. Declaration public string DefaultValueString { get; } Property Value Type Description System.String Handled Flag indicating if default value was parsed using custom logic in event handler. Set this to true if you set your own default value in DefaultValue . Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean SqlDbType Data type of column which default value is being parsed. Declaration public SqlDbType SqlDbType { get; } Property Value Type Description System.Data.SqlDbType TableName Table which schema is being loaded. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.WhereExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.WhereExpression.html",
    "title": "Class WhereExpression | Kros.Libs",
    "keywords": "Class WhereExpression Expression, which represent WHERE statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression WhereExpression Inherited Members ArgsExpression.Sql ArgsExpression.Parameters QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class WhereExpression : ArgsExpression Constructors WhereExpression(RawSqlString, Object[]) Initializes a new instance of the TableExpression class. Declaration public WhereExpression(RawSqlString whereCondition, params object[] args) Parameters Type Name Description RawSqlString whereCondition The where condition. System.Object [] args Where args. Fields WhereStatement Where statement Declaration public const string WhereStatement = \"WHERE\" Field Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.ColumnsExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.ColumnsExpression.html",
    "title": "Class ColumnsExpression | Kros.Libs",
    "keywords": "Class ColumnsExpression Expression which represent projection part of sql select. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ColumnsExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class ColumnsExpression : QueryExpression Constructors ColumnsExpression(String) Initializes a new instance of the ColumnsExpression class. Declaration public ColumnsExpression(string columns) Parameters Type Name Description System.String columns The columns part of sql. Remarks Columns are separate by , ColumnsExpression(String[]) Initializes a new instance of the ColumnsExpression class. Declaration public ColumnsExpression(params string[] columns) Parameters Type Name Description System.String [] columns The columns. Properties ColumnsPart Gets the columns part. Declaration public string ColumnsPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) Create<T, TResult>(Func<T, TResult>, TableInfo) Creates the ColumnsExpression by selector. Declaration public static ColumnsExpression Create<T, TResult>(Func<T, TResult> selector, TableInfo tableInfo) Parameters Type Name Description System.Func <T, TResult> selector The selector. TableInfo tableInfo The table information. Returns Type Description ColumnsExpression ColumnsExpression Type Parameters Name Description T Type of model class. TResult The type of the result. See Also ISqlExpressionVisitor"
  },
  "api/Kros.Utils/Kros.UnitTests.SqlServerDatabaseTestBase.html": {
    "href": "api/Kros.Utils/Kros.UnitTests.SqlServerDatabaseTestBase.html",
    "title": "Class SqlServerDatabaseTestBase | Kros.Libs",
    "keywords": "Class SqlServerDatabaseTestBase Base class for database integration tests on Microsoft SQL Server. The class takes care of creating and initialization of database. Inherited classes just use connection to this database. Inheritance System.Object SqlServerDatabaseTestBase Namespace : Kros.UnitTests Assembly : Kros.Utils.dll Syntax public abstract class SqlServerDatabaseTestBase : IDisposable Remarks Database with unique name is created at the begining and it is deleted when Dispose() is called. The created database may be initielized with own scripts in DatabaseInitScripts . Descendant classes must override BaseConnectionString to set the connection to SQL Server. public class SomeDatabaseTests : Kros.UnitTests.SqlServerDatabaseTestBase { protected override string BaseConnectionString => \"Data Source=TESTSQLSERVER;Integrated Security=True\"; [Fact] public void Test1() { using (var cmd = ServerHelper.Connection.CreateCommand()) { // Use cmd to execute queries. } } [Fact] public void Test2() { } } Constructors SqlServerDatabaseTestBase() Creates an instance of SqlServerDatabaseTestBase . Declaration public SqlServerDatabaseTestBase() Properties BaseConnectionString Base connection string to SQL Server, where database will be created. It does not need to have database name, because it will be generated to make it unique. Declaration protected abstract string BaseConnectionString { get; } Property Value Type Description System.String See Also SqlServerTestHelper BaseConnectionString BaseDatabaseName Base database name. GUID is appended to this name to make it unique. Default implementation returns class full name ( GetType().FullName ) with underscore ( _ ) appended. Declaration protected virtual string BaseDatabaseName { get; } Property Value Type Description System.String See Also BaseDatabaseName SqlServerTestHelper DatabaseInitScripts SQL scripts for initializing created database. Declaration protected virtual IEnumerable<string> DatabaseInitScripts { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Remarks The class creates a database for tests using SqlServerTestHelper . If it is necessary to have this database initialized (tables, data...), this is the list of scripts for it. ServerHelper Helper for accessing database using its Connection property. Declaration protected SqlServerTestHelper ServerHelper { get; } Property Value Type Description SqlServerTestHelper Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing CheckDisposed() Checks, if the instance was disposed of ( Dispose() was called). If yes, it throws System.ObjectDisposedException . Declaration protected void CheckDisposed() Exceptions Type Condition System.ObjectDisposedException If the instance was already disposed of."
  },
  "api/Kros.Utils/Kros.Data.Schema.ISchemaCacheKeyGenerator-1.html": {
    "href": "api/Kros.Utils/Kros.Data.Schema.ISchemaCacheKeyGenerator-1.html",
    "title": "Interface ISchemaCacheKeyGenerator<T> | Kros.Libs",
    "keywords": "Interface ISchemaCacheKeyGenerator<T> Inherited Members ISchemaCacheKeyGenerator.GenerateKey(Object) Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface ISchemaCacheKeyGenerator<T> : ISchemaCacheKeyGenerator Type Parameters Name Description T Database connection type. Methods GenerateKey(T) Declaration string GenerateKey(T connection) Parameters Type Name Description T connection Returns Type Description System.String"
  },
  "api/Kros.KORM/Kros.KORM.Query.Expressions.SelectExpression.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Expressions.SelectExpression.html",
    "title": "Class SelectExpression | Kros.Libs",
    "keywords": "Class SelectExpression Expression, which represent SELECT query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression SelectExpression Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class SelectExpression : QueryExpression Constructors SelectExpression(TableInfo) Initializes a new instance of the SelectExpression class. Declaration public SelectExpression(TableInfo tableInfo) Parameters Type Name Description TableInfo tableInfo The table info. Fields SelectStatement The select statement Declaration public const string SelectStatement = \"SELECT\" Field Value Type Description System.String Properties ColumnsExpression Gets the columns expression. Declaration public ColumnsExpression ColumnsExpression { get; } Property Value Type Description ColumnsExpression GroupByExpression Gets or sets the group by expression. Declaration public GroupByExpression GroupByExpression { get; } Property Value Type Description GroupByExpression NodeType Gets the node type of this System.Linq.Expressions.Expression . Declaration public override sealed ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides QueryExpression.NodeType OrderByExpression Gets or sets the order by expression. Declaration public OrderByExpression OrderByExpression { get; } Property Value Type Description OrderByExpression TableExpression Gets the table expression. Declaration public TableExpression TableExpression { get; } Property Value Type Description TableExpression Type Gets the static type of the expression that this System.Linq.Expressions.Expression represents. Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides QueryExpression.Type Value Gets the value. Declaration public object Value { get; } Property Value Type Description System.Object WhereExpression Gets or sets the where expression. Declaration public WhereExpression WhereExpression { get; } Property Value Type Description WhereExpression Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) SetColumnsExpression(ColumnsExpression) Sets the columns expression. Declaration public void SetColumnsExpression(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Exceptions Type Condition System.ArgumentException 'columnExpression' can be applied only once.;columnsExpression SetGroupByExpression(GroupByExpression) Sets the group by expression. Declaration public void SetGroupByExpression(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Exceptions Type Condition System.ArgumentException 'groupByExpression' can be applied only once.;groupByExpression SetOrderByExpression(OrderByExpression) Sets the order by expression. Declaration public void SetOrderByExpression(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Exceptions Type Condition System.ArgumentException 'orderByExpression' can be applied only once.;orderByExpression SetTableExpression(TableExpression) Sets the table expression. Declaration public void SetTableExpression(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Exceptions Type Condition System.ArgumentException 'tableExpression' can be applied only once.;tableExpression SetWhereExpression(WhereExpression) Sets the where expression. Declaration public void SetWhereExpression(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Exceptions Type Condition System.ArgumentException 'whereExpression' can be applied only once.;whereExpression VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor An instance of System.Func<T, TResult> . Returns Type Description System.Linq.Expressions.Expression The expression being visited, or an expression which should replace it in the tree. Overrides System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkUpdate.html": {
    "href": "api/Kros.Utils.MsAccess/Kros.Data.BulkActions.MsAccess.MsAccessBulkUpdate.html",
    "title": "Class MsAccessBulkUpdate | Kros.Libs",
    "keywords": "Class MsAccessBulkUpdate Class for fast bulk data update for Microsoft Access. Inheritance System.Object BulkUpdateBase MsAccessBulkUpdate Implements IBulkUpdate Inherited Members BulkUpdateBase.PrefixTempTable BulkUpdateBase._connection BulkUpdateBase._disposeOfConnection BulkUpdateBase.ExternalTransaction BulkUpdateBase.DestinationTableName BulkUpdateBase.TempTableAction BulkUpdateBase.PrimaryKeyColumn BulkUpdateBase.Update(IBulkActionDataReader) BulkUpdateBase.UpdateAsync(IBulkActionDataReader) BulkUpdateBase.Update(IDataReader) BulkUpdateBase.UpdateAsync(IDataReader) BulkUpdateBase.Update(DataTable) BulkUpdateBase.UpdateAsync(DataTable) BulkUpdateBase.DoneTempTableAsync(String, Boolean) BulkUpdateBase.GetColumnNamesForTempTable(IDataReader) BulkUpdateBase.GetUpdateColumnNames(IDataReader, String) BulkUpdateBase.Dispose() Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkUpdate : BulkUpdateBase, IBulkUpdate, IDisposable Remarks The bulk update uses a temporary database. Examples Constructors MsAccessBulkUpdate(OleDbConnection) Creates new instance of MsAccessBulkUpdate for database connection . Declaration public MsAccessBulkUpdate(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. MsAccessBulkUpdate(OleDbConnection, OleDbTransaction) Creates new instance of MsAccessBulkUpdate for database connection and with transaction externalTransaction . Declaration public MsAccessBulkUpdate(OleDbConnection connection, OleDbTransaction externalTransaction) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. If there already is running transaction in this connection, it must be specified in externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Transaction in which the bulk insert will be performed. MsAccessBulkUpdate(String) Creates new instance of MsAccessBulkUpdate for database connectionString . Declaration public MsAccessBulkUpdate(string connectionString) Parameters Type Name Description System.String connectionString Connection string to the database where the data will be inserted. Methods CreateBulkInsert() Declaration protected override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Overrides BulkUpdateBase.CreateBulkInsert() CreateCommandForPrimaryKey() Declaration protected override IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand Overrides BulkUpdateBase.CreateCommandForPrimaryKey() CreateTempTable(IDataReader, String) Declaration protected override void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName Overrides BulkUpdateBase.CreateTempTable(IDataReader, String) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides BulkUpdateBase.Dispose(Boolean) GetTempTableName() Declaration protected override string GetTempTableName() Returns Type Description System.String Overrides BulkUpdateBase.GetTempTableName() GetTempTableNameForBulkInsert(String) Declaration protected override string GetTempTableNameForBulkInsert(string name) Parameters Type Name Description System.String name Returns Type Description System.String Overrides BulkUpdateBase.GetTempTableNameForBulkInsert(String) InvokeAction(String) Declaration protected override void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Overrides BulkUpdateBase.InvokeAction(String) UpdateDestinationTableAsync(IDataReader, String, Boolean) Declaration protected override Task UpdateDestinationTableAsync(IDataReader reader, string tempTableName, bool useAsync) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName System.Boolean useAsync Returns Type Description System.Threading.Tasks.Task Overrides BulkUpdateBase.UpdateDestinationTableAsync(IDataReader, String, Boolean) Implements IBulkUpdate"
  },
  "api/Kros.Utils/Kros.Utils.Check.html": {
    "href": "api/Kros.Utils/Kros.Utils.Check.html",
    "title": "Class Check | Kros.Libs",
    "keywords": "Class Check Helper class for validating method parameters. Every validation throws some kind of System.ArgumentException if it fails ( System.ArgumentException , System.ArgumentNullException , System.ArgumentOutOfRangeException ). Inheritance System.Object Check Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public static class Check Remarks Default way of validating method parameters is: private string _value1; private int _value2; public void MethodWithParameters(string arg1, int arg2) { if (string.IsNullOrEmpty(arg1)) { throw new ArgumentNullException(nameof(arg1)); } if (arg2 <= 0) { throw new ArgumentException(\"Hodnota parametra arg2 musí byť väčšia ako 0.\", nameof(arg2)); } _value1 = arg1; _value2 = arg2; // ... } With the help of <code>Check</code> class, this is very easy. If it is possible, the validation methods return input value, so the parameter&apos;s value can be validated and assigned on one line: private string _value1; private int _value2; public void MethodWithParameters(string arg1, int arg2) { _value1 = Check.NotNullOrEmpty(arg1, nameof(arg1)); _value2 = Check.GreaterThan(arg2, 0, nameof(arg2)); // ... } Methods Equal<T>(T, T, String) The value of param must be value . Declaration public static T Equal<T>(T param, T value, string paramName) Parameters Type Name Description T param Validated value. T value Required value of the param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is not value . Equal<T>(T, T, String, String) The value of param must be value . Thrown exception has custom message message . Declaration public static T Equal<T>(T param, T value, string paramName, string message) Parameters Type Name Description T param Validated value. T value Required value of the param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is not value . GreaterOrEqualThan<T>(T, T, String) The value of param must be greater or equal than value . Declaration public static T GreaterOrEqualThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is less than value . GreaterOrEqualThan<T>(T, T, String, String) The value of param must be greater or equal than value . Thrown exception has custom message message . Declaration public static T GreaterOrEqualThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is less than value . GreaterThan<T>(T, T, String) The value of param must be greater than value . Declaration public static T GreaterThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is less or equal than value . GreaterThan<T>(T, T, String, String) The value of param must be greater than value . Thrown exception has custom message message . Declaration public static T GreaterThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is less or equal than value . IsInList<T>(T, IEnumerable<T>, String) The value of param must be in list list . Declaration public static T IsInList<T>(T param, IEnumerable<T> list, string paramName) Parameters Type Name Description T param The value, which must be in the list list . System.Collections.Generic.IEnumerable <T> list List of checked values. System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is not in the list list . IsInList<T>(T, IEnumerable<T>, String, String) The value of param must be in list list . Thrown exception has custom message message . Declaration public static T IsInList<T>(T param, IEnumerable<T> list, string paramName, string message) Parameters Type Name Description T param The value, which must be in the list list . System.Collections.Generic.IEnumerable <T> list List of checked values. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is not in the list list . IsNotInList<T>(T, IEnumerable<T>, String) The value of param must not be in list list . Declaration public static T IsNotInList<T>(T param, IEnumerable<T> list, string paramName) Parameters Type Name Description T param The value, which must not be in the list list . System.Collections.Generic.IEnumerable <T> list List of checked values. System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is in the list list . IsNotInList<T>(T, IEnumerable<T>, String, String) The value of param must not be in list list . Thrown exception has custom message message . Declaration public static T IsNotInList<T>(T param, IEnumerable<T> list, string paramName, string message) Parameters Type Name Description T param The value, which must not be in the list list . System.Collections.Generic.IEnumerable <T> list List of checked values. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is in the list list . IsNotOfType(Object, Type, String) The value of param must not be of type notExpectedType . Declaration public static void IsNotOfType(object param, Type notExpectedType, string paramName) Parameters Type Name Description System.Object param Validated value. System.Type notExpectedType The value of param must not be of this type. System.String paramName Name of the method parameter. Exceptions Type Condition System.ArgumentException The value of param is of forbidden type. IsNotOfType(Object, Type, String, String) The value of param must not be of type notExpectedType . Thrown exception has custom message message . Declaration public static void IsNotOfType(object param, Type notExpectedType, string paramName, string message) Parameters Type Name Description System.Object param Validated value. System.Type notExpectedType The value of param must not be of this type. System.String paramName Name of the method parameter. System.String message Custom exception message. Exceptions Type Condition System.ArgumentException The value of param is of forbidden type. IsNotOfType<T>(Object, String) The value of param must not be of given type T . Declaration public static void IsNotOfType<T>(object param, string paramName) Parameters Type Name Description System.Object param Validated value. System.String paramName Name of the method parameter. Type Parameters Name Description T The value of param must not be of this type. Exceptions Type Condition System.ArgumentException The value of param is of forbidden type. IsNotOfType<T>(Object, String, String) The value of param must not be of given type T . Thrown exception has custom message message . Declaration public static void IsNotOfType<T>(object param, string paramName, string message) Parameters Type Name Description System.Object param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Type Parameters Name Description T The value of param must not be of this type. Exceptions Type Condition System.ArgumentException The value of param is of forbidden type. IsOfType(Object, Type, String) The value of param must be of given type expectedType . Declaration public static void IsOfType(object param, Type expectedType, string paramName) Parameters Type Name Description System.Object param Validated value. System.Type expectedType Required type of param . System.String paramName Name of the method parameter. Exceptions Type Condition System.ArgumentException The value of param is not of required type. IsOfType(Object, Type, String, String) The value of param must be of given type expectedType . Thrown exception has custom message message . Declaration public static void IsOfType(object param, Type expectedType, string paramName, string message) Parameters Type Name Description System.Object param Validated value. System.Type expectedType Required type of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Exceptions Type Condition System.ArgumentException The value of param is not of required type. IsOfType<T>(Object, String) The value of param must be of given type T . Declaration public static void IsOfType<T>(object param, string paramName) Parameters Type Name Description System.Object param Validated value. System.String paramName Name of the method parameter. Type Parameters Name Description T Expected type of param . Exceptions Type Condition System.ArgumentException The value of param is not of required type. IsOfType<T>(Object, String, String) The value of param must be of given type T . Thrown exception has custom message message . Declaration public static void IsOfType<T>(object param, string paramName, string message) Parameters Type Name Description System.Object param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Type Parameters Name Description T Expected type of param . Exceptions Type Condition System.ArgumentException The value of param is not of required type. LessOrEqualThan<T>(T, T, String) The value of param must be less or equal than value . Declaration public static T LessOrEqualThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is greater than value . LessOrEqualThan<T>(T, T, String, String) The value of param must be less or equal than value . Thrown exception has custom message message . Declaration public static T LessOrEqualThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is greater than value . LessThan<T>(T, T, String) The value of param must be less than value . Declaration public static T LessThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is greater or equal than value . LessThan<T>(T, T, String, String) The value of param must be less than value . Thrown exception has custom message message . Declaration public static T LessThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is greater or equal than value . NotEmptyGuid(Guid, String) The value of param can not be empty GUID ( System.Guid.Empty ). Declaration public static Guid NotEmptyGuid(Guid param, string paramName) Parameters Type Name Description System.Guid param Validated value. System.String paramName Name of the method parameter. Returns Type Description System.Guid Input value of param . Exceptions Type Condition System.ArgumentException Paramere je prázdny GUID ( System.Guid.Empty ). NotEmptyGuid(Guid, String, String) The value of param can not be empty GUID ( System.Guid.Empty ). Thrown exception has custom message message . Declaration public static Guid NotEmptyGuid(Guid param, string paramName, string message) Parameters Type Name Description System.Guid param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description System.Guid Input value of param . Exceptions Type Condition System.ArgumentException Value of param is empty GUID ( System.Guid.Empty ). NotEqual<T>(T, T, String) The value of param must not be value . Declaration public static T NotEqual<T>(T param, T value, string paramName) Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is value . NotEqual<T>(T, T, String, String) The value of param must not be value . Thrown exception has custom message message . Declaration public static T NotEqual<T>(T param, T value, string paramName, string message) Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is value . NotNull<T>(T, String) The value of param can not be null . Declaration public static T NotNull<T>(T param, string paramName) Parameters Type Name Description T param Validated value. System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentNullException The value of param is null . NotNull<T>(T, String, String) The value of param can not be null . Thrown exception has custom message message . Declaration public static T NotNull<T>(T param, string paramName, string message) Parameters Type Name Description T param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentNullException The value of param is null . NotNullOrEmpty(String, String) The value of param can not be null , nor empty string. Declaration public static string NotNullOrEmpty(string param, string paramName) Parameters Type Name Description System.String param Validated value. System.String paramName Name of the method parameter. Returns Type Description System.String Input value of param . Exceptions Type Condition System.ArgumentNullException The value of param is null . System.ArgumentException The value of param is empty string. NotNullOrEmpty(String, String, String) The value of param can not be null , nor empty string. Thrown exception has custom message message . Declaration public static string NotNullOrEmpty(string param, string paramName, string message) Parameters Type Name Description System.String param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description System.String Input value of param . Exceptions Type Condition System.ArgumentNullException The value of param is null . System.ArgumentException The value of param is empty string. NotNullOrWhiteSpace(String, String) The value of param can not be null , empty string, nor string containing only whitespace characters. Declaration public static string NotNullOrWhiteSpace(string param, string paramName) Parameters Type Name Description System.String param Validated value. System.String paramName Name of the method parameter. Returns Type Description System.String Input value of param . Exceptions Type Condition System.ArgumentNullException The value of param is null . System.ArgumentException The value of param is empty string or string containing only whitespace characters. NotNullOrWhiteSpace(String, String, String) The value of param can not be null , empty string, nor string containing only whitespace characters. Thrown exception has custom message message . Declaration public static string NotNullOrWhiteSpace(string param, string paramName, string message) Parameters Type Name Description System.String param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description System.String Input value of param . Exceptions Type Condition System.ArgumentNullException The value of param is null . System.ArgumentException The value of param is empty string or string containing only whitespace characters."
  },
  "api/Kros.KORM/Kros.KORM.Metadata.html": {
    "href": "api/Kros.KORM/Kros.KORM.Metadata.html",
    "title": "Namespace Kros.KORM.Metadata | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Metadata Classes ColumnInfo Class, which represent information about column from database. ConventionModelMapper Model mapper, which know define convention for name mapping. DatabaseMapper Mapper for database. Map object types to database informations. TableInfo Class, which represent information about table from database Interfaces IDatabaseMapper Interface, which describe mapper for database. Map object types to database informations. IModelMapper Interface, which describe class for mapping database to model. Enums AutoIncrementMethodType Type of primary key auto increment method."
  },
  "api/Kros.KORM/Kros.KORM.Query.IQueryProviderFactory.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IQueryProviderFactory.html",
    "title": "Interface IQueryProviderFactory | Kros.Libs",
    "keywords": "Interface IQueryProviderFactory Interface, which describe factory for creating provider. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryProviderFactory Methods Create(ConnectionStringSettings, IModelBuilder, IDatabaseMapper) Creates the specified QueryProvider. Declaration IQueryProvider Create(ConnectionStringSettings connectionString, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of IQueryProvider. Create(DbConnection, IModelBuilder, IDatabaseMapper) Creates the specified QueryProvider. Declaration IQueryProvider Create(DbConnection connection, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of IQueryProvider."
  },
  "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.html": {
    "href": "api/Kros.KORM/Kros.KORM.Materializer.ModelBuilder.html",
    "title": "Class ModelBuilder | Kros.Libs",
    "keywords": "Class ModelBuilder ModelBuilder, which know materialize data from Db to objects. Inheritance System.Object ModelBuilder Implements IModelBuilder Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilder : IModelBuilder Constructors ModelBuilder(IModelFactory) Initializes a new instance of the ModelBuilder class. Declaration public ModelBuilder(IModelFactory modelFactory) Parameters Type Name Description IModelFactory modelFactory The model factory. Exceptions Type Condition System.ArgumentNullException Argument 'modelFactory' is required. Methods Materialize<T>(DataRow) Materialize data from dataRow to instances of model type T . Declaration public T Materialize<T>(DataRow dataRow) Parameters Type Name Description System.Data.DataRow dataRow Data row of the table. Returns Type Description T Model. Type Parameters Name Description T Type of model. Materialize<T>(DataTable) Materialize data from data table to instances of model type T. Declaration public IEnumerable<T> Materialize<T>(DataTable table) Parameters Type Name Description System.Data.DataTable table Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Materialize<T>(IDataReader) Materialize data from reader to instances of model type T. Declaration public IEnumerable<T> Materialize<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The reader from which materialize data. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Remarks If disposeReader is true and connection is not null, then connection will be disposed. Examples var people = database.ModelBuilder.Materialize<Person>(dataTable); Implements IModelBuilder See Also IModelBuilder"
  },
  "api/Kros.KORM/Kros.KORM.IDatabase.html": {
    "href": "api/Kros.KORM/Kros.KORM.IDatabase.html",
    "title": "Interface IDatabase | Kros.Libs",
    "keywords": "Interface IDatabase Interface, which describe class for access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Namespace : Kros.KORM Assembly : Kros.KORM.dll Syntax public interface IDatabase : IDisposable Examples Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory ModelBuilder Gets the model builder for materializing data from ado to models. Declaration IModelBuilder ModelBuilder { get; } Property Value Type Description IModelBuilder Examples Methods BeginTransaction() Begins the transaction. Declaration ITransaction BeginTransaction() Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. Examples BeginTransaction(IsolationLevel) Begins the transaction using the specified isolation level. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The database isolation level with which the underlying store transaction will be created. Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. Examples CreateBulkInsert() Creates instance of IBulkInsert . Declaration IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Instance of IBulkInsert . CreateBulkUpdate() Creates instance of IBulkUpdate . Declaration IBulkUpdate CreateBulkUpdate() Returns Type Description IBulkUpdate Instance of IBulkUpdate . ExecuteNonQuery(String) Executes arbitrary query. Declaration int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. ExecuteScalar(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteScalar(string query) Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteScalar(string query, params object[] args) Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar<TResult>(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TResult? ExecuteScalar<TResult>(string query) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteScalar<TResult>(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TResult? ExecuteScalar<TResult>(string query, params object[] args) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String) Executes the stored procedure. Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Executes the stored procedure with parameters. Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. CommandParameterCollection parameters The stored procedure parameters. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. InitDatabaseForIdGenerator() Initializes database for using ID generator. Initialization can mean creating necessary table and stored procedure. Declaration void InitDatabaseForIdGenerator() Query<T>() Gets the query builder for T creating and executing query for obtains models. Declaration IQuery<T> Query<T>() Returns Type Description IQuery <T> Query builder. Type Parameters Name Description T Type of model, for which querying."
  },
  "api/Kros.KORM/Kros.KORM.Data.html": {
    "href": "api/Kros.KORM/Kros.KORM.Data.html",
    "title": "Namespace Kros.KORM.Data | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Data Interfaces ITransaction Represent database transaction. Instances of this class are obtained from BeginTransaction() and it is not designed to be directly constructed in your application code."
  },
  "api/Kros.KORM/Kros.KORM.Query.Sql.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.Sql.html",
    "title": "Namespace Kros.KORM.Query.Sql | Kros.Libs",
    "keywords": "Namespace Kros.KORM.Query.Sql Classes DefaultQuerySqlGenerator Default sql query visitor for generating SELECT command. DefaultQuerySqlGenerator.OrderBy Class which has information about order statement. DefaultQuerySqlGenerator.Parameters Class which help with Linq query parameters. ParameterExtractingExpressionVisitor Class for extracting parameters from Expression. Structs RawSqlString A string representing a raw SQL query. This type enables overload resolution between the regular and interpolated SQL string query. Interfaces ISqlExpressionVisitor Interface, which describe visitor for genereting sql select command. Enums DefaultQuerySqlGenerator.OrderType Order type."
  },
  "api/Kros.Utils/Kros.Data.BulkActions.IBulkActionDataReader.html": {
    "href": "api/Kros.Utils/Kros.Data.BulkActions.IBulkActionDataReader.html",
    "title": "Interface IBulkActionDataReader | Kros.Libs",
    "keywords": "Interface IBulkActionDataReader Interface for data source used in bulk actions ( IBulkInsert , IBulkUpdate ). Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkActionDataReader : IDisposable Properties FieldCount Columns count of the data row. Declaration int FieldCount { get; } Property Value Type Description System.Int32 Methods GetName(Int32) Returns column name at position i . Declaration string GetName(int i) Parameters Type Name Description System.Int32 i Index of column. Returns Type Description System.String Column name. Exceptions Type Condition System.IndexOutOfRangeException Zadaný index bol mimo rozsah stĺpcov 0 až FieldCount . GetOrdinal(String) Return index of column with name name . Declaration int GetOrdinal(string name) Parameters Type Name Description System.String name Column name. Returns Type Description System.Int32 Index of column. GetValue(Int32) Returns value of column at index i . Declaration object GetValue(int i) Parameters Type Name Description System.Int32 i Column index. Returns Type Description System.Object Object - value of column. Exceptions Type Condition System.IndexOutOfRangeException Defined index is not between 0 and FieldCount . Read() Moves reader to next record. Declaration bool Read() Returns Type Description System.Boolean true if next record exists and reader is moved, false if next record does not exist."
  },
  "api/Kros.KORM/Kros.KORM.Query.IDbSet-1.html": {
    "href": "api/Kros.KORM/Kros.KORM.Query.IDbSet-1.html",
    "title": "Interface IDbSet<T> | Kros.Libs",
    "keywords": "Interface IDbSet<T> An IDbSet represents the collection of all entities in the context, or that can be queried from the database, of a given type. DbSet is a concrete implementation of IDbSet. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IDbSet<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The type that defines the set. Properties AddedItems List of items in Added state. Declaration IEnumerable<T> AddedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> DeletedItems List of items in Deleted state. Declaration IEnumerable<T> DeletedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> EditedItems List of items in Edited state. Declaration IEnumerable<T> EditedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> Methods Add(T) Adds the item to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration void Add(T entity) Parameters Type Name Description T entity The item to add. Add(IEnumerable<T>) Adds the items to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration void Add(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to add. BulkInsert() Bulk inserts pending added items. Declaration void BulkInsert() Examples var people = database.Query<Person>().AsDbSet(); foreach (var person in dataForImport) { people.Add(person); } people.BulkInsert(); BulkInsert(IEnumerable<T>) Bulk inserts items . Declaration void BulkInsert(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to insert. BulkInsertAsync() Asynchronously bulk inserts pending added items. Declaration Task BulkInsertAsync() Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk insert operation. BulkInsertAsync(IEnumerable<T>) Asynchronously bulk inserts items . Declaration Task BulkInsertAsync(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to insert. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk insert operation. BulkUpdate() Bulk updates pending edited items. Declaration void BulkUpdate() Examples var people = database.Query<Person>().AsDbSet(); foreach (var person in dataForUpdate) { people.Edit(person); } people.BulkUpdate(); BulkUpdate(Action<IDbConnection, IDbTransaction, String>) Bulk updates pending edited items with specific action. Declaration void BulkUpdate(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). BulkUpdate(IEnumerable<T>) Bulk updates items . Declaration void BulkUpdate(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. BulkUpdate(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Bulk updates items with specific action. Declaration void BulkUpdate(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). BulkUpdateAsync() Asynchronously bulk updates pending edited items. Declaration Task BulkUpdateAsync() Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk update operation. BulkUpdateAsync(Action<IDbConnection, IDbTransaction, String>) Asyncronousky bulk updates pending edited items with specific action. Declaration Task BulkUpdateAsync(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk update operation. BulkUpdateAsync(IEnumerable<T>) Asyncronously bulk updates items . Declaration Task BulkUpdateAsync(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk update operation. BulkUpdateAsync(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Asynchronously bulk updates items with specific action. Declaration Task BulkUpdateAsync(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk update operation. Clear() Rolls back all pending changes. Declaration void Clear() CommitChanges() Commits all pending changes to the database. Declaration void CommitChanges() CommitChangesAsync() Asynchronously commits all pending changes to the database. Declaration Task CommitChangesAsync() Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous save operation. Delete(T) Marks the item as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration void Delete(T entity) Parameters Type Name Description T entity The item to delete. Delete(IEnumerable<T>) Marks the items as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration void Delete(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to delete. Edit(T) Marks the item as Edited such that it will be updated in the database when CommitChanges is called. Declaration void Edit(T entity) Parameters Type Name Description T entity The item to edit. Edit(IEnumerable<T>) Marks the items as Edited such that it will be updated in the database when CommitChanges is called. Declaration void Edit(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to edit."
  },
  "api/Kros.KORM/Kros.KORM.Exceptions.AlreadyInCollectionException.html": {
    "href": "api/Kros.KORM/Kros.KORM.Exceptions.AlreadyInCollectionException.html",
    "title": "Class AlreadyInCollectionException | Kros.Libs",
    "keywords": "Class AlreadyInCollectionException Exception class for item already exists in the collection. Inheritance System.Object System.Exception AlreadyInCollectionException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class AlreadyInCollectionException : Exception, ISerializable, _Exception Constructors AlreadyInCollectionException() Initializes a new instance of the AlreadyInCollectionException class. Declaration public AlreadyInCollectionException() AlreadyInCollectionException(String) Initializes a new instance of the AlreadyInCollectionException class. Declaration public AlreadyInCollectionException(string message) Parameters Type Name Description System.String message Exception message."
  }
}